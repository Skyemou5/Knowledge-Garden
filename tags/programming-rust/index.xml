<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming rust on</title><link>https://notes.benshurts.com/tags/programming-rust/</link><description>Recent content in programming rust on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://notes.benshurts.com/tags/programming-rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Cargo Clippy for Rust</title><link>https://notes.benshurts.com/notes/Programming/RUST/Cargo-Clippy-for-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/Programming/RUST/Cargo-Clippy-for-Rust/</guid><description>Cargo Clippy this tools helps to check for idiomatic code. it also checks for correctness errors, even if code compiles. It also checks for complexity.</description></item><item><title>Closures in Rust</title><link>https://notes.benshurts.com/notes/Programming/RUST/Closures-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/Programming/RUST/Closures-in-Rust/</guid><description>Closures inspired by ruby and smalltalk
closure is an anonymous function that can borrow or capture data from the scope it is nested in.</description></item><item><title>Control Flow in Rust</title><link>https://notes.benshurts.com/notes/Programming/RUST/Control-Flow-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/Programming/RUST/Control-Flow-in-Rust/</guid><description>Control Flow control flow is great in rust
Rust doesn&amp;rsquo;t like type coersion the condition must resolve to a boolean</description></item><item><title>Iterators in Rust</title><link>https://notes.benshurts.com/notes/Programming/RUST/Iterators-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/Programming/RUST/Iterators-in-Rust/</guid><description>Iterators 1 2 3 v.into_iter()// consumers v returns owned items v.iter()// returns immutable references (just look at collection) v.iter_mut()// returns mutable references (you can modify values in place) there are other iterators for other things like hash_maps</description></item><item><title>Libraries and Modules in Rust</title><link>https://notes.benshurts.com/notes/Programming/RUST/Libraries-and-Modules-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/Programming/RUST/Libraries-and-Modules-in-Rust/</guid><description>Libraries and modules the main library is lib.rs inside that if you declare a module via pub mod mymodule; (ended in semicolon) then rust will look for rs file in the same directory as the name of the module.</description></item><item><title>Modules in Rust</title><link>https://notes.benshurts.com/notes/Programming/RUST/Modules-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/Programming/RUST/Modules-in-Rust/</guid><description>Modules similar to python modules
All items in libraries are private by default even to binaries in same project.</description></item><item><title>Ownership in Rust</title><link>https://notes.benshurts.com/notes/Programming/RUST/Ownership-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/Programming/RUST/Ownership-in-Rust/</guid><description>Ownership this is what sets rust apart from other systems languages
! Each value has an owner
Only one owner per value, ( there may be borrowers )</description></item><item><title>Semantic Versioning in Rust</title><link>https://notes.benshurts.com/notes/Programming/RUST/Semantic-Versioning-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/Programming/RUST/Semantic-Versioning-in-Rust/</guid><description>semantic versioning x.y.z x -&amp;gt; major version y -&amp;gt; minor version z -&amp;gt; patch version
rust rules
when the version is less than 1.</description></item><item><title>Strings in Rust</title><link>https://notes.benshurts.com/notes/Programming/RUST/Strings-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/Programming/RUST/Strings-in-Rust/</guid><description>Strings Compound Types store multiple values of other types into one type.
Tuple store multiple values of any type.</description></item><item><title>Structs in Rust</title><link>https://notes.benshurts.com/notes/Programming/RUST/Structs-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/Programming/RUST/Structs-in-Rust/</guid><description>Structs in other languages there are classes, in Rust there are Structs
structs can have
data fields methods associated functions structs should be in capital cammelcase</description></item><item><title>Unsafe Rust</title><link>https://notes.benshurts.com/notes/Programming/RUST/Unsafe-RUST/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/Programming/RUST/Unsafe-RUST/</guid><description/></item></channel></rss>