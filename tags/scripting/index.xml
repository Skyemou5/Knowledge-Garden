<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scripting on</title><link>https://notes.benshurts.com/tags/scripting/</link><description>Recent content in scripting on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://notes.benshurts.com/tags/scripting/index.xml" rel="self" type="application/rss+xml"/><item><title>Houdini Connect Points</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Connect-Points/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Connect-Points/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int primPts[] = primpoints(0, @primnum); int firstPt = primPts[0]; int lastPt = primPts[-1]; int isClosed = primintrinsic(0, &amp;#34;closed&amp;#34;, @primnum); if (isClosed || firstPt == lastPt) // is closed poly or closed curve { // if is closed curve // pt array&amp;#39;s first pt and last pt are the same pt if (firstPt == lastPt) pop(primPts); int ptCount = len(primPts); for (int pt0Idx = 0; pt0Idx &amp;lt; ptCount - 1; pt0Idx++) // the origin last pt is no need as new line first pt { int pt0 = primPts[pt0Idx]; for (int pt1Idx = pt0Idx + 2; pt1Idx &amp;lt; ptCount; pt1Idx++) { int pt1 = primPts[pt1Idx]; if (!</description></item><item><title>Scripting for Animation 2</title><link>https://notes.benshurts.com/notes/courses/Scripting-for-Animation-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/courses/Scripting-for-Animation-2/</guid><description>This course is a little different because it&amp;rsquo;s for 2D animation students. However there is still a need to know or be somewhat familiar with technical aspects that are often involved in 2D animation.</description></item><item><title>Scripting for animation coding 2</title><link>https://notes.benshurts.com/notes/courses/Coding-Lesson-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/courses/Coding-Lesson-2/</guid><description>This will be a somewhat short lesson, we will work on creating a simple game with javascript in order to practice the basics of scripting with javascript.</description></item><item><title>Straighten UVs Vex</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Straighten-UVs-Vex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Straighten-UVs-Vex/</guid><description>1 @uv.y = @primnum + (1 / float(@numprim -1)); move the UVs of each prim along the y/v axis</description></item><item><title>Velocity Vectors Vex Houdini</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Velocity-Vectors-Vex-Houdini/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Velocity-Vectors-Vex-Houdini/</guid><description>1 2 3 4 5 6 vector middlepoint = point(0,&amp;#39;P&amp;#39;,878) + chv(&amp;#39;adddir&amp;#39;); float noise = noise(chv(&amp;#39;offset&amp;#39;)+@P*chv(&amp;#39;fancyscale&amp;#39;)*ch(&amp;#39;multynoise&amp;#39;))*5; v@pushout = (middlepoint-@P)*noise; v@v = v@pushout*-1;</description></item></channel></rss>