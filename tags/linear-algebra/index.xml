<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linear-algebra on</title><link>https://notes.benshurts.com/tags/linear-algebra/</link><description>Recent content in linear-algebra on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://notes.benshurts.com/tags/linear-algebra/index.xml" rel="self" type="application/rss+xml"/><item><title>Atmospheric Rendering</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Atmospheric-Rendering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Atmospheric-Rendering/</guid><description> https://en.wikipedia.org/wiki/Mie_scattering https://www.britannica.com/science/Rayleigh-scattering https://www.scratchapixel.com/lessons/procedural-generation-virtual-worlds/simulating-sky https://www.alanzucconi.com/2017/10/10/atmospheric-scattering-1/
#todo
THING1 THING2 THING3 orientation
1 2 3 4 5 6 7 8 9 10 11 12 vector v0 = normalize(set(-1,0,-1)); vector vref = set(0,0,-1); vector4 orient = dihedral(v0, vref); vector angle = qconvert(orient); //angle = degrees(angle)*-1; //v@angle = angle; vector angle = quaterniontoeuler(orient, 0); angle = degrees(angle);</description></item><item><title>Setting Up Banking Curves in Houdini</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/Banking-Curves-in-Houdini/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/Banking-Curves-in-Houdini/</guid><description>The Problem A common problem you may encounter is adding the correct vector data to a curve to get the up and banking directions per point.</description></item><item><title>Velocity Vectors Vex Houdini</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Velocity-Vectors-Vex-Houdini/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Velocity-Vectors-Vex-Houdini/</guid><description>1 2 3 4 5 6 vector middlepoint = point(0,&amp;#39;P&amp;#39;,878) + chv(&amp;#39;adddir&amp;#39;); float noise = noise(chv(&amp;#39;offset&amp;#39;)+@P*chv(&amp;#39;fancyscale&amp;#39;)*ch(&amp;#39;multynoise&amp;#39;))*5; v@pushout = (middlepoint-@P)*noise; v@v = v@pushout*-1;</description></item></channel></rss>