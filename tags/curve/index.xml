<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>curve on</title><link>https://notes.mzmr.xyz/tags/curve/</link><description>Recent content in curve on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://notes.mzmr.xyz/tags/curve/index.xml" rel="self" type="application/rss+xml"/><item><title>Catenary Curves Houdini Vex</title><link>https://notes.mzmr.xyz/notes/3D-Modeling/Houdini/houdini-vex/Catenary-Curves-Vex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.mzmr.xyz/notes/3D-Modeling/Houdini/houdini-vex/Catenary-Curves-Vex/</guid><description>Better curve code
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 // Parameter to control the shape of the catenary float a = chf(&amp;#34;a&amp;#34;); // Retrieve the start and end points in global space vector pos_start = point(0, &amp;#34;P&amp;#34;, 0); vector pos_end = point(0, &amp;#34;P&amp;#34;, npoints(0) - 1); // Calculate the line direction and length vector line_dir = normalize(pos_end - pos_start); float line_length = length(pos_end - pos_start); // The distance between the lowest point of the catenary (vertex) and the endpoints along the line float half_length = line_length * 0.</description></item></channel></rss>