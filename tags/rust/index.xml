<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on</title><link>https://benshurts.com/tags/rust/</link><description>Recent content in rust on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://benshurts.com/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Functions in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Functions-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Functions-in-Rust/</guid><description>Functions main function is the starting action
fn = pronounced &amp;ldquo;fun&amp;rdquo;
use snakecase for functions =&amp;gt; fn do_stuff()
Functions don&amp;rsquo;t have to appear in file before code that calls them!</description></item><item><title>Memory Safety in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Memory-Safety-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Memory-Safety-in-Rust/</guid><description>Memory Safety rust guarantees memory safety at compile time
Variables must be initialized
1 2 3 4 5 6 7 8 9 fn main(){letenigma: i32;iftrue{enigma=42;}else{enigma=7;}} this works because the compiler can tell what a value would be at runtime.</description></item><item><title>Random Rust Notes</title><link>https://benshurts.com/notes/Programming/RUST/Random-Rust-Notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Random-Rust-Notes/</guid><description>converting a string to number
variable are immutable by default, to change them later you have to set it to be mutable</description></item><item><title>Rust Hub</title><link>https://benshurts.com/notes/Programming/RUST/Rust-Hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Rust-Hub/</guid><description>[[notes/Programming/RUST/Rust-bucket]]</description></item><item><title>Scope in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Scope-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Scope-in-Rust/</guid><description>Scope in Rust scope begins where it&amp;rsquo;s created and ends at the end of the block, and through nested blocks.</description></item></channel></rss>