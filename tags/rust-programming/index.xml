<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust programming on</title><link>https://benshurts.com/tags/rust-programming/</link><description>Recent content in rust programming on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://benshurts.com/tags/rust-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Booleans in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Booleans-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Booleans-in-Rust/</guid><description>Boolean defined as -&amp;gt; bool
literals are -&amp;gt; true or false
Booleans are not integers so don&amp;rsquo;t try and use math on them, it wont work, To do this you must cast them</description></item><item><title>Character Types in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Character-Types-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Character-Types-in-Rust/</guid><description>Character type char
could be anything from sound, icon, action, letters.
char consists of 4 bytes. typically makes characters UCS-4/UTF-32 types</description></item><item><title>Collections in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Collections-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Collections-in-Rust/</guid><description>Collections Vectors 1 Vec&amp;lt;T&amp;gt; -&amp;gt; Vector. Vecors are the most commonly used collection.
Define the vector type in the &amp;lt;&amp;gt;</description></item><item><title>Documentation in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Documentation-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Documentation-in-Rust/</guid><description>Documentation use the command cargo doc &amp;ndash;no-deps &amp;ndash;open the extra stuff only generates docs for your code.
links are wikilinks adding backticks makes it formatted different.</description></item><item><title>Enumns in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Enums-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Enums-in-Rust/</guid><description>Enums Enums in rust are more like algebraic datatypes in haskel than C like enums.
1 2 3 4 5 enum Color{Red,Green,Blue,} the real power of enum comes from associating data and methods with variants.</description></item><item><title>FLoats in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Floats-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Floats-in-Rust/</guid><description>Floats f32 - f64
f32 has less precision is often faster and not supported by all architectures
f64 has much more precision but is very very slow on 32 bit architectures</description></item><item><title>Idiomatic Rust</title><link>https://benshurts.com/notes/Programming/RUST/Idiomatic-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Idiomatic-Rust/</guid><description>Idiomatic Rust Using rust properly, and with the correct grammer.
Rust has built in tools to help with this
rustfmt</description></item><item><title>Integer Literals in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Integer-literals-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Integer-literals-in-Rust/</guid><description>Integer literals name value Decimal 10000 Hex 0xdeadbeef Octal 0o77543211 Binary 0b1111011 Byte(u8 only) b&amp;rsquo;A' Term u8 and byte are used interchangably in rust</description></item><item><title>Packages-Crates in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Packages-crates-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Packages-crates-in-Rust/</guid><description>Packages - (crates) once you have specified the name of package you want to use you need to go the Cargo.</description></item><item><title>References and Borrowing in Rust</title><link>https://benshurts.com/notes/Programming/RUST/References-and-Borrowing-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/References-and-Borrowing-in-Rust/</guid><description>References and Borrowing instead of moving our variable lets use a reference
1 2 3 4 5 6 7 8 lets1=String::from(&amp;#34;abc&amp;#34;);do_stuff(&amp;amp;s1);println!</description></item><item><title>Rust Crates Info</title><link>https://benshurts.com/notes/Programming/RUST/Rust-Crates-info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Rust-Crates-info/</guid><description>Crates once published it can&amp;rsquo;t be removed. Don&amp;rsquo;t publish useless packages.
Package names need to be unique.
log into crate.</description></item><item><title>Rust gitignore</title><link>https://benshurts.com/notes/Programming/RUST/Rust-gitignore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Rust-gitignore/</guid><description>rust gitignore 1 2 3 /target/ # build **/*.rs.bk #backup files #Cargo.lock #only if making a library</description></item><item><title>Rust Modules</title><link>https://benshurts.com/notes/Programming/RUST/Rust-Modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Rust-Modules/</guid><description>modules can be separate files
1 mod file; or in curly braces
1 2 3 mod test{}</description></item><item><title>Smart Pointers in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Rust-Smart-Pointers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Rust-Smart-Pointers/</guid><description>Smart Pointers Pointers -&amp;gt; an arrow to a value that&amp;rsquo;s somewhere else
Smart pointer -&amp;gt; pointers with additional features and metadata</description></item><item><title>Threads in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Threads-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Threads-in-Rust/</guid><description>Threads In rust threading is cross platform, mac win linux and more.
1 2 3 4 5 6 7 8 9 10 11 usestd::thread;fn main(){lethandle=thread::spawn(move||{// do stuff in a child thread });// do stuff simultaneously in the main thead // wait until thread has exited handle.</description></item><item><title>Traits in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Traits-in-Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Traits-in-Rust/</guid><description>Traits rust takes the composition over inheritance route.
traits are somewhat like interfaces in other languages
1 2 3 4 5 6 7 8 9 10 11 12 struct RedFox{enemy:bool,life:u32,}traitNoisy{fn get_noise(&amp;amp;self)-&amp;gt; &amp;amp;str;}implNoisyforRedFox{fn get_noise(&amp;amp;self)-&amp;gt; &amp;amp;str {&amp;#34;Meow?</description></item><item><title>Variable in Rust</title><link>https://benshurts.com/notes/Programming/RUST/Rust-Variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://benshurts.com/notes/Programming/RUST/Rust-Variables/</guid><description>Shadowing data can be handled in a few different ways
borrowed transferred shadowed sharing</description></item></channel></rss>