<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vex on</title><link>https://notes.benshurts.com/tags/vex/</link><description>Recent content in vex on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://notes.benshurts.com/tags/vex/index.xml" rel="self" type="application/rss+xml"/><item><title>About vex in houdini</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/Vex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/Vex/</guid><description>VEX is a so called SIMD architecture ( https://en.wikipedia.org/wiki/SIMD) (Single instructions, multiple Data). In basic terms that means the code is not run line by line, but kind of &amp;ldquo;at once&amp;rdquo; at the end (because it&amp;rsquo;s faster that way).</description></item><item><title>Atmospheric Rendering</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Atmospheric-Rendering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Atmospheric-Rendering/</guid><description> https://en.wikipedia.org/wiki/Mie_scattering https://www.britannica.com/science/Rayleigh-scattering https://www.scratchapixel.com/lessons/procedural-generation-virtual-worlds/simulating-sky https://www.alanzucconi.com/2017/10/10/atmospheric-scattering-1/
#todo
THING1 THING2 THING3 orientation
1 2 3 4 5 6 7 8 9 10 11 12 vector v0 = normalize(set(-1,0,-1)); vector vref = set(0,0,-1); vector4 orient = dihedral(v0, vref); vector angle = qconvert(orient); //angle = degrees(angle)*-1; //v@angle = angle; vector angle = quaterniontoeuler(orient, 0); angle = degrees(angle);</description></item><item><title>Catenary Curves Houdini Vex</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Catenary-Curves-Vex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Catenary-Curves-Vex/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #include &amp;lt;math.</description></item><item><title>Get Points on the edge of a mesh houdini</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/Houdini-Vex-Get-Points-On-edge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/Houdini-Vex-Get-Points-On-edge/</guid><description/></item><item><title>Houdini Connect Points</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Connect-Points/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Connect-Points/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int primPts[] = primpoints(0, @primnum); int firstPt = primPts[0]; int lastPt = primPts[-1]; int isClosed = primintrinsic(0, &amp;#34;closed&amp;#34;, @primnum); if (isClosed || firstPt == lastPt) // is closed poly or closed curve { // if is closed curve // pt array&amp;#39;s first pt and last pt are the same pt if (firstPt == lastPt) pop(primPts); int ptCount = len(primPts); for (int pt0Idx = 0; pt0Idx &amp;lt; ptCount - 1; pt0Idx++) // the origin last pt is no need as new line first pt { int pt0 = primPts[pt0Idx]; for (int pt1Idx = pt0Idx + 2; pt1Idx &amp;lt; ptCount; pt1Idx++) { int pt1 = primPts[pt1Idx]; if (!</description></item><item><title>Houdini Reference</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/Houdini-Reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/Houdini-Reference/</guid><description>Creating Groups in Vex You can create groups in vex in various ways.
1 i@group_groupname = 1 //1 = include 0 = exclude example:</description></item><item><title>Houdini Vex Hub</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Vex-Hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Vex-Hub/</guid><description>[[notes/3D-Modeling/Houdini/houdini-vex/Straighten UVs Vex]]
[[notes/3D-Modeling/Houdini/houdini-vex/Catenary Curves Vex]]
[[notes/3D-Modeling/Houdini/houdini-vex/Velocity Vectors Vex Houdini]]
[[notes/3D-Modeling/Houdini/houdini-vex/Houdini Connect Points]]
[[notes/3D-Modeling/Houdini/houdini-vex/Houdini Atmospheric Rendering]]</description></item><item><title>Maintain gaps in a resample houdini</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Maintain-Gaps-Resample-Houdini/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Maintain-Gaps-Resample-Houdini/</guid><description>This solves a problem I have often encountered where I need the gaps to stay the same as things are instanced onto a resampled line.</description></item><item><title>Straighten UVs Vex</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Straighten-UVs-Vex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Straighten-UVs-Vex/</guid><description>1 @uv.y = @primnum + (1 / float(@numprim -1)); move the UVs of each prim along the y/v axis</description></item><item><title>Velocity Vectors Vex Houdini</title><link>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Velocity-Vectors-Vex-Houdini/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.benshurts.com/notes/3D-Modeling/Houdini/houdini-vex/Velocity-Vectors-Vex-Houdini/</guid><description>1 2 3 4 5 6 vector middlepoint = point(0,&amp;#39;P&amp;#39;,878) + chv(&amp;#39;adddir&amp;#39;); float noise = noise(chv(&amp;#39;offset&amp;#39;)+@P*chv(&amp;#39;fancyscale&amp;#39;)*ch(&amp;#39;multynoise&amp;#39;))*5; v@pushout = (middlepoint-@P)*noise; v@v = v@pushout*-1;</description></item></channel></rss>