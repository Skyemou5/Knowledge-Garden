{"/":{"title":"My Second Brain","content":"\n\u003e[!IMPORTANT] This site is under active development. Expect some inconsistencies while I work out the bugs. Feel free to contact me if you have questions.\n\n\n# About This Site\nThis website was created in [Obsidian](https://obsidian.md/), a [markdown](https://www.markdownguide.org/) editor focused around knowledge management. This website contains a knowledge graph similar to what Obsidian uses in order to help you navigate and find the resources you need.\n\nThis is mostly for me to share my knowledge with anyone who wants to learn the same things I have learned.\n\n\n## How to use this website\nTo easily use this website do a few things:\n1. Click through the relevant links.\n2. Click through the knowledge graph at the bottom of each page.\n3. Use the search bar.\n4. Click on tags to see all notes with the same tag.\n\n\n## Courses\nThis website contains resources and helpful information for anyone taking DGM 2210 and 1610 at UVU. You don't need to be part of those classes to find this helpful though.\n\n\n### Start here for the Course Info\n\n[[notes/3D-Modeling/DGM 2210 - 3D for 2D Pipelines|DGM2210 / 3D for 2D Pipelines]]\n\n[[notes/Unity/Game-Development|DGM 1610 / Game dev with Unity]]\n\n[[notes/Programming/Javascript/Javascript Hub]]\n\n[[notes/courses/Scripting for Animation 2|Scripting for Animation 2]]\n\n\n\n## Information on this Site\n\nI will be continuously updating this site with all the technical information that I think is helpful and \n\nBelow are links to hubs of the different topics I will have on this site.\n\n### General Hubs\n\n[[notes/General/CG-Fundimentals/CG Fundimentals]]\n\n[[notes/Programming/Programming Hub]]\n\n[[notes/3D-Modeling/3D Modeling Hub]]\n\n[[notes/course specific stuff/2D for 3D/2D for 3D Hub]]\n\n[[notes/Music Production/Music Production Hub]]\n\n[[notes/Music Production/Sound Design Hub]]\n\n[[notes/Mathematics/Mathematics Hub]]\n\n[[notes/General/post-production/Post Production Hub]]\n\n[[notes/General/Lighting Hub]]\n\n[[notes/VFX/VFX Hub]]\n\n\n\n### Software Specific Hubs\n\n![[notes/attachments/blender-icon.png|30]] [[notes/3D-Modeling/blender/Blender Hub|Blender]]\n\n![[notes/attachments/houdini-icon.png|30]] [[notes/3D-Modeling/Houdini/Houdini Hub|Houdini Hub]]\n\n![[notes/attachments/maya-icon.png|30]] [[notes/3D-Modeling/Maya/Maya Hub|Maya]]\n\n![[notes/attachments/unity-icon.png|40]] [[notes/Unity/Unity Hub]]\n\n![[notes/attachments/toonboom-harmony-icon.png|50]][[notes/toonboom/ToonBoom Hub]]\n\n![[notes/attachments/Pasted image 20221102203700.png|50]] [[notes/Obsidian/Obsidian Hub]]\n\n[[notes/git/Git Hub]]\n\n[[notes/Nuke/Nuke Hub]]\n\n[[notes/Godot/Godot Hub]]\n\n[[bitwig hub]]\n\n\n---\n\n## Other Info\n\n[[notes/3D-Modeling/CG Resources]]\n\n[[notes/3D-Modeling/blender/Blender Hub]]\n\n[[notes/General/faq/faq|FAQ]]\n\n[[notes/3D-Modeling/Houdini/Houdini Hub|Houdini]]\n\n[[notes/3D-Modeling/Houdini/Houdini Scratchpad]]\n\n[[notes/Programming/Programming Hub|Programming]]\n\n[[notes/3D-Modeling/Substance/Substance Home]]\n\n[[notes/General/Productivity/Productivity]]\n\n[[notes/3D-Modeling/blender/Notes/sept 19 notes]]\n\n[[notes/Unix/Unix Hub|Unix-Linux Hub]]\n\n---\n\n# My Work\n\nI'm planning on adding my portfolio to this website.\n\n[[notes/Other/My Portfolio Stuff/Portfolio Hub]]\n\n[[notes/Other/My work|My Work]]\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/Excalidraw/Drawing-2022-11-03-11.44.14.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n# Text Elements\nTest SVG Drawing ^q3RnXpnO\n\n%%\n# Drawing\n```json\n{\n\t\"type\": \"excalidraw\",\n\t\"version\": 2,\n\t\"source\": \"https://excalidraw.com\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"g5jribZyUE-jqfCHukM0Y\",\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"x\": -380.75,\n\t\t\t\"y\": -498.4453125,\n\t\t\t\"width\": 432,\n\t\t\t\"height\": 326,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1786833473,\n\t\t\t\"version\": 61,\n\t\t\t\"versionNonce\": 7483201,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1667497474347,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"q3RnXpnO\",\n\t\t\t\"type\": \"text\",\n\t\t\t\"x\": -270.75,\n\t\t\t\"y\": -371.4453125,\n\t\t\t\"width\": 183,\n\t\t\t\"height\": 25,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 1159886799,\n\t\t\t\"version\": 84,\n\t\t\t\"versionNonce\": 444342607,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1667497474347,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"text\": \"Test SVG Drawing\",\n\t\t\t\"rawText\": \"Test SVG Drawing\",\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"baseline\": 18,\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"Test SVG Drawing\"\n\t\t}\n\t],\n\t\"appState\": {\n\t\t\"theme\": \"light\",\n\t\t\"viewBackgroundColor\": \"#ffffff\",\n\t\t\"currentItemStrokeColor\": \"#000000\",\n\t\t\"currentItemBackgroundColor\": \"transparent\",\n\t\t\"currentItemFillStyle\": \"hachure\",\n\t\t\"currentItemStrokeWidth\": 1,\n\t\t\"currentItemStrokeStyle\": \"solid\",\n\t\t\"currentItemRoughness\": 1,\n\t\t\"currentItemOpacity\": 100,\n\t\t\"currentItemFontFamily\": 1,\n\t\t\"currentItemFontSize\": 20,\n\t\t\"currentItemTextAlign\": \"left\",\n\t\t\"currentItemStrokeSharpness\": \"sharp\",\n\t\t\"currentItemStartArrowhead\": null,\n\t\t\"currentItemEndArrowhead\": \"arrow\",\n\t\t\"currentItemLinearStrokeSharpness\": \"round\",\n\t\t\"gridSize\": null,\n\t\t\"colorPalette\": {}\n\t},\n\t\"files\": {}\n}\n```\n%%","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/Excalidraw/Drawing-2022-12-31-14.16.29.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n%%\n# Drawing\n```json\n{\"type\":\"excalidraw\",\"version\":2,\"source\":\"https://excalidraw.com\",\"elements\":[],\"appState\":{\"gridSize\":null,\"viewBackgroundColor\":\"#ffffff\"}}\n```\n%%","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/README":{"title":"","content":"# CG-Knowledge-Garden\nThis is an obsidian vault, so github won't render the markdown quite right.","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/3D-Modeling-Hub":{"title":"3D Modeling Hub","content":"\n# Software\n\n[[notes/3D-Modeling/blender/Blender Hub]]\n\n[[notes/3D-Modeling/Maya/Maya Hub]]\n\n[[notes/3D-Modeling/Houdini/Houdini Hub]]\n\n[[notes/General/Hardsurface Modeling Resources]]\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/CG-Resources":{"title":"CG Resources","content":"\nhttps://byvalle.com/UVchecker/ UV checker maker","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Course-Outline":{"title":"","content":"\n\n\u003e[!NOTE] Need to go over grease-pencil in blender\n\u003eprobably in the 3D in 2D lesson...\n\n## Grading\n\n* Attendance: 50%?\n* Exercises: 10%\n    * File that they go through and follow instructions exactly\n    * Completion points\n* Application: 10%\n    * Apply learning to solve a problem\n        * Didn’t try: C\n        * Attempt: B\n        * Nailed it: A\n* Final Project: 30%\n    * Didn’t try: C\n    * Attempt: B\n        * Should have used all elements\n    * Nailed it: A\n\n\n## Lesson 1: \n\n* Lesson: \n* Exercises\n\n\n## Lesson 2: \n\n\n\n* Lesson: \n* Application\n\n\n## Lesson 3: \n\n\n\n* Lesson:\n* Exercises\n\n\n## **Lesson 4:  UVs Basics (9.19.22)**\n\n\n\n* Mon: UV Basics\n* Notes: \n    * Tell them to start thinking about their final project (RUBRIC TO COME!)\n* Lesson:\n    * Introduce concepts\n\t    * History\n\t\t    * shading\n\t\t    * texture projections\n        * Surface: \n            * What is a surface?\n            * How is that represented?\n            * What data do we use to visualize that? \n            * What are Normals and Tangents?\n        * Texture: \n            * What is a texture?\n            * How is that represented?\n            * What data do we use to visualize that? \n        * UVs\n            * What is a UV?\n            * How is that represented?\n            * What data do we use to visualize that? \n    * Common problems/issues\n        * Review 3 examples\n    * Corner Case\n        * Overlapping UVs \n        * UDIMs\n        * Trim sheets\n        * Squashed UVs with gradients\n* Example/Application\n    * Simple examples: Unwrap a cube\n    * Real World example: Bens cool model (prop)\n    * How do we get textures onto a 3D surface?\n        * Those are UVs (explain)\n    * How do you unwrap a 3D object to make it so your texture is fine\n* Exercises\n    * Simple example: Have them do it in class, one of the ones you did for the simple example\n* Homework\n    * File with exercises\n    * Give them something to unwrap at the end.\n* Wed: UV Advanced \n\n\n## **Lesson 5: Final Project \u0026 Project Management (9.26.22)**\n\n\n\n* Mon: Final Project Review\n    * Notes:\n        * Give them Rubric for Final Project\n        * Example of proposal\n    * Lesson:\n        * Concept Design\n            * Scene:\n                * Frame\n                * Color\n                    * Color scripts\n                    * Color Theory\n                * Detail ratio\n            * Object\n                * What is it\n                * What does it look like on all sides\n                * What will it do\n                * What is it’s relationship to the rest of the scene\n    * Example/Application\n        * Examples of final projects\n    * Exercises:\n        * Walk through of a rubric\n        * Walk through of proposal\n        * Brainstorming activity\n    * Homework:\n        * Write a proposal (next monday)\n* Wed: Project Management\n    * Notes:\n        * Version control\n    * Lesson\n        * \n    * Example/Application\n    * Exercises:\n    * Homework:\n\n\n## **Lesson 6: Surfaces (10.3.22)**\n\n\n\n* Mon: Surfaces basics\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework: \n* Wed: Surfaces Adv\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework\n\n\n## **Lesson 7: Textures (10.10.22)**\n\n\n\n* Mon: Part 1\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework: \n* Wed:  Part 2\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework\n\n\n## **Lesson 8: Lighting \u0026 LookDev (10.17.22)**\n\n\n\n* Mon: Lighting\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework: \n* Wed:  LookDev\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework\n\n\n## **Lesson 9: Rendering (10.24.22)**\n\n\n\n* Mon: Real Time Rendering\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework: \n* Wed:  Raster Rendering\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework\n\n\n## **Lesson 10: Compositing (10.31.22)**\n\n\n\n* Mon: Part 1 (HALLOWEEN)\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework: \n* Wed:  Part 2\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework\n\n\n## **Lesson 11: Rigging (11.7.22)**\n\n\n\n* Mon: \n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework: \n* Wed:  Part 2\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework\n\n\n## **Lesson 12: Animating (11.14.22)**\n\n\n\n* Mon: Part 1\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework: \n* Wed:  Part 2\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework\n\n\n## **Lesson 13: Advanced 3D (11.21.22)**\n\n\n\n* Mon: Houdini\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework: \n* Wed:  Houdini\n    * Notes:\n    * Lesson:\n    * Example/Application\n    * Exercises:\n    * Homework\n        * Extra credit\n\n\n## **Lesson 14: example (11.28.22) - Thanksgiving**\n\n\n\n* Extra credit\n\n\n## **Lesson 15: example (12.5.22) - Study Hall**\n\n\n## **Final Project: due 12.16.22**\n\n\n\n* Create a prop for a 2D animation\n    * \n* \n* Must have: \n    * Naming conventions\n    * Clean file structure\n        * Snake case\n        * [name]_[type]Textures in text folder etc\n        * Models ","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Course-Timeline/1-Course-Introduction":{"title":"","content":"\n\u003cspan \n\t  class='ob-timelines' \n\t  data-date='1' \n\t  data-title='Course Introduction' \n\t  data-class='orange' \n\t  data-img = '3D-Modeling/Course Timeline/images/blender1.jpg' \n\t  data-type='range' \n\t  data-end=\"1\"\u003e \n\tOverview of learning topics\n\u003c/span\u003e\n![blender1](notes/3D-Modeling/Course%20Timeline/images/blender1.jpg)\n\n```css\n\n\n\n```\n\n\n# Course Intro\n\nThe aim of this course is to teach the fundamentals of CG by using Blender and Maya as the vehicle to learn. The reason for Blender is that it is increasing in popularity, it has a relatively low barrier to entry, and it tries to touch on most of the pieces of CG pipeline.\n\nStudents will learn basics of the underlying mathematic principals used in CG, which will help them solve problems later in their CG journeys. They will also learn some of the principles of 3D modeling, rigging, animation, surfacing, shading, lighting, rendering, and compositing.\n\n---\n## Resources\nBefore you begin this course browse the resources page. There is a link to the blender download there too and some free addons I will be discussing throughout the content.\n\n[Blender Resources](notes/3D-Modeling/blender/Resources/Blender%20Resources.md)\n\n\n---\n\n## Learning Objectives\n- Geometry Fundamentals\n- Coordinate Systems\n- CG software\n- CG Industry\n- CG Mathematics Fundamentals\n\n\n\n---\n\n## Assignments\n- What is CG?\n- What made you interested in CG?\n- What would you like to learn from this course?\n\n---\n\n## Quizes\n\n- basics of CG\n- basic modeling operations\n- workflows\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Course-Timeline/2-CG-Fundimentals":{"title":"CG Fundimentals","content":"\n\u003cspan \n\t  class='ob-timelines' \n\t  data-date='2' \n\t  data-title='CG Fundimentals' \n\t  data-class='orange' \n\t  data-img = '' \n\t  data-type='range' \n\t  data-end=\"2\"\u003e \n\tCG Fundimentals!\n\u003c/span\u003e\n\n\n# CG Fundimentals\n\n---\n\n# What is CG?\n\nAt it's basics computer graphics is about data and manipulating that data. in 3D graphics there are different types of data that are most commonly used.\n- Polygon data\n- Volume data\n- curve data\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Course-Timeline/_Course-Timeline":{"title":"","content":"\n## Course Timeline\n\n1. Course Intro\n2. CG fundimentals\n3. Software packages\n\t4. maya\n\t5. blender\n\t6. houdini\n\t7. other\n4. basic modeling techniques\n5. advanced modeling techniques\n\n```timeline\ncourse\n```\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/DGM-2210-3D-for-2D-Pipelines":{"title":"DGM 2210 3D Modeling","content":"\n# DGM 2210 - 3D for 2D Pipelines\n\nThe aim of this course is to teach the fundamentals of CG by using Blender as the vehicle to learn. The reason for Blender is that it is increasing in popularity, it has a relatively low barrier to entry, and it tries to touch on most of the pieces of CG pipeline.\n\nStudents will learn basics of the underlying mathematic principals used in CG, which will help them solve problems later in their CG journeys. They will also learn some of the principles of 3D modeling, rigging, animation, surfacing, shading, lighting, rendering, and compositing.\n\n--\n### Start Here\n- [[notes/3D-Modeling/blender/Course Planning last year|Course Overview]]\n- [[notes/3D-Modeling/blender/assignments/3D-Assignments|Assignments]]\n\n[[notes/3D-Modeling/blender/Blender Hub]]\n\n--\n\n## Start Here\n[[notes/3D-Modeling/slides/Syllabus]]\n\n\n[[notes/3D-Modeling/Course Timeline/_Course-Timeline]]\n\n\n[[notes/3D-Modeling/Course Outline]]\n\n\n[[notes/3D-Modeling/blender/Lessons/Blender Lessons Home|Blender Lessons]]\n\n[Outline and Plans](blendercourse/coursevault/_index.md)\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Final-Project":{"title":"","content":"# Final project\n\nThe final project needs to be a prop in a shot of an animated film project.\n\n## Requirements\n1. Relatively Nice Mesh\n\t1. Nice edge flow\n\t2. Few Artifacts\n\t3. well named and organized file\n2. Surfaced\n\t1. Shaders\n\t2. Textures (If needed)\n3. Scene Setup\n\t1. Nicely Lit\n\t2. Well framed in the camera\n4. rendered shots\n\t1. At least one rendered shot\n5. Post production\n\t1. The shot should have at least some color grading.\n\n\n---\n\n# Points Breakdown\n\nTotal =\u003e 100 points\n\n| Criteria        | Points |\n| --------------- | ------ |\n| modeling        | 40     |\n| surfacing       | 30     |\n| Scene Setup     | 20     |\n| Post Production | 10     |\n\n\u003e10 extra credit points for presenting on Wednesday\n\n\n\n---\n\n# What To Turn In\n\n\u003e[!IMPORTANT] Please turn these in the format requested or you will get a zero until you fix it!\n\nPlease name your files like this =\u003e *yourname_projectname_projectfile*\n\nfor example:\n\nbenShurts_airship_blenderSceneScreenshot.png\n\nbenshurts_airship_mainScene.blend\n\netc.\n\n\n\n1. The final rendered image(s).\n\t1. I will accept PNG, JPG, or TIF\n2. An OBS recording of you showing your project and talking about what steps you went through to finish and what you learned. Also show your proposal and talk about how things changed and what you learned about doing larger projects over the course of this project. **This MUST be a link to a YouTube video or Vimeo**\n3. Screenshots:\n\t1. The 3D scene in the application you chose\n\t2. The compositor you used, if it's node based I want to see the see the nodes.\n\t3. Anything else you think would be important\n4. The **Blend** file\n\t1. If you used another app like maya, turn in an FBX, *AND* the maya file.\n\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/GDC-notes":{"title":"GDC notes","content":"\n\n**Adobe** _**Keynote**_ -[https://www.youtube.com/watch?v=d13T_y91QDs](https://www.youtube.com/watch?v=d13T_y91QDs \"https://www.youtube.com/watch?v=d13t_y91qds\") \n_**Building a Material Library**_ - [https://www.youtube.com/watch?v=HMyfBKgboB4](https://www.youtube.com/watch?v=HMyfBKgboB4 \"https://www.youtube.com/watch?v=hmyfbkgbob4\") _**Texturing Pipeline**_ - [https://www.youtube.com/watch?v=f8w88FrB6C4](https://www.youtube.com/watch?v=f8w88FrB6C4 \"https://www.youtube.com/watch?v=f8w88frb6c4\") \n_**Creating with Substance 3D Designer**_ - [https://www.youtube.com/watch?v=O-ehU0uV2P0](https://www.youtube.com/watch?v=O-ehU0uV2P0 \"https://www.youtube.com/watch?v=o-ehu0uv2p0\") \n**Houdini** _**Procedural Primer**_ - [https://www.youtube.com/watch?v=qyFe3NWYYRg](https://www.youtube.com/watch?v=qyFe3NWYYRg \"https://www.youtube.com/watch?v=qyfe3nwyyrg\") \n_**Procedural Workflows**_- [https://www.youtube.com/watch?v=Osudmpb6dpA](https://www.youtube.com/watch?v=Osudmpb6dpA \"https://www.youtube.com/watch?v=osudmpb6dpa\") _**Servicing Next-Gen Dev.**_ - [https://www.youtube.com/watch?v=l3A6QXRMmp4](https://www.youtube.com/watch?v=l3A6QXRMmp4 \"https://www.youtube.com/watch?v=l3a6qxrmmp4\") \n**AMD** _**Raytracing Performance Revealed**_ - [https://www.youtube.com/watch?v=qae_skv1GsA](https://www.youtube.com/watch?v=qae_skv1GsA \"https://www.youtube.com/watch?v=qae_skv1gsa\") \n_**Processor Software Optimization**_ - [https://www.youtube.com/watch?v=helEx02HN_I](https://www.youtube.com/watch?v=helEx02HN_I \"https://www.youtube.com/watch?v=helex02hn_i\") \n_**Hybrid Ray Traced Reflections**_ - [https://www.youtube.com/watch?v=nTZpKD600eQ](https://www.youtube.com/watch?v=nTZpKD600eQ \"https://www.youtube.com/watch?v=ntzpkd600eq\") _**Rendering Tech in Deathloop**_ - [https://www.youtube.com/watch?v=Vn4Q4XeMyBk](https://www.youtube.com/watch?v=Vn4Q4XeMyBk \"https://www.youtube.com/watch?v=vn4q4xemybk\") \n_**Breaking down the world of Athia**_ - [https://www.youtube.com/watch?v=MlTohmB4Gh4](https://www.youtube.com/watch?v=MlTohmB4Gh4 \"https://www.youtube.com/watch?v=mltohmb4gh4\") \n_**Super Resolution**_ - [https://www.youtube.com/watch?v=97JIldpUGE4](https://www.youtube.com/watch?v=97JIldpUGE4 \"https://www.youtube.com/watch?v=97jildpuge4\") \n**Microsoft** Channel -[https://www.youtube.com/c/MSFTGameDev/videos](https://www.youtube.com/c/MSFTGameDev/videos \"https://www.youtube.com/c/msftgamedev/videos\")","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Accessing-Iterations-in-a-node-loop-Houdini":{"title":"Accessing Iterations in a node loop - houdini","content":"\n\n# Accessing Iterations in a node loop\n\nTo access the iterations of a loop you have to set up a few things.\n![[notes/attachments/Pasted image 20221021115511.png]] Select the *Block Begin* of the loop nodes. The click the *Create Meta Import Node* button in the properties window. \n![[notes/attachments/Pasted image 20221021115551.png]]\nThis will create a *Meta Import Node* \n![[notes/attachments/Pasted image 20221021115627.png]]\nIf we view node info for that node we will see two imortant *Detail Attributes*: *iteration* and *numiterations* which are both *integers*.\n![[notes/attachments/Pasted image 20221021115750.png]]\nBecause these are detail attributes we can access them throughout our network with a [detail](https://www.sidefx.com/docs/houdini/expressions/detail.html) expression function.\n![[notes/attachments/Pasted image 20221021122343.png]]\n1. A *string* path pointing to the correct *metadata* node of the loop.\n2. The *string* name of the detail attribute we want to grab. In this case *iteration*\n3. The *attribute index*, in this case not applicable, but if it was a vector or something else we could use this here.\n\n\n![[notes/attachments/Pasted image 20221021122629.png]]\nNow we can see the iterations in that parameter field.","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Banking-Curves-in-Houdini":{"title":"Setting Up Banking Curves in Houdini","content":"\n# The Problem\nA common problem you may encounter is adding the correct vector data to a curve to get the *up* and *banking* directions per point.\nThere are many ways to do this, this is one way I've solved it.\n\n## Getting Started\n\nStart with some sort of curve or line. \n![[notes/attachments/Pasted image 20221021175618.png]]\n\n\nOnce you have a curve drop down a [Resample](https://www.sidefx.com/docs/houdini/nodes/sop/resample.html) node. \n\n![[notes/attachments/Pasted image 20221021180749.png]]\nIn the resample node there are two things we need to do.\n1. Treat polygons as *Subdivision Curves*\n2. Change the tangent attribute from *tangentu* to *N* (Normal)\n![[notes/attachments/Pasted image 20221021180949.png]]\nNow that that is setup. Drop down an [Attribute Wrangle](https://www.sidefx.com/docs/houdini/nodes/sop/attribwrangle) node.\n![[notes/attachments/Pasted image 20221021183239.png]]\nMake sure the wrangle is running over *points*.\n![[notes/attachments/Pasted image 20221021210701.png]]\n```vex\nvector flatnorm = @N;\nflatnorm.y = 0;\nflatnorm = normalize(flatnorm);\n\nv@right = cross({0,1,0}, flatnorm);\nv@up = cross(@N, @right);\n\nv@oldnorm = @N;\nv@N = v@right;\n```\n\n\u003eWe are saving the *oldnormal* to use it later\n\n\u003e[!NOTE] You could add this as a preset -\u003e [[node-presets]]\n\n## Linear Algebra\n\nThis is some standard linear algebra. Here's what's going on.\nWe make a new vector variable that's the same as the *normals* on the points. Then set the *Y* part of the vector to 0, then [normalize](https://www.sidefx.com/docs/houdini/vex/functions/normalize.html) our vector. Then we create two new vector attributes. this is done with `v@something` syntax. The first is a [Cross product](https://en.wikipedia.org/wiki/Cross_product) of our first variable and a simple '{0,1,0}' vector. The second is a cross product of our *normal* and the last attribute we just made.\nNow our normals look like this -\u003e\n![[notes/attachments/Pasted image 20221021190724.png]]\n![[notes/attachments/Pasted image 20221021191325.png]]\nNow that our points have the correct data we can start to use that data.\nDrop down a [Convert Line](https://www.sidefx.com/docs/houdini/nodes/sop/convertline.html) SOP node.\n![[notes/attachments/Pasted image 20221021193055.png]]\n\nConvert line will split the line into separate primitives.\nBefore the *convert line* node\n\n![[notes/attachments/Pasted image 20221021193307.png]]\n\nAfter the *convert line* node\n\n![[notes/attachments/Pasted image 20221021193339.png]]\n\n*Convert line* creates a *restlength* attribute.\n\n![[notes/attachments/Pasted image 20221021193442.png]]\n\nThis will be very helpful later.\n\nIn the wrangle let's add the following line at the end\"\n`v@N = v@right;`\n\n![[notes/attachments/Pasted image 20221021193857.png]]\n\nThen drop down a [Peak](https://www.sidefx.com/docs/houdini/nodes/sop/peak.html) node. \n\n![[notes/attachments/Pasted image 20221021193947.png]]\n\nScale the distance value a bit.\n \n ![[notes/attachments/Pasted image 20221021194246.png]]\n\nIt should like this in the viewport:\n\n ![[notes/attachments/Pasted image 20221021194459.png]]\n![[notes/attachments/Pasted image 20221021194734.png]]\n\nNext drop down another *Attribute wrangle* node.\n\n![[notes/attachments/Pasted image 20221021194932.png]]\n\nand attach both the original and the peaked stream.\nHere we will be comparing the length of the two primitives.\n\n\n\u003e[!IMPORTANT] Make sure this wrangle is running over *primitives* ![[notes/attachments/Pasted image 20221021200321.png]]\n\n\n```vex\nfloat otherlength = prim(1, \"restlength\", @primnum);\nf@bankratio = f@restlength/otherlength;\n```\n\n![[notes/attachments/Pasted image 20221021195336.png]]\n\nThe first line we are using the [prim](https://www.sidefx.com/docs/houdini/vex/attrib_suite#prim) function. \n\n![[notes/attachments/Pasted image 20221021195526.png]]\n\nThe 1 indicates we are using the *second* input of the wrangle.\n\n![[notes/attachments/Pasted image 20221021195601.png]]\n\n![[notes/attachments/Pasted image 20221021195709.png]]\n\n*restlength* is the attribute we are looking for. The one created from the *convert line* node.\n\n![[notes/attachments/Pasted image 20221021195759.png]]\n\n`@primnum` means we want to do this for each *primitive*.\n\n![[notes/attachments/Pasted image 20221021195854.png]]\n\nNext we need to drop down an [Attribute Promote](https://www.sidefx.com/docs/houdini/nodes/sop/attribpromote.html) SOP. \n\n![[notes/attachments/Pasted image 20221021200801.png]]\n\nAnd then make sure the we are promoting *bankratio* from *primitive* to *point*.\n\n\u003e[!NOTE]- creating a subnet\n\u003eIf you wish you can put everything into a [Subnet](https://www.sidefx.com/docs/houdini/nodes/obj/subnet.html) by selecting all the nodes you want to use and pressing *shift+c*\n\u003e![[notes/attachments/Pasted image 20221021201038.png]]\n\u003eThis will make it easier manage and create a [digital asset](https://www.sidefx.com/docs/houdini/assets/intro.html) with it\n\u003eI've created a *subnet* for the *bank ratio* stuff:\n![[notes/attachments/Pasted image 20221021201433.png]]\n\nNext drop down an [Attribute Transfer](https://www.sidefx.com/docs/houdini/nodes/sop/attribtransfer.html) SOP.\n\n![[notes/attachments/Pasted image 20221021201615.png]]\n\nWe want to transfer the *bankratio* attribute to the other curve.\n\n![[notes/attachments/Pasted image 20221021201717.png]]\n\n\u003e[!NOTE] Visualizers are an important part of a Houdini workflow. see [[houdini visualizers]] and [Visualizers documentation](https://www.sidefx.com/docs/houdini/basics/visualizers.html)\n\nLet's drop down a [Visualizer](https://www.sidefx.com/docs/houdini/basics/visualizers.html) node.\n\n![[notes/attachments/Pasted image 20221021202042.png]]\n\n![[notes/attachments/Pasted image 20221021202129.png]]\n\nThis will let us see the values of our *attribute* in the viewport.\n\n![[notes/attachments/Pasted image 20221021202411.png]]\n\nNext we need to remap these values into a usable range. *-1-1* that way math will work better down the line.\n\n\u003e[!NOTE] -1-1 and 0-1 range is also very common programming, gamedev, and CG because it gives you a good starting point for other mathematics.\n\n\u003e[!NOTE] Remapping Values\n\u003e\n\u003ethere are many ways to remap values in houdini.\n\u003esee [[remapping values in houdini]]\n\nLet's drop down an *attribute promote* SOP.\n\n![[notes/attachments/Pasted image 20221021202920.png]]\n\n![[notes/attachments/Pasted image 20221021203133.png]]\n\nWe'll take the *bankratio* attribute and promote it to a *detail* attribute. Then set the *promotion method* to *maximum*. This will get the highest value. Then create a new attribute called *maxratio* and make sure we don't delete the old one.\nThen copy that node and change it so we get the *minimum*.\n\n![[notes/attachments/Pasted image 20221021203612.png]]\n\n![[notes/attachments/Pasted image 20221021203631.png]]\n\nNow in our [Geometry Spreadsheet pane](https://www.sidefx.com/docs/houdini/ref/panes/geosheet.html) we can see our *detail* attributes.\n\n![[notes/attachments/Pasted image 20221021203751.png]]\n\nNext drop down an [Attribute Remap](https://www.sidefx.com/docs/houdini/nodes/sop/attribremap.html) node.\n\n![[notes/attachments/Pasted image 20221021203402.png]]\n\nNow we want to remap the max and min we just created.\n\n![[notes/attachments/Pasted image 20221021205905.png]]\n\nWe will remap *bankratio* to -1-1 and then use the *detail* function to get the detail attributes we made for min and max.\n\n![[notes/attachments/Pasted image 20221021205958.png]]\n\n![[notes/attachments/Pasted image 20221021210939.png]]\n\nNow the *bankratio* is in usable values\n\n![[notes/attachments/Pasted image 20221021210058.png]]\n\nNext we will drop down a wrangle to do the rotation.\n\n![[notes/attachments/Pasted image 20221021211502.png]]\n\n![[notes/attachments/Pasted image 20221021213202.png]]\n\n```vex\n@N = v@oldnorm;\nmatrix rot = ident(); //this creates a rest rotation. or no rotation\nrotate(rot, f@bankratio * chf('BankAmount'), @N);\n/*rotate the rot matrix by the bankratio using the normal as the axis */\nv@right *= rot; //multiplying the vector by the rotation matrix we made\nv@up *= rot;\n\n```\n\nWe are basically rotating our vectors using the rotation matrix we created with the [rotate](https://www.sidefx.com/docs/houdini/vex/functions/rotate.html) vex function.\n\n![[notes/attachments/Pasted image 20221021211528.png]]\n\n\u003e[!NOTE] bankratio\n\u003e\n\u003eYou may need to set `f@bankratio` to negative\n\u003eif it banks the wrong way\n\u003e\n\u003e![[notes/attachments/Pasted image 20221021213450.png]]\n\u003e\n\nThen drop down a [Sweep](https://www.sidefx.com/docs/houdini/nodes/sop/sweep.html) node.\n\n![[notes/attachments/Pasted image 20221021213623.png]]\n\nset it to *ribbon* to see the banking.\n\n![[notes/attachments/Pasted image 20221021213658.png]]\n\n![[notes/attachments/Pasted image 20221021213715.png]]\n\n\n![[notes/attachments/Pasted image 20221021193857.png]]\n\nThen drop down a [Peak](https://www.sidefx.com/docs/houdini/nodes/sop/peak.html) node. \n\n![[notes/attachments/Pasted image 20221021193947.png]]\n\nScale the distance value a bit.\n\n ![[notes/attachments/Pasted image 20221021194246.png]]\n\nIt should like this in the viewport:\n\n ![[notes/attachments/Pasted image 20221021194459.png]]\n \n![[notes/attachments/Pasted image 20221021194734.png]]\n\nNext drop down another *Attribute wrangle* node.\n\n![[notes/attachments/Pasted image 20221021194932.png]]\n\nand attach both the original and the peaked stream.\nHere we will be comparing the length of the two primitives.\n\n\u003e[!IMPORTANT] Make sure this wrangle is running over *primitives* ![[notes/attachments/Pasted image 20221021200321.png]]\n\n\n```vex\nfloat otherlength = prim(1, \"restlength\", @primnum);\nf@bankratio = f@restlength/otherlength;\n```\n\n![[notes/attachments/Pasted image 20221021195336.png]]\n\nThe first line we are using the [prim](https://www.sidefx.com/docs/houdini/vex/attrib_suite#prim) function. \n\n![[notes/attachments/Pasted image 20221021195526.png]]\n\nThe 1 indicates we are using the *second* input of the wrangle.\n\n![[notes/attachments/Pasted image 20221021195601.png]]\n\n![[notes/attachments/Pasted image 20221021195709.png]]\n\n*restlength* is the attribute we are looking for. The one created from the *convert line* node.\n\n![[notes/attachments/Pasted image 20221021195759.png]]\n\n`@primnum` means we want to do this for each *primitive*.\n\n![[notes/attachments/Pasted image 20221021195854.png]]\n\nNext we need to drop down an [Attribute Promote](https://www.sidefx.com/docs/houdini/nodes/sop/attribpromote.html) SOP. \n\n![[notes/attachments/Pasted image 20221021200801.png]]\n\nAnd then make sure the we are promoting *bankratio* from *primitive* to *point*.\n\n\u003e[!NOTE]- creating a subnet\n\u003eIf you wish you can put everything into a [Subnet](https://www.sidefx.com/docs/houdini/nodes/obj/subnet.html) by selecting all the nodes you want to use and pressing *shift+c*\n\u003e![[notes/attachments/Pasted image 20221021201038.png]]\n\u003eThis will make it easier manage and create a [digital asset](https://www.sidefx.com/docs/houdini/assets/intro.html) with it\n\u003eI've created a *subnet* for the *bank ratio* stuff:\n![[notes/attachments/Pasted image 20221021201433.png]]\n\nNext drop down an [Attribute Transfer](https://www.sidefx.com/docs/houdini/nodes/sop/attribtransfer.html) SOP.\n\n![[notes/attachments/Pasted image 20221021201615.png]]\n\nWe want to transfer the *bankratio* attribute to the other curve.\n\n![[notes/attachments/Pasted image 20221021201717.png]]\n\n\u003e[!NOTE] Visualizers are an important part of a Houdini workflow. see [[houdini visualizers]] and [Visualizers documentation](https://www.sidefx.com/docs/houdini/basics/visualizers.html)\n\nLet's drop down a [Visualizer](https://www.sidefx.com/docs/houdini/basics/visualizers.html) node.\n\n![[notes/attachments/Pasted image 20221021202042.png]]\n\n![[notes/attachments/Pasted image 20221021202129.png]]\n\nThis will let us see the values of our *attribute* in the viewport.\n\n![[notes/attachments/Pasted image 20221021202411.png]]\n\nNext we need to remap these values into a usable range. *-1-1* that way math will work better down the line.\n\n\u003e[!NOTE] -1-1 and 0-1 range is also very common programming, gamedev, and CG because it gives you a good starting point for other mathematics.\n\n\u003e[!NOTE] Remapping Values\n\u003e\n\u003ethere are many ways to remap values in houdini.\n\u003esee [[remapping values in houdini]]\n\nLet's drop down an *attribute promote* SOP.\n\n![[notes/attachments/Pasted image 20221021202920.png]]\n![[notes/attachments/Pasted image 20221021203133.png]]\n\nWe'll take the *bankratio* attribute and promote it to a *detail* attribute. Then set the *promotion method* to *maximum*. This will get the highest value. Then create a new attribute called *maxratio* and make sure we don't delete the old one.\nThen copy that node and change it so we get the *minimum*.\n\n![[notes/attachments/Pasted image 20221021203612.png]]\n![[notes/attachments/Pasted image 20221021203631.png]]\n\nNow in our [Geometry Spreadsheet pane](https://www.sidefx.com/docs/houdini/ref/panes/geosheet.html) we can see our *detail* attributes.\n\n![[notes/attachments/Pasted image 20221021203751.png]]\n\n\nNext drop down an [Attribute Remap](https://www.sidefx.com/docs/houdini/nodes/sop/attribremap.html) node.\n\n![[notes/attachments/Pasted image 20221021203402.png]]\n\nNow we want to remap the max and min we just created.\n\n![[notes/attachments/Pasted image 20221021205905.png]]\n\nWe will remap *bankratio* to -1-1 and then use the *detail* function to get the detail attributes we made for min and max.\n\n![[notes/attachments/Pasted image 20221021205958.png]]\n\n![[notes/attachments/Pasted image 20221021210939.png]]\n\nNow the *bankratio* is in usable values\n\n\n\n![[notes/attachments/Pasted image 20221021210058.png]]\n\nNext we will drop down a wrangle to do the rotation.\n\n![[notes/attachments/Pasted image 20221021211502.png]]\n\n![[notes/attachments/Pasted image 20221021213202.png]]\n\n```vex\n@N = v@oldnorm;\nmatrix rot = ident(); //this creates a rest rotation. or no rotation\nrotate(rot, f@bankratio * chf('BankAmount'), @N);\n/*rotate the rot matrix by the bankratio using the normal as the axis */\nv@right *= rot; //multiplying the vector by the rotation matrix we made\nv@up *= rot;\n\n```\n\nWe are basically rotating our vectors using the rotation matrix we created with the [rotate](https://www.sidefx.com/docs/houdini/vex/functions/rotate.html) vex function.\n\n![[notes/attachments/Pasted image 20221021211528.png]]\n\n\u003e[!NOTE] You may need to `f@bankratio` to negative\n\u003e\n\u003e![[notes/attachments/Pasted image 20221021213450.png]]\n\u003eif it banks the wrong way\n\nThen drop down a [Sweep](https://www.sidefx.com/docs/houdini/nodes/sop/sweep.html) node.\n\n![[notes/attachments/Pasted image 20221021213623.png]]\n\nset it to *ribbon* to see the banking.\n\n![[notes/attachments/Pasted image 20221021213658.png]]\n\n## Result\n\n![[notes/attachments/Pasted image 20221021213715.png]]\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Follow-Curve-Copy-to-Points":{"title":"Follow Curve - Copy To Points","content":"\n# Problem:\nWhen using a curve to copy objects to you probably want the objects oriented along the curve. By default this behavior doesn't happen, so you have to set it up.\n\n\n# Solution(s)\n\nDrop down an [Orientation along Curve](https://www.sidefx.com/docs/houdini/nodes/sop/orientalongcurve.html) node. \n\n![[notes/attachments/Pasted image 20221115092214.png]]\n\n\u003e[!IMPORTANT] This should be before your *CopyToPoints* node\n\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Fundimentals/Houdini-UI":{"title":"houdini UI","content":"\nIf you are using a high-dpi display you may need to increase your scale.\n\n# Anatomy of the 3D viewport\n![[notes/attachments/Pasted image 20221020153754.png]]\nIn Houdini windows contain a few components.\n1. Tabs. Windows can be stacked using a tab system\n2. In the 3D viewport you can split the window.\n3. Forward and back, breadcrumb style navigation like a browser.\n4. 3D viewport ","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Houdini-Bash":{"title":"Houdini Bash","content":"\nhttps://www.youtube.com/watch?v=rY413t5fArw\n\n```bash\n# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~/.bashrc ]; then\n    . ~/.bashrc\nfi\n\n# User specific environment and startup programs\n\n# Source Houdini\ncd /opt/hfs19.0 \u0026\u0026 source houdini_setup_bash \u0026\u0026 cd\n\nexport PXR_PLUGINPATH_NAME=\"/usr/redshift/redshift4solaris/$HOUDINI_VERSION\"\n#export PXR_PLUGINPATH_NAME=\"/usr/redshift/redshift4solaris/19.0.455\"\n#export LD_PRELOAD=\"/lib/x86_64-linux-gnu/libc_malloc_debug.so.0\"\nexport HOU_ROOT=\"/cg/Houdini Projects\"\nexport TEXTURE=\"/cg/Textures\"\nexport HDA=\"/home/jonathan/Git Repos/Digital-Asset-Library\"\nPATH=\"/usr/redshift/bin:$PATH\"\nexport HOUDINI_PATH=\"/usr/redshift/redshift4houdini/$HOUDINI_VERSION;\u0026\"\nexport OCIO=\"/home/jonathan/ACES/aces_1.2/config.ocio\"\n```","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Houdini-Hub":{"title":"Houdini Hub","content":"\nHoudini is a procedural 3D Development Enviornment.\n\n[[notes/3D-Modeling/Houdini/Houdini Scratchpad|Unorganized Houdini Notes]]\n\n[[notes/3D-Modeling/Houdini/Houdini Scratchpad]]\n\n\n---\n# Vex\n\n[[notes/3D-Modeling/Houdini/houdini-vex/Houdini Vex Hub]]\n\n\n[[notes/3D-Modeling/Houdini/Setting Up Houdini for the Commandline]]\n\n\n---\n\n[[notes/3D-Modeling/Houdini/Houdini Bash]]\n\n---\n\n[[notes/3D-Modeling/Houdini/Houdini Resources]]\n\n\n[[notes/Unix/Linux/Fixing Redshift Linux]]\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Houdini-Resources":{"title":"Houdini Resources","content":"\n\n# Houdini Resources\n---\n## Paid Learning\n\n[www.hipflask.how](https://www.hipflask.how/ \"https://www.hipflask.how/\") \n[www.houdini.school](https://www.houdini.school/ \"https://www.houdini.school/\") \n[www.rebelway.net](https://www.rebelway.net/ \"https://www.rebelway.net/\") \n[cgspectrum](https://www.cgspectrum.com/courses/advanced-houdini-fx-course)\n[more vex tips](https://stephanosterburg.gitbook.io/scrapbook/untitled/popular-built-in-vex-attributes-global-variables)\n\n\n\n---\n## Websites\n[cgwiki](https://www.tokeru.com/cgwiki/?title=Houdini)\n[John Kunz - vex cheat sheet](https://mrkunz.com/blog/08_22_2018_VEX_Wrangle_Cheat_Sheet.html)\n[katexagoraris - vex cheat sheet](https://www.katexagoraris.com/vex-help-sheet)\n[vex tips](https://www.houdinikitchen.net/category/posts/cheat-sheets/)\n[more vex tips](https://stephanosterburg.gitbook.io/scrapbook/untitled/popular-built-in-vex-attributes-global-variables)\n[houdini stuff](http://wordpress.discretization.de/houdini/home/introduction/basics-about-the-houdini-nodes-and-help/)\n[folders from tops](https://projectjulien.space/houdini-tutorials/2019/3/28/houdini-tops)\n\n\n---\n## Resources\n[Houdini scripts](https://github.com/JoseZalez/Houdini-scripts/blob/master/CheatSheet.md)\n[MOPs website](https://www.motionoperators.com/)\n- MOPS+ is a paid extended version of MOPS\n[MOPs github](https://github.com/toadstorm/MOPS)\n[qlib](https://github.com/qLab/qLib)\n[Sidefx Labs](https://github.com/sideeffects/SideFXLabs)\n[egRedshiftTools](https://github.com/eglaubauf/egRedshiftTools)\n[siLib](https://github.com/fxnut/siLib)\n[egMatLib](https://github.com/eglaubauf/egMatLib)\n[Houdini Pipeline](https://github.com/kiryha/Houdini)\n[houdini bookmarks](https://github.com/Houdini-Packages/houdini_bookmarks)\n[Houdini TDK](https://github.com/Houdini-Packages/Houdini_TDK)\n[Aelib](https://github.com/Houdini-Packages/Aelib)\n[HMT-houdini music toolkit](https://github.com/Houdini-Packages/HMT)\n[houdini pbrt v3](https://github.com/Houdini-Packages/houdini-pbrt-v3)\n\n\n\n---\n## Patreon\n[parker coleman](https://www.patreon.com/TipTopVisuals/posts)\n[Tim van helsdingen](https://www.patreon.com/timvanhelsdingen/posts)\n[Entagma](https://www.patreon.com/entagma)\n\n\n---\n## Youtube channels\n\n[Carvalho](https://www.youtube.com/channel/UC9A6czhlBQgS89cAytPs6XA)\n[RightBrainedTutorials](https://www.youtube.com/c/RightBrainedTutorials \"https://www.youtube.com/c/RightBrainedTutorials\") \n[bubblepins](https://www.youtube.com/c/bubblepins \"https://www.youtube.com/c/bubblepins\") \n[IndiePixel3D](https://www.youtube.com/c/IndiePixel3D \"https://www.youtube.com/c/IndiePixel3D\") \n[AriseWorks](https://www.youtube.com/c/AriseWorks \"https://www.youtube.com/c/AriseWorks\") \n[nothingifnotcritical](https://www.youtube.com/user/nothingifnotcritical \"https://www.youtube.com/user/nothingifnotcritical\") \n[NineBetween](https://www.youtube.com/c/NineBetween \"https://www.youtube.com/c/NineBetween\") \n[Simon Houdini](https://www.youtube.com/channel/UCvuT2bzBB0kzne16DBAtmLQ/videos \"https://www.youtube.com/channel/UCvuT2bzBB0kzne16DBAtmLQ/videos\") \n[Rebelway](https://www.youtube.com/c/Rebelway \"https://www.youtube.com/c/Rebelway\") \n[DoxiaStudio](https://www.youtube.com/c/DoxiaStudio \"https://www.youtube.com/c/DoxiaStudio\") \n[Socratica FX](https://www.youtube.com/channel/UC_1kJpqN5_muvmiaIsFxS_Q \"https://www.youtube.com/channel/UC_1kJpqN5_muvmiaIsFxS_Q\") \n[Nick Medukha](https://www.youtube.com/channel/UCnn58iVRyGLSQriCm0QOmaw \"https://www.youtube.com/channel/UCnn58iVRyGLSQriCm0QOmaw\") \n[CGINerd](https://www.youtube.com/c/CGINerd \"https://www.youtube.com/c/CGINerd\") \n[ActionVFXofficial](https://www.youtube.com/c/ActionVFXofficial \"https://www.youtube.com/c/ActionVFXofficial\") \n[CarvalhoVFX](https://www.youtube.com/c/CarvalhoVFX \"https://www.youtube.com/c/CarvalhoVFX\")\n[JunichiroHorikawa](https://www.youtube.com/c/JunichiroHorikawa \"https://www.youtube.com/c/JunichiroHorikawa\") \n[MIXTraining](https://www.youtube.com/c/MIXTraining \"https://www.youtube.com/c/MIXTraining\") \n[vik546](https://www.youtube.com/user/vik546 \"https://www.youtube.com/user/vik546\") \n[vfxpipeline](https://www.youtube.com/c/vfxpipeline \"https://www.youtube.com/c/vfxpipeline\")\n[MarkFancherFX](https://www.youtube.com/c/MarkFancherFX \"https://www.youtube.com/c/MarkFancherFX\") \n[CGINerd](https://www.youtube.com/c/CGINerd \"https://www.youtube.com/c/CGINerd\") \n[ActionVFXofficial](https://www.youtube.com/c/ActionVFXofficial \"https://www.youtube.com/c/ActionVFXofficial\")\n[blackbox](https://www.youtube.com/channel/UCHrUmqiryP2GIhw_ixUsO0g)\n\n\n---\n\n# vex stuff\n\nif you prefix anything i@group_ it will create a group\nit's shorthand\n\nthe other way is\nsetprimgroup()\n\n\n---\n\n## Other\n\nhttps://jakerice.design/2019/02/07/branchomatic/ nodes\n\nhttps://www.tokeru.com/cgwiki/index.php?title=Points_and_Verts_and_Prims\n\nhttps://richardcthomas.com/polywireuv directional splines\n\n\nhttps://drive.google.com/drive/folders/1rOYNL-0TZE1jq8cpn--kh9umiVLWB1Ws tools\n\n---\n\n# Houdini Enviornment\n\nhttps://learncreategame.com/techart/houdini-environment-setup/\n\n\nhttps://www.youtube.com/watch?v=Fj17qnVOUvg\n\nhttps://www.sidefx.com/docs/houdini/ref/env.html\n\nhttps://www.sidefx.com/docs/houdini/ref/plugins.html\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Houdini-Scratchpad":{"title":"Houdini Scratchpad","content":"\n# Fundimentals\n[[notes/3D-Modeling/Houdini/Fundimentals/Houdini UI]]\n\n\n\n---\n\n\n\n[[notes/3D-Modeling/Houdini/Accessing Iterations in a node loop - Houdini]]\n\n\n---\n[[notes/3D-Modeling/Houdini/Banking Curves in Houdini]]\n\n\n\n---\n# VFX setups\n\n[[notes/3D-Modeling/Houdini/VFX Setups/Squibs/Houdini Squib Setup]]\n\n# Vex\n[[notes/3D-Modeling/Houdini/Vex]]\n\n\n---\n# Small Setups\n\n[[notes/3D-Modeling/Houdini/Follow Curve Copy to Points]]\n\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Redshift3d-Linux":{"title":"Redshift on linux","content":"\n# Redshift 3d\n\nsetting up on linux some libraries are missing\nlibpng15.so.15\nhttps://sourceforge.net/projects/libpng/files/libpng15/older-releases/1.5.15/\n\nthen you have to extract it and build it\n ./configure -\u003e make -\u003e make install\n \n ```bash\n now go to TERMINAL and type  \n  \n\ncd Downloads/libpng-1.5.15  \n  \n./configure --prefix=usr/local/libpng  \nmake check  \nsudo make install  \nmake check\n\n  \nCongratulations you just installed the libpng  \n  \nNow we need to create a shortcut and put it in /usr/lib for any program that is depended on it to work  \n  \nIn TERMINAL type:  \n\ncd (only if you are not using a new terminal)  \nsudo updatedb (this could take a few seconds)  \nlocate libpng (locate the \".../libpng15.so.15\" line and COPY)  \n  \nnow we will create a NEW LINK (shortcut) of that file to \"/usr/lib/\"  \n  \nsudo ln -s /usr/local/libpng/lib/libpng15.so.15 /usr/lib/libpng15.so.15\n\n  \n  \nyou can now successfully execute applications that require libpng15.so.15\n```\n\nafter installing redshift tool still wont find it so you need to symlink the library to where redshift is looking\n\n\nchange the prefix to usr/lib directory\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Setting-Up-Houdini-for-the-Commandline":{"title":"Setting up houdini for the command line","content":"\n\n\n![[notes/attachments/Pasted image 20220303193021.png]]\n\n1. set up project paths\n2. cd into houdini install dir\n3. source terminal command\n4. pull in vars from setup\n5. save to env file\n6. set up aliases\n7. launch new shell with vars from env file\n---\nhttps://towardsdatascience.com/best-practices-for-setting-up-a-python-environment-d4af439846a\n\nhttps://www.endpointdev.com/blog/2013/02/installing-python-in-local-directory/\n\nhttps://joaoventura.net/blog/2016/embeddable-python-osx/\n\nhttps://xon.sh/\n\nSounds like your houdini.env is not properly configured. Make sure your HOUDINI_OTLSCAN_PATH always ends with @/otls, and isn't redefined later by some other line. README.MD has detailed instructions on how to configure your environment.\n\nLet me try to lay out some of the rules:  \n- Houdini only expands environment variables in the hscript syntax. ie. $HOME, **not** the DOS syntax like %HOME%.  \n- The path separators should be semi-colon (![](https://www.sidefx.com/static/djangobb_forum/img/smilies/wink.png) instead of colon (![](https://www.sidefx.com/static/djangobb_forum/img/smilies/smile.png). This works on all platforms. Linux/OSX happen to also accept colon (![](https://www.sidefx.com/static/djangobb_forum/img/smilies/smile.png) as well.  \n- When you override a variable, you should have “\u0026” in there somewhere so that the default path is still used. Depending on your shell, this is sometimes a special character, in which case you need to ensure that you set it with the correct escaping.  \n- On Windows especially, make sure you launch Houdini from the shell you set the environment variable. You cannot set it into a shell and then expect the Start Menu \u003e Houdini to see it.  \n- You must set your environment variable *BEFORE* Houdini is loaded.  \n- If you're using houdini.env (as an alternative), then you must use double quotes if your variable value contains spaces.","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/VFX-Setups/Squibs/Houdini-Squib-Setup":{"title":"Houdini Squib Setup","content":"\n# Simple Squib Setup in Houdini\n\nSquibs are used in VFX for small explosions like gun shots and things. In practical effects squibs are small explosives that are rigged to blow at the right time. In VFX we often have to recreate these.\n\n\n---\n## Geo setup\n![[notes/attachments/Pasted image 20221018183521.png]]\n1. Initial Geo -\u003e In this case we are using a sphere and clip node to only get the top part of the sphere. This is because squibs typically explode from the ground.\n\t- ![[notes/attachments/Pasted image 20221018183701.png]] -\u003e We have turned the scale of the sphere down so that it makes sense in the real world.\n\t- ![[notes/attachments/Pasted image 20221018183829.png]] -\u003e The [Clip](https://www.sidefx.com/docs/houdini/nodes/sop/clip)node is used to cut the sphere and lower it to the ground plane.\n2. In this section we are setting up some variation for the particle spawning down stream in the network.\n\t\t- ![[notes/attachments/Pasted image 20221018184431.png]] -\u003e the [Attribute VOP](https://www.sidefx.com/docs/houdini/nodes/sop/attribvop.html) node creates noise for the downstream operation.\n\t\t- ![[notes/attachments/Pasted image 20221018184838.png]] -\u003e This is a simple VOP setup. We are taking point position ([Geometry attributes](https://www.sidefx.com/docs/houdini/model/attributes.html)) and feeding it into a noise node (Which all of the parameters are promoted to the top of the VOP net). After that we feed into an [Absolute](https://www.sidefx.com/docs/houdini/nodes/vop/abs.html) node, which takes any negative value and makes it positive. After that we feed that into Color output which in Houdini is *Cd*.\n\t\t\t- In order to quickly promote all parameters in a VOP node right-click the node then do the following -\u003e ![[notes/attachments/houdini-promote-all-parms-vops.png]]\n3. In this section we set up the Vectors we need for the Pop solver.\n\t- ![[notes/attachments/Pasted image 20221018212030.png]] -\u003e In the [Attribute Wrangle](https://www.sidefx.com/docs/houdini/nodes/sop/attribwrangle.html) make sure it's set to run over *points* and in the code window make sure you type the following\n\t\t```vex\n\t\t@v=@N;\n\t\t@v *= ch('scale');\n\t\t```\n \n\t- We will tune the scatter values later\n\t- In the [Attribute Delete](https://www.sidefx.com/docs/houdini/nodes/sop/attribdelete.html) node made sure in the points section you have *Cd* for color written. ![[notes/attachments/Pasted image 20221018212934.png]]\n4. Make sure you feed the stream into some sort of DOP network. This could be a plain DOP net or a configured POP network. The next section goes over the Pop solver setup.\n\n## Pop solver setup\n\nThe POP network is technically in a [DOP Network](https://www.sidefx.com/docs/houdini/nodes/sop/dopnet.html) node. This type of node can contain any type of simulation system. For the squib, we will build a POP system in the DOPnet. \n\n\u003e[!NOTE] A POP system is a simple particle simulation setup.\n\n\n![[notes/attachments/Pasted image 20221018183244.png]]\n1. Pop Source\n2. Pop Object\n3. Pop Solver\n4. Ground Plane\n5. Gravity\n\n The simulation contexts of Houdini can get very complex and the following are just some settings I used and some explanations why.\n\n\u003e[!IMPORTANT] There a million and one ways to do things, *Especially* in Houdini! Just use this guide as a starting point!\n\nAdd variance to the Pop source -\u003e \n\n![[notes/attachments/Pasted image 20221020122628.png]]\n\nIn the *attributes* tab set the *Initial Velocity* to *Add to inherited Velocity*. Then you can change the *Variance* vector\n\nThe *pscale* attribute needs some tweaking. In order to create a more realistic simulation each particle needs a different scale, just like in real life dirt particles are different sizes and masses.  There are two simple ways to accomplish this.\n![[notes/attachments/Pasted image 20221020125517.png]] \n\n-\u003e Two wrangles, one before and one after the DOP network.\nIn the first one do the following.\n\n![[notes/attachments/Pasted image 20221020125635.png]]\n\nThis way we can use a *ramp* to have more control over the *pscale* change.\n\nIn the second wrangle we can increase the pscale if we need to after the simulation.\n\n![[notes/attachments/Pasted image 20221020125740.png]]\n\nThe second way to do this is with an [Attribute Adjust Float](https://www.sidefx.com/docs/houdini/nodes/sop/attribadjustfloat.html)\nnode. This can accomplish the same thing as the first wrangle.\n\n![[notes/attachments/Pasted image 20221020130052.png]]\n\nIn the *Attribute Adjust Float* node made sure the attribute is *pscale*, and attribute type is *Float*. Then change *Pattern Type* to *Random*. Then set the *Value Distribution* to *Uniform with Remapping*. Once you do this you will have a ramp just like the one we set up in the wrange which will do the same thing.\n\n\u003e[!NOTE]- Expanding the ramp\n\u003e\n\u003e If you click this button -\u003e ![[notes/attachments/Pasted image 20221020130402.png]] the ramp will expand and look like this -\u003e ![[notes/attachments/Pasted image 20221020130440.png]]\n\n\u003e[!NOTE]- Expanding the ramp parameters\n\u003e\n\u003e If you don't see the options for point on the ramp click the little white triangle -\u003e ![[notes/attachments/Pasted image 20221020130739.png]] \n\u003e It will then expand like this -\u003e ![[notes/attachments/Pasted image 20221020130755.png]]\n\n\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Vellum":{"title":"Vellum Houdini","content":"\nVellum is a unified solver for softbody dynamics (hair, wire, cloth)\n\nVellum is similar to Houdini \"grains\" -PBD (Position based dynamics) - Vellum is a continuation of grains.\n\n\u003eConstraints are similar to *Bullet* constraints and *Internal* constraints.\n\u003e\n\u003eStretching, damping, bendability, etc\n\n\u003eVellum is a successor to *POPs* in many ways\n\n\n\u003e[!IMPORTANT] It's always recommended to use *Vellum* with a triangulated mesh.\n\n---\n\n# Simple Vellum Setup\n\n\u003e[!NOTE] Before a mesh can\n\nVellum has many different *constraint* types. These all use slightly different mathematics across the graph structure.\n\n![[notes/attachments/Pasted image 20221209170241.png]]\n\n```mermaid\ngraph TD\n\tMesh --\u003e VellumConstraints\n\tVellumConstraints --\u003e VellumSolver\n```\n\n\u003e[!NOTE] Vellum sims *often* require many substeps. around 5\n\u003e\n\u003eAdding substeps will add multiple calculations per frame which can stiffen the simulation because it's going to calculate the stiffness more times.\n\u003e\n\u003eTo account for this you may need to play around with reducing stiffness\n\n\u003e[!IMPORTANT] If vellum is behaving strangely, one of the first things you should do is visualize the *thickness* of the simulation\n\u003e\n\u003e![[notes/attachments/Pasted image 20230113145220.png]]\n\u003e\n\u003eThe green spheres represent the thickness that the vellum solver is using to calculate things.\n\n\n\n\n\n\n![[notes/attachments/Pasted image 20221214091838.png]]\n\n\u003e[!IMPORTANT] Cloth Thickness\n\u003e\n\u003eYou don't want your cloth to be too thick *or* too thin. It will create strange velocities and artifacts.\n\u003e\n\u003eToo thick -\u003e If the spheres start to overlap then it will push the verts away from eachother. Might also add strange velocity.\n\u003e\n\u003eToo thin -\u003e strange behavior, gravity or collisions may break.\n\nSettings you will use *all* the time in vellum are:\n1. *Stretch* Stiffness\n2. *Bend* Stiffness\n\n![[notes/attachments/Pasted image 20230113145806.png]]\n\nStretch Stiffness =\u003e How hard it is to stretch the constraints apart. Low -\u003e High\n\n## Pinning Vellum\n\nIn the *vellum constraints node* there is a *Pin to Animation* section. If you click the cursor you can use the viewport to select the points you want to pin.\n\n![[notes/attachments/Pasted image 20230113151008.png]]\n\n\n\n\u003e[!NOTE] Finding the right values\n\u003e\n\u003eFor simulations it can be difficult to find the right values like *Bend Stiffness* for example. The recommended workflow is change by factors of 10 until you are in the right ballpark, then use the smaller increments with the slider.\n\u003e\n\u003e![[notes/attachments/Pasted image 20230113151919.png]]\n\n### Bend Stiffness\n\nThis is somewhat self-explanatory. However you can think of it as different materials. For example a cloth with high bend-stiffness might be rubber, it's hard to fold, even thin pieces. A cloth with low bend-stiffness could be silk.\n\nA nice way to see the effects of *bend-stiffness* the following setup:\n\n![[notes/attachments/Pasted image 20230113155546.png]]\n\nThen we can add some forces. There are two ways to do this.\n\n1. Inside the vellum-solver\n2. before the vellum-solver\n\n\n![[notes/attachments/Pasted image 20230113155625.png]]\n\n\u003e[!IMPORTANT] Preparing Meshes\n\u003e\n\u003eWhen doing simulations it's good practice to prepare the mesh. For example if you want to sim the *rubber toy* in houdini you probably want to fuse all the pieces together with a boolean, or vdb, and then remesh it.\n\u003e\n\u003e![[notes/attachments/Pasted image 20230113161503.png]]\n\u003e\n\u003eAnother thing to keep in mind: You may not want your final geo to be the remeshed geo. Often so you can have your UVs back or something like that.\n\u003e\n\u003eOne solution to that is *Point deforming* the original mesh with the simulated mesh.\n\u003e\n\u003e![[notes/attachments/Pasted image 20230113161846.png]]\n\n\n\n## 3 Different Soft-body types\n- Balloon -\u003e Always tried to hold the same amount of volume inside (preserves volume globaly)\n\t- ![[notes/attachments/baloon1.gif]]\n- Struts -\u003e Creates internal constraint geo to act as structural supports. Makes it resist compression.\n\t- ![[notes/attachments/Pasted image 20230113162444.png]]\n- Tet -\u003e considered *regionally* volume preserving. It creates a lattice of triangles on the inside, to calculate what the volume is through the whole shape. Good for objects that are stiffer than balloons. For this you need to remesh and have regularly spaced triangles.\n\n\u003eStruts are fast, but there are sometimes artifacts that have to be fixes. Usually due to the struts in the center that are straight up-and-down\n\n\n\n### Balloons\n\nBalloons are made up of cloth around the outside, and a pressure constraint system that runs along the surface and the inside that pushes out from the inside. \n\nIf you make your pressure constraint really stiff it will push outward.\n\nIf the cloth is loose the object will keep inflating and become rounder and rounder.\n\n\u003e[!IMPORTANT] Your geo might be fine, but check for creasing or verts too close together if you have artifacts.\n\n\n## Vellum Strings\n\nIf you want to make a string you want to start from a line. Add more length and points.\n\n```mermaid\ngraph TD\n\tLine --\u003e VellumConstraints-hair\n\tVellumConstraints-hair --\u003e VellumSolver\n```\n\n\n\u003e[!NOTE] Hair and String are basically the same except that Hair *can* twist and string **CANNOT**\n\n\nAn important value in many sims but especially vellum is *Restlength*.\n\n**Restlength** is the value that holds the original spacing between constraints.\n\nOne value we can play with is *Restlength Scale*. \n\n![[notes/attachments/Pasted image 20230113170519.png]]\n\nThis allows us to make adjustments to the original *restlength*.\n\nIf we set it to 2, for example, it will take the originally generated *restlength* and multiply it by 2.\n\nIf you want to animate this property you have to do a few things.\n\n\u003e[!IMPORTANT] Like most other solvers, attributes set before the solver are only set at the very beginning of the sim by default.\n\nIf you want to change constraint properties *during* a simulation, you can use a *vellum constrain properties* node inside the solver.\n\n![[notes/attachments/Pasted image 20230113171104.png]]\n\nYou can now add keyframes on the properties inside this node.\n\n\n\n\n\n\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/Vex":{"title":"About vex in houdini","content":"\nVEX is a so called SIMD architecture ([https://en.wikipedia.org/wiki/SIMD](https://en.wikipedia.org/wiki/SIMD)) (Single instructions, multiple Data). In basic terms that means the code is not run line by line, but kind of \"at once\" at the end (because it's faster that way). The problem with that is that you can't write attributes and read the (same, changed) attributes out in the same wrangle. The \"result\" is only there after it was run, not \"during\" its run. That's why it works with two wrangles, but not in one.\n\nThe good news - you don't have to. You already calculated your data, just reuse it. So just make sure you calculate the result with the same ingredients, for example:\n\n`v@neut=v@P;`\n\n`v@neut.y=y;`\n\nAnd this will give you the correct result. You will actually always be able to do this, unless you create new points yourself. But even in that case you have to basically built in you own \"memory\" variables, so that you can keep track of the point data you create...and as long as you know that, it's not that hard.\n\n[VEX Newbie Question : Houdini](https://www.reddit.com/r/Houdini/comments/h91aod/vex_newbie_question/)\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/houdini-vex/Catenary-Curves-Vex":{"title":"Catenary Curves Houdini Vex","content":"\n\n\n```vex\n#include \u003cmath.h\u003e\n\nvoid\ngetFrameOfReference(vector Z, X, Y)\n{\n    Y = {0,1,0};\n    if (abs(dot(Z, Y)) == 1)\n        Y = {1,0,0};\n    X = normalize(cross(Y, Z));\n    Y = cross(Z, X);\n}\n\n// Used for slope calculation\n#define DELTA   0.001\n\nvector\ngetNoise(float tt; vector nscale; float nfreq, noff, ntime, nclamp0, nclamp1;\n                vector up, side)\n{\n    vector      nval;\n    nval = nscale * (vector(noise(tt*nfreq + noff, ntime)) - .5);\n    nval *= smooth(0.0, nclamp0, tt);\n    nval *= 1.0-smooth(nclamp1, 1.0, tt);\n    return nval.y*up + nval.x*side;\n}\n\nsop\nspringy(vector gravity={0,-1,0}; float stretch=1; float camp=0, cperiod=20;\n            vector nscale=0; float nfreq=4, noff=0, ntime=0;\n            float nclamp0=.25, nclamp1=.75)\n{\n    vector      p0, p1, P1;\n    vector      u0, u1;\n    vector      g;\n    float       ss, t0, t1;\n    float       cat0, cat1;\n    vector      axis;\n    vector      up, side;\n\n    if (!import(\"P\", p0, 1, 0)) p0 = 0;\n    if (!import(\"P\", p1, 1, 1)) p1 = 0;\n    if (!import(\"up\", u0, 1, 0)) u0 = {0,1,0};\n    if (!import(\"up\", u1, 1, 1)) u1 = {0,1,0};\n\n    t0 = (float)ptnum / (float)Npt;\n    if (t0 \u003e 0.5)\n         t1 = t0 + DELTA;\n    else t1 = t0 - DELTA;\n\n    // Compute catenary displacement\n    g = normalize(gravity);\n    cat0 = stretch*((exp(t0-.5) + exp(-t0+.5)) - (exp(0.5) + exp(-.5)));\n    cat1 = stretch*((exp(t1-.5) + exp(-t1+.5)) - (exp(0.5) + exp(-.5)));\n    P  = lerp(p0, p1, t0) - cat0*g;\n    P1 = lerp(p0, p1, t1) - cat1*g;\n    if (length2(nscale) \u003e 0)\n    {\n        if (t0 \u003e 0.5)\n             axis = P1 - P;\n        else axis = P - P1;\n        getFrameOfReference(normalize(axis), up, side);\n        P  += getNoise(t0, nscale, nfreq, noff, ntime, nclamp0, nclamp1,\n                            up, side);\n        P1 += getNoise(t0, nscale, nfreq, noff, ntime, nclamp0, nclamp1,\n                            up, side);\n    }\n    if (camp != 0)\n    {\n        if (t0 \u003e 0.5)\n             axis = P1 - P;\n        else axis = P - P1;\n        getFrameOfReference(normalize(axis), up, side);\n\n        ss = (2.0*M_PI)*cperiod*t0;\n        P += camp * sin(ss) * side;\n        P += camp * cos(ss) * up;\n    }\n}\n\n\n```","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Atmospheric-Rendering":{"title":"Atmospheric Rendering","content":"\n\nhttps://en.wikipedia.org/wiki/Mie_scattering\nhttps://www.britannica.com/science/Rayleigh-scattering\nhttps://www.scratchapixel.com/lessons/procedural-generation-virtual-worlds/simulating-sky\nhttps://www.alanzucconi.com/2017/10/10/atmospheric-scattering-1/\n\n#todo \n\n- [x] THING1\n- [x] THING2\n\t- [x] THING3\n\n\norientation\n\n```vex\nvector v0 = normalize(set(-1,0,-1));  \nvector vref = set(0,0,-1);  \n  \nvector4 orient = dihedral(v0, vref);  \nvector angle = qconvert(orient);  \n  \n//angle = degrees(angle)*-1;  \n//v@angle = angle;\n\n\nvector angle = quaterniontoeuler(orient, 0);  \nangle = degrees(angle);\n\n```","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Connect-Points":{"title":"Houdini Connect Points","content":"\n```vex\nint primPts[] = primpoints(0, @primnum);\nint firstPt = primPts[0];\nint lastPt = primPts[-1];\nint isClosed = primintrinsic(0, \"closed\", @primnum);\n\nif (isClosed || firstPt == lastPt) // is closed poly or closed curve\n{\n    // if is closed curve \n    // pt array's first pt and last pt are the same pt\n    if (firstPt == lastPt)\n        pop(primPts);\n    \n    int ptCount = len(primPts);\n   \n    for (int pt0Idx = 0; pt0Idx \u003c ptCount - 1; pt0Idx++) // the origin last pt is no need as new line first pt \n    {\n        int pt0 = primPts[pt0Idx];\n        \n        for (int pt1Idx = pt0Idx + 2; pt1Idx \u003c ptCount; pt1Idx++)\n        {\n            int pt1 = primPts[pt1Idx];\n            \n            if (!(pt0Idx == 0 \u0026\u0026 pt1Idx == (ptCount - 1))) // exclude condition that connect first and last pt\n                int line = addprim(0, \"polyline\", pt0, pt1);\n        }\n    }\n}\n```\n\n\nhttps://www.youtube.com/watch?v=-qgtQ91oItQ\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/houdini-vex/Houdini-Vex-Hub":{"title":"Houdini Vex Hub","content":"\n\n[[notes/3D-Modeling/Houdini/houdini-vex/Straighten UVs Vex]]\n\n[[notes/3D-Modeling/Houdini/houdini-vex/Catenary Curves Vex]]\n\n[[notes/3D-Modeling/Houdini/houdini-vex/Velocity Vectors Vex Houdini]]\n\n[[notes/3D-Modeling/Houdini/houdini-vex/Houdini Connect Points]]\n\n[[notes/3D-Modeling/Houdini/houdini-vex/Houdini Atmospheric Rendering]]","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/houdini-vex/Straighten-UVs-Vex":{"title":"Straighten UVs Vex","content":"\n\n```vex\n@uv.y = @primnum + (1 / float(@numprim -1));\n```\n\nmove the UVs of each prim along the y/v axis\n\n```vex","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Houdini/houdini-vex/Velocity-Vectors-Vex-Houdini":{"title":"Velocity Vectors Vex Houdini","content":"\n\n\n```\nvector middlepoint = point(0,'P',878) + chv('adddir');\n\nfloat noise = noise(chv('offset')+@P*chv('fancyscale')*ch('multynoise'))*5;\n\nv@pushout = (middlepoint-@P)*noise; \nv@v = v@pushout*-1;\n```\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/How-to-do-the-video-portion-of-the-assignments":{"title":"video assignments","content":"\n\n\n- also naming conventions for uploaded files\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Maya/Maya-Hub":{"title":"Maya Hub","content":"\n\n[[notes/3D-Modeling/Maya/Maya on Fedora]]\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Maya/Maya-on-Fedora":{"title":"Maya on Fedora","content":"\n\n\n```bash\n\nsudo dnf install mesa-libGLw\n\nsudo dnf install mesa-libGLU\n\nsudo dnf install libXp\n\nsudo dnf install libXmu\n\nsudo dnf install libXt\n\nsudo dnf install libXi\n\nsudo dnf install libXext\n\nsudo dnf install libX11\n\nsudo dnf install libXinerama\n\nsudo dnf install libXau\n\nsudo dnf install libxcb\n\nsudo dnf install libXScrnSaver\n\nsudo dnf install gamin\n\nsudo dnf install audiofile\n\nsudo dnf install audiofile-devel\n\nsudo dnf install e2fsprogs-libs\n\nsudo dnf install libxkbcommon-x11\n\nsudo dnf install xorg-x11-fonts-ISO8859-1-100dpi\n\nsudo dnf install xorg-x11-fonts-ISO8859-1-75dpi\n\nsudo dnf install liberation-mono-fonts\n\nsudo dnf install liberation-fonts-common\n\nsudo dnf install liberation-sans-fonts\n\nsudo dnf install liberation-serif-fonts\n\nsudo dnf install ncurses-compat-libs\n\nsudo dnf install compat-openssl10\n\nsudo dnf install libpng15\n\nsudo dnf install libnsl\n\nsudo dnf install nss\n\nsudo dnf install glibc\n\nsudo dnf install zlib\n\nsudo dnf install libSM\n\nsudo dnf install libICE\n```\n\n\nThese dependencies are a nightmare to install even on rhel. I have successfully installed it on fedora, Ubuntu, rhel 8, and centos stream 9.\n\n \nA flatpak option would be amazing! Installing Maya successfully on linux literally gives me a migraine every time haha\n\n```bash\nsudo dnf install mesa-libGLw mesa-libGLU libXp libXmu libXt libXi libXext libX11 libXinerama libXau libxcb libXScrnSaver gamin audiofile audiofile-devel e2fsprogs-libs libxkbcommon-x11 xorg-x11-fonts-ISO8859-1-100dpi xorg-x11-fonts-ISO8859-1-75dpi liberation-mono-fonts liberation-fonts-common liberation-sans-fonts liberation-serif-fonts ncurses-compat-libs compat-openssl10 libpng15 libnsl nss glibc zlib libSM libICE\n```\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Modeling-Fundimentals/Lessons/Poly-Modeling":{"title":"{{title}}","content":"\n# Poly Modeling\n\nThere are many methods of modeling 3D objects. We will go over a few of them here.\n\n\n\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Substance/Substance-Home":{"title":"Substance Home","content":"\n","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/Texturing/Texturing-Fundimentals":{"title":"","content":"","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/assignments/post-production/Post-production-exercise":{"title":"Post Production Exercise","content":"\n# What to Turn In?\n\n1. Blender Section\n\t1. Screenshot of blender compositor node tree\n\t2. exported composited image\n2. Resolve Section\n\t1. Screenshot of fusion node tree\n\t2. Screenshot of resolve color section\n\t3. Screenshot of final image\n\n\n# How to complete this assignment\n\n\n\n**Watch The Videos Below!**\n\n[Blender Render Layers and Changing Lighting](https://youtu.be/lOWE2WbDUFY) \n\n[Intro to Blender Compositing](https://youtu.be/NBI60ds7Mhg)\n\n[Resolve and Fusion Walkthrouhg](https://youtu.be/JTHB_ftXi3c)\n\n\n---\n\nFor color-management see [[notes/General/Color-Management/Color Management Hub]]\n\n\n\n---\n\n## Blender\n\n\u003e[!IMPORTANT] I have two EXR files for blender.\n\n### First File\n\n1. Download the EXR file\n2. Import the EXR to Blender\n3. Do some color correction\n4. Add bloom\n5. change the hue of an object with cryptomattes\n6. Screenshot node graph\n7. Save final image as PNG\n\n### Second File\n\n1. Download second EXR file\n2. Import EXR into the blender compositor\n3. Duplicate the *render layers* node 3 times\n4. Follow the video on how to change each lights color\n5. Take screenshots of your node graph\n6. Save final image as PNG\n\n## Resolve\n\n\u003e[!NOTE] You only need to use the first file for fusion, not the color change file.\n\n### First File\n\n1. Import the EXR file into Resolve\n2. Create a new clip\n3. Switch to Fusion\n4. Do some color correction\n5. Add a glow\n6. Switch to the color workspace\n7. Play with the color correction\n\n\n\n---\n\n# Lesson Notes\n\n## How How To Complete\n\n### Blender compositing setup\n\nThere are few ways to set up blender for compositing.\n\nThe easiest is simply click on the compositing workspace at the top of the interface.\n\n![[notes/attachments/Pasted image 20221130183737.png]]\n\nThen make sure *use nodes* is turned on.\n\nBy default there won't be anything there because Blender's default behavior is to use the rendered image as the input. But that's not the only way.\n\nWe can also *Drag and drop* an image into the compositor. Or create *Image* node and open the desired file.\n\n\u003eFor this exercise I am providing you a pre-rendered file so you will use the later method.\n\nThe next thing I do is split the pane and make the other pane and turn that one into an *Image Editor* panel.\n\n\u003e[!IMPORTANT] Make sure you have *Node Wrangler* enabled\n\nIn the compositing window you can now view your composite two ways.\n1. By plugging the wires into the *Composite* node.\n2. Creating a *Viewer* node. For this you can use Shift+Cntrl and click the node you want to view and it will automatically create it if you have node-wrangler enabled.\n\nThen in your *Image Editor* window change the image from *Render Result* to *Viewer Node*\n\nThis way your preview will always show up in that window.\n\n\u003e[!IMPORTANT] To save the final image click the *Image* menu in the *Image Editor* window and click *Save As*\n\n---\n\n## Render Layers vs Render Passes\n\n### Render Passes\n\nRender passes are setup in the renderpass settings. Many renderers have useful passes available for you to use with a click of a button.\n\nIn Blender the settings are in *View Layer Properties*.\n\n![[notes/attachments/Pasted image 20221130182329.png]]\n\nYou can toggle these on and off depending on your compositing needs.\n\n### AOVs\n\nIn other software all renderpasses are referred to as AOVs. \n\nAOV stands for =\u003e *Arbitrary Output Variables*\n\nIn blender we can add custom AOVs per shader in our shader graph.\n\nI'll add info on this later, but you don't need to know it now.\n\n![[notes/attachments/Pasted image 20221130182731.png]]\n\n### Cryptomattes\n\nCryptomattes are very useful passes that create *keys* per material, object, or something else you define so you can easily mask out objects in post.\n\n![[notes/attachments/Pasted image 20221130182749.png]]\n\n\n\n### Render layers\n\nIn order to create render layers we have to understand collections and do some set up.\nRender layers can help us save time later by separating out our render into multiple renders that we can use in the compositor later. One example might be to recolor lights in post.\n\nIn order to setup render layers we have to create new *view layers*. You can find these in the upper right corner of your interface.\n\n![[notes/attachments/Pasted image 20221130174925.png]]\n\nClicking the file button will show you the option to create a new *view layer*\n\n![[notes/attachments/Pasted image 20221130175334.png]]\n\n![[notes/attachments/Pasted image 20221130175341.png]]\n\nYou may also want to turn a few things on in your *outliner*.\n\n![[notes/attachments/Pasted image 20221130175442.png]]\n\nThis adds two new options to collections.\n\n![[notes/attachments/Pasted image 20221130175519.png]]\n\nThe first is a *mask*. This means that it will mask any other view layers and create transparency on that layer. useful for separating out objects in your renders.\n\nThe second is for *bounce light only*. This means that the object will be invisible but the bounce light will effect the scene.\n\nA simple use for view layers would be to separate out the main lights.\n\nFirst:\n\nCreate a new view layer.\n\nSecond:\n\nDisable the all but one light.\n\n\u003e[!IMPORTANT] Make sure each light is in it's own collection.\n\n![[notes/attachments/Pasted image 20221130175858.png]]\n\n![[notes/attachments/Pasted image 20221130175919.png]]\n\n\u003e[!NOTE] In *View Layer Properties*, make sure you **DON'T** have *Render Single Layer* checked or you won't render all the layers at once.\n\n![[notes/attachments/Pasted image 20221130181839.png]]\n\n## Other Tips\n\n### Viewport Renderpasses\n\nTo see render passes in your viewport, make sure you are in rendered mode and then open the view drop-down and you'll see a *Render Pass* option.\n\n![[notes/attachments/Pasted image 20221130182042.png]]\n\n\n---\n\n#### General Compositing in Blender\n\nThe Blender compositor is relatively powerful and simple compared to industry standard compositors like *Nuke* and *Fusion*. So we'll start by learning our way around it first.\n\nTo get started you want to setup your workspace a bit.  See [[#Blender compositing setup]].\n\n##### Image Source\n\nBy default blender will use the *Render layers* node as the incoming source. This may or may not be what you need. This node will grab the image or image sequence that was just rendered and use that as the incoming image.\n\n![[notes/attachments/Pasted image 20221201145731.png]]\n\nYou may also use an *Image* node.\n\n![[notes/attachments/Pasted image 20221201145911.png]]\n\nHere you can ether use an image already loaded in your project or open a new one.\n\n\u003e[!NOTE] On large projects, project management is very important.\n\u003e\n\u003eSee [[Project Management]]\n\n![[notes/attachments/Pasted image 20221201150041.png]]\n\nAbove is an example of a *Multilayer EXR* loaded in the image node.\n\n##### Exporting Files\n\n One of the main beginner questions is how to export or save images or sequences. I've seen it many times where people just re-render their stuff. This is unnecessary. \n \nThe easiest way is using the *Image Editor* image menu.\n\n![[notes/attachments/Pasted image 20221205091859.png]]\n\n\n\n#### Changing Light Colors In Post\n\nThere are so many things you can do with post-production. In CG it can really help us save time especially in a production environment.\n\nBefore jumping into the compositing please at least read through how to set up the render for this to work.\n\n[[#Render layers]]\n\nIn this exercise each of the three lights is on it's own render layer. This allows us to use some simple compositing tricks to re-light our scene.\n\nFirst, drop-down three *Image* nodes and load the same EXR into each one.\n\nYou should notice a *layer* section at the bottom of the node once it's loaded.\n\n![[notes/attachments/Pasted image 20221205100529.png]]\n\nSet each one to a different layer.\n\nIn our case it should be:\n- red\n- blue\n- green\n\nThen do the following after each node:\n- Add an RGB node\n- Add a *Mix* node\n\t- Set it to *Multiply*\n- Connect the *Image* and *RGB* nodes to *Image* inputs of the *Mix* node.\n\n![[notes/attachments/Pasted image 20221205100844.png]]\n\nOnce you've done that your setup should look something like this:\n\n![[notes/attachments/Pasted image 20221205100944.png]]\n\nNow you can change the color of each light separately.\n\n![[notes/attachments/Pasted image 20221205101017.png]]\n\nBut we are not done yet.\n\nNext we need to drop down three more *mix RGB* nodes and switch both to *Add*.\n\nThen connect them up like so:\n\n![[notes/attachments/Pasted image 20221206163727.png]]\n\nWe use *Add* for these nodes because it works best with combining lights.\n\n\u003e See [Blend modes - Wikipedia](https://en.wikipedia.org/wiki/Blend_modes)\n\nAt this point we can recolor all the lights separately in post without having to re-render.\n\n\n### Setting up fusion\n\n#fusion\n\nFirst, download *Davinci Resolve* from [here](https://www.blackmagicdesign.com/products/davinciresolve).\n\nOnce you have it installed open it. You'll be greeted with a window like this:\n\n![[notes/attachments/Pasted image 20221206170105.png]]\n\nThen, open a new project. Once Resolve opens at the bottom of the window you'll a set of icons.\n\n![[notes/attachments/Pasted image 20221206171017.png]]\n\nThese are the different \"apps\" or *Contexts* you can use in Resolve.\n\n#### Importing Media into Resolve\n\nThe simplest way to add files to a project is change to the *Media* context and simply drag and drop files here.\n\n#### Creating a new clip\n\nIn resolve we need to create clips in order to process anything.\n\nThe easiest way to do this is to switch to the *Cut* context and then drag our file down to the timeline. This will automatically create a clip.\n\n#### Opening Fusion\n\nOnce we have a clip we can switch to the *fusion* context. It will automatically create a fusion clip based on whatever the *playhead* over.\n\n\u003e![[notes/attachments/Pasted image 20221206171703.png]]\n\u003e*playhead*\n\nOnce Fusion is open we should see something like this:\n\n\n![[notes/attachments/Pasted image 20221206171916.png]]\n\n1. Preview window *A*\n2. Preview window *B*\n3. Inspector\n4. Node editor\n\nThe purpose of the two preview windows is you can see *before and after*. on whatever you are doing. This can really help improve your workflow.\n\nTo toggle the preview windows you can do two things.\n1. click on one of the two dots on any node and it will enable the preview on the respective windows.\n2. Click *1* or *2* when you have any node selected and it will toggle the respective dots.\n\n![[notes/attachments/Pasted image 20221206172701.png]]\n\nThe inspector will show the options for any node that is currently selected.\n\n##### Navigating the node editor\n\n###### Adding Nodes\n\nTo add nodes you can do two things.\n1. Right click in the node editor and select *Add tool*\n\n![[notes/attachments/Pasted image 20221206173309.png]]\n\n2. Click *Shift*+*Space* and a search box will pop up in which you can start to type and the list will update in real-time. You can also use the arrow keys to navigate up and down the list then press enter to drop-down the node you want.\n\n![[notes/attachments/Pasted image 20221206173624.png]]\n\nIn Fusion your nodes can go in any direction. This is very similar to how [[notes/Nuke/Nuke Hub|Nuke]] lets you layout your nodes.\n\n![[notes/attachments/Pasted image 20221206173909.png]]\n\n![[notes/attachments/Pasted image 20221206173913.png]]\n\n##### Anatomy of a Fusion node\n\n[How inputs work in Fusion - YouTube](https://www.youtube.com/watch?v=aKV-2C2qMro)\n\nInputs =\u003e Triangles\nOutputs =\u003e Squares\n\nThink of the colors as category of input.\n\nYellow =\u003e Main input\nGreen =\u003e Secondary input\nBlue =\u003e Effect Mask\nWhite =\u003e anything else\n\nColor Corrector Node Example:\n\n![[notes/attachments/Pasted image 20221206174156.png]]\n\n1. Main Input\n2. Secondary Input (Match Reference)\n3. Match Mask input\n4. Output\n5. Effect Mask\n\n##### Connecting Nodes\n\nThere are few ways to connect nodes in fusion.\n1. Click and drag from one output then:\n\t1. Drop it onto another node. By default it will connect to the next open input.\n\t2. Drop it directly onto an input of one of the nodes.\n2. Right-click and drag from an output onto another node. A menu will pop up and let you choose which input to use.\n\n![[notes/attachments/Pasted image 20221206180614.png]]\n\n##### Saving Images\n\nYou can right click on the preview pane and save the image.\n\n![[notes/attachments/Pasted image 20221206181216.png]]\n\n\n#### Color Correction in Resolve\n\nDavinci Resolve is industry standard in color grading for film. It even has it's own context for it.\n\n![[notes/attachments/Pasted image 20221206180923.png]]\n\n1. Stills\n2. Viewport\n3. Color grading node graph\n4. Toolshelf\n5. Color correcting tool wheels\n6. Tools (Correlate with toolshelf)\n7. Keyframes for animation\n\nI'm not going to get into depth here, but you can do some really advanced things with color grading, keying and more in this context.\n\n[How To Color Grade ANY IMAGE - DaVinci Resolve Color Correction Tutorial - YouTube](https://www.youtube.com/watch?v=xK9x-S5eUYk)\n\n#### Exporting Footage\n\nUse the *Export* context and select a file-type to render out to.\n\n\n---\n# Resources\n\n[Introduction to Compositing in Blender - YouTube](https://www.youtube.com/watch?v=bIZrTXtyQkY)\n\n[Compositing in Blender for Beginners (Tutorial) - YouTube](https://www.youtube.com/watch?v=xEpVyEi1Hts\u0026t=1379s)\n\n[Lighting in compositing in Blender EP9 - YouTube](https://www.youtube.com/watch?v=WZD-MTXwP4c)\n\n[Comic Shading using the Compositor in Blender - YouTube](https://www.youtube.com/watch?v=anIFTskTUKI)\n\n[NUKE FOR NOOBS | Basics Of CG Compositing (Part 1) - YouTube](https://www.youtube.com/watch?v=fxfuhl8Q7ys\u0026t=436s)\n\n[Compositing 3D Models into Photos Using Fspy and Blender - YouTube](https://www.youtube.com/watch?v=LLZmgAjxaIQ)\n\n[Simple Compositing | Blender Compositor | After Effects | Davinci Fusion | Natron - YouTube](https://www.youtube.com/watch?v=D-hFcC-at9Q)\n\n[Color Key Node Blender Compositing - YouTube](https://www.youtube.com/watch?v=OgI_h2h9Qg8)\n\n[Composite CGI Around Real Object - Blender VFX Tutorial (FULL) - YouTube](https://www.youtube.com/watch?v=fnAGtXMkRMY)\n\n[Using Cryptomattes in Blender 2.8 - Compositing Tutorial - YouTube](https://www.youtube.com/watch?v=VBJQM-gIob8)\n\n[Advanced CG Compositing Course in Nuke - NK606 RELEASED! - YouTube](https://www.youtube.com/watch?v=ho2LZ9b8PR4)\n\n[Denoise Shadow Pass - Blender Octane Render - YouTube](https://www.youtube.com/watch?v=1kEQhQJNFSQ)\n\n[Compositing for 3D artists - 03 - Compositing fundamentals (In fusion) - YouTube](https://www.youtube.com/watch?v=v2wfwoQ5dnY\u0026t=754s)\n\n[Add VFX into Cinematic RAW+LOG Footage (the right way) | ACES Part 1 - YouTube](https://www.youtube.com/watch?v=aJF2sAjRsy0)\n\n[Mimic Volumetric Fog Using Only Compositing (Blender Tutorial) - YouTube](https://www.youtube.com/watch?v=TH2ZoEvhsTs)\n\n[Blender Compositing Quicktip: Easy Atmospheric Falloff - YouTube](https://www.youtube.com/watch?v=IY1jphDw_78)\n\n[Render Passes for Concept Art l Blender to Photoshop - YouTube](https://www.youtube.com/watch?v=9VdD4lfAXUc)\n\n[How to Save Final Image After Compositing (Blender) - YouTube](https://www.youtube.com/watch?v=napMtY5Tyx8)\n\n[The Secret Key To Controlled Renders - YouTube](https://www.youtube.com/watch?v=aVfbEgMFbvA)\n\n[Blender 2.8 Tutorial: View Layers and Render Layers as separate images - YouTube](https://www.youtube.com/watch?v=LPneC8b6gnU)\n\n[Blender Compositing Tip: Using View Layers for more control - YouTube](https://www.youtube.com/watch?v=N5NKfQrwens)\n\n[Sorry Blender, this is my new compositor - YouTube](https://www.youtube.com/watch?v=Gmh-6isghMA)\n\n[Make Your Renders Pop - Intro To The Compositor - YouTube](https://www.youtube.com/watch?v=jhTPI6QJQNg\u0026t=621s)\n\n[Color Key Node Blender Compositing - YouTube](https://www.youtube.com/watch?v=OgI_h2h9Qg8)\n\n[Blender and Fusion Multi-Layer Workflow - Render Passes and Compositing for Beginners - YouTube](https://www.youtube.com/watch?v=cQ6EH5DSQyM)\n\n[Import Blender Scene Into Fusion! - Blender Camera and Mesh in Resolve! - YouTube](https://www.youtube.com/watch?v=3mqO-SWeW6w)\n\n[How to Export an Image from DaVinci Resolve Fusion (Single Frame to JPG, PNG, etc...) - YouTube](https://www.youtube.com/watch?v=YciL21FhUQY)\n\n\n\n## Tangential Resources\n\n[How I Create Cinematic CG Environments | FULL BREAKDOWN - YouTube](https://www.youtube.com/watch?v=Tc1stc-SYzA)\n\n[Understanding Composition - YouTube](https://www.youtube.com/watch?v=O8i7OKbWmRM)\n\n[Compositing 3D Models into Photos Using Fspy and Blender - YouTube](https://www.youtube.com/watch?v=LLZmgAjxaIQ)","lastmodified":"2023-01-14T00:13:42.563039642Z","tags":null},"/notes/3D-Modeling/blender/Blender-Hub":{"title":"Blender Hub","content":"\n# Blender Course for UVU\n\n[[notes/3D-Modeling/DGM 2210 - 3D for 2D Pipelines]]\n\n\n---\n\n\n\n### FAQ\n[[notes/General/faq/How to read keyboard shortcuts|How to read the keyboard shortcuts]]\n[[notes/3D-Modeling/How to do the video portion of the assignments|How to do the Video portion of the assignments]]\n\n\n\n---\n### Resources\nBefore you begin this course browse the resources page. There is a link to the blender download there too and some free addons I will be discussing throughout the content.\n\n[Blender Resources](notes/3D-Modeling/blender/Resources/Blender%20Resources.md)\n\n\n---\n\n# Scripting for Blender\n\n[[notes/Programming/Python/Python Hub]]\n\n\n---\n\n# Blender Development\n\n\n\n\n---\n\n# Other\n\n[[notes/3D-Modeling/blender/Lessons/Blender Navigation]]\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Course-Planning-last-year":{"title":"Course Plan","content":"\n# Blender Course\n\n---\n\n## some general ideas on how the course should go\n\nThe general mantra of the course will be to learn blender by learning the underlying fundamentals of CG in narrow set across the pipeline so students can gain exposure to the wide set of ideas necessary to be successful. \n\nIn general the blender course should cover a lot of the things that aren't covered throughout the rest of the program and talk about why these things are important.\nSome of these things include:\n\n---\n## Lessons and assignments\n\n\n\n\n\n---\n## Things to learn during the course\n- How CG is used\n\t- Games\n\t- Film\n\t- Advertising\n\t- Motion Graphics\n\t- Research\n\t- Simulation\n\t- general art\n- understanding [[notes/General/CG-Fundimentals/Lessons/Coordniate Systems| Coordinate Systems]] [[notes/General/CG-Fundimentals/Lessons/Coordinates and 3D modeling|Coordinates and 3D Modeling]]\n\t-  global [[notes/General/CG-Fundimentals/Lessons/Coordniate Systems#Global Space]]\n\t-  local [[notes/General/CG-Fundimentals/Lessons/Coordniate Systems#Local Space]]\n\t-  tangent [[notes/General/CG-Fundimentals/Lessons/Coordniate Systems#Tangent Space]]\n- Understanding Geometry under the hood [[notes/General/CG-Fundimentals/Lessons/What is Geometry]]\n\t-  [[notes/General/CG-Fundimentals/Lessons/Applied Mathematics]]\n\t\t- it's *not* continuous, instead, in CG the math is **Discrete** [[notes/General/CG-Fundimentals/Lessons/Continuous vs Discrete Mathematics]]\n\t\t- Types of maths\n\t\t\t- linear algebra\n\t\t\t\t- geometric algebra\n\t\t\t- calculus\n\t\t\t- *be aware* of some general computer science\n\t\t\t\t- big **O**\n\t\t\t\t- design patterns --- how those relate\n\t\t\t\t- sorting\n\t\t\t\t- data processing\n\t\t\t\t- algorthms\n\t\t\t\t- **geometry processing**\n\t- The aspects of geometry\n\t\t- points\n\t\t- edges\n\t\t- faces\n\t\t- normals/surfaces\n\t\t\t- winding\n- Modeling\n\t- standard modeling practices *software agnostic*\n\t\t- box modeling\n\t\t- boolean\n\t\t- procedural\n\t\t- sculpting\n\t- UVs\n\t\t- talk about attributes or data attached to geometry\n\t\t- another talk on coordinate spaces\n\t\t\t- UVs are a 3d -\u003e 2d coordinate transform per point relative to the ?tangent? *double check this*\n\t\t- talk about planning modeling once you understand UVs\n\t- Other general modeling concepts\n\t\t- Speed \u0026 efficiency\n\t\t\t- try not to repeat tasks\n\t\t\t- plan ahead\n\t\t\t- manage files\n\t\t\t\t- version control\n\t\t\t\t- naming conventions\n\t\t\t\t- organization\n\t\t- topology and why https://topologyguides.com/\n\t\t\t- edge flow\n\t\t\t\t- redirecting\n\t\t\t\t- planning\n\t\t\t- loops\n\t\t\t\t- edge\n\t\t\t\t- vertex/point\n\t\t\t\t- face\n\t\t\t- poles\n\t\t\t\t- moving poles\n\t\t\t- optimizing\n\t\t\t\t- edge loop reduction\n\t\t\t- bevels\n\t\t\t\t- workflows from CAD like programs\n\t\t\t\t\t- chamfer\n\t\t\t\t\t- etc\n\t\t\t- creating holes\n\t\t- Subdiv workflow\n\t\t\t- your mesh should look good before the subdiv\n\t\t\t- games\n\t\t\t\t- apply and optimize\n\t\t\t- film\n\t\t\t\t- apply subdiv on render\n\t\t- Mesh Decals\n\t\t\t- different per software\n\t\t\t\t- attack objects to another object seamlessly\n\t\t- Groups\n\t\t\t- selection\n\t\t\t- point/vertex/edge/face\n\t\t\t- attribute\n\t\t- Normals\n\t\t\t- setting them\n\t\t\t\t- procedurally setting them\n\t\t\t- fixing normal glitches\n\t\t- Separating meshes\n\t\t\t- for less topology\n\t\t\t- creating holes\n\t\t\t- pros/cons\n\t\t\t\t- edge loops\n\t\t\t\t- UVs\n\t\t- Joining meshes\n\t\t\t- planning edge flow\n\t\t\t- using merge tools\n\t\t- Special modeling workflows\n\t\t\t- start with plane\n\t\t\t\t- curve it procedurally\n\t\t\t\t- thickness procedurally\n\t\t- A short introduction to curves in 3D\n\t\t\t- photoshop vs illustrator analogy\n\t\t\t- why they are still important tools\n\t\t\t- what types of work are they often used for\n\t\t\t- simple curves\n\t\t\t- nurbs (curved surfaces)\n\t- Blender Modeling\n\t\t- Projects for learning\n\t\t\t- hard surface\n\t\t\t- organic\n\t\t- modeling using modifiers\n- Geometry Nodes\n\t- Houdini\n\t- Proceduralism in CG\n\t- Software development and procedural CG\n\t- workflows\n\t- data flow\n\t- data types\n\t- attributes\n- Animation\n\t- Simple Animation\n\t\t- object\n\t\t- vertex\n\t\t- coordinate space\n\t- Rigging\n\t\t- simple rig\n\t- create an *animatic*\n- Surfacing\n\t- Shading \n\t\t- shader fundimentals\n\t\t\t- buffers\n\t\t\t- object data\n\t\t\t- scene data\n\t\t\t- coordinate space review\n\t\t\t- noises\n\t\t\t- casting data\n\t\t\t\t- vectors to color\n\t\t\t\t- color as vectors\n\t- Texturing\n\t\t- UVs and how that relates to texturing\n\t\t- Projecting UVs\n\t\t- creating UVs\n\t\t- manipulating UVs\n\t\t- hooking up textures to shader\n\t\t- File management\n\t- PBR\n\t\t- history\n\t\t- why\n\t- NPR\n\t\t- why\n\t\t- use cases\n\t\t- fun\n- Lighting\n\t- principles\n\t- types of common CG lights\n\t- relation to film/photography\n\t- general ways of lighting scenes\n\t\t- tri light studio lighting\n\t\t- sun lighting\n\t\t- space lighting\n\t\t- custom\n\t\t\t- NPR\n\t\t\t- per scene needs\n\t\t- mesh lights/emission \n\t\t- HDR\n\t\t\t- procedural\n\t\t\t- texture based\n\t\t\t- differences between to touch on in rendering\n\t\t\t\t- raster\n\t\t\t\t\t- often need to place a sun light where the sun is in the HDR\n\t\t\t\t- path traced\n- Cameras\n\t- Real cameras\n\t\t- iso\n\t\t- focal length\n\t\t- etc\n\t- How CG cameras often emulate real cameras\n\t\t- what that means for us\n\t\t- how to get to look you want\n\t\t- framing your scene\n\t\t- how CG cameras work\n\t\t\t- coordinate space\n\t\t\t- important part of going from 3D modeling to an image on your screen\n\t\t\t- buffers\n\t\t\t- rays\n- Lookdev\n\t- Industry pipelines\n\t\t- how it's done\n\t\t- why it's done\n\t\t- lookdev panel\n\t\t\t- reflective\n\t\t\t- mat\n\t\t\t- colorstrip\n\t- How we can do it in blender\n\t\t- World shading\n\t\t\t- HDR\n\t\t\t- procedural sky\n\t\t- lookdev panel\n- Rendering\n\t- This is where it all comes together\n\t- industry film pipeline\n\t\t- render times\n\t\t- render budgets\n\t\t- the future of rendering\n\t\t\t- good old path tracing isn't going anywhere soon for many reasons\n\t- Types of renderers\n\t\t- General Rendering theory\n\t\t\t- buffers\n\t\t\t- pixels\n\t\t\t- drawing a triangle\n\t\t\t- touch on technologies\n\t\t\t\t- opengle\n\t\t\t\t- directx\n\t\t\t\t- vulcan\n\t\t\t\t- etc\n\t\t- Path traced\n\t\t\t- tries to be a true as possible to how light works\n\t\t\t\t- light transport research, physics and computer science have come together to make these renderers possible.\n\t\t\t\t- these renderers will get you as close as possible to real life images if that's what you want.\n\t\t\t\t- how they work\n\t\t\t\t\t- lights\n\t\t\t\t\t- cameras\n\t\t\t\t\t- ray bounces\n\t\t- Raster\n\t\t\t- raytraced raster\n\t\t\t\t- new technology\n\t\t\t\t- still not as good as pathtracing\n\t\t\t- realism has to be faked\n\t\t\t\t- many effects like reflection are only calculated in screen space unless reflection maps are used\n\t\t\t\t- small details often need to be offloaded to normal maps\n\t\t\t\t\t- in film workflows much of the small details is allowed to be geometry\n\t\t- CG rendering theory\n\t\t\t- things to keep in mind\n\t\t\t\t- not all render engines are the same\n\t\t\t\t\t- actually they are all a little different\n\t\t\t\t- some settings may be named differently\n\t\t\t\t- **the underlying theory is the same\n\t\t\t- samples\n\t\t\t\t- what are they\n\t\t\t\t- why do we need to understand them\n\t\t\t\t- samples per types of rendering\n\t\t\t\t\t- reflection\n\t\t\t\t\t- diffuse\n\t\t\t\t\t- etc\n\t\t\t- CPU x GPU\n\t\t\t\t- general differences and why GPUs are cool\n\t\t\t- Tiles/buckets\n\t\t\t\t- tiles that are rendered\n\t\t\t- progressive rendering\n\t\t\t- raster rendering\n\t\t\t- Denoising\n\t\t\t\t- saving time\n\t\t\t\t- *touch on compositing*\n\t\t\t\t- new tech\n\t\t\t- motion blur\n\t\t\t- color management\n\t\t\t\t- ACES\n\t\t\t\t\t- https://chrisbrejon.com/cg-cinematography/chapter-1-5-academy-color-encoding-system-aces/\n\t\t\t\t\t- OCIO\n\t\t\t\t\t\t- Lego Movie\n\t\t\t\t\t- filmic\n\t\t\t- Renderer post effects\n\t\t\t\t- bloom\n\t\t\t\t- color\n\t\t\t\t- etc\n\t\t\t\t- A quick solution mostly for look-dev\n\t\t\t- Rendering in VFX\n\t\t\t\t- matching source film\n\t\t\t\t\t- motion blur - camera\n\t\t\t\t- matching film color space\n- Compositing\n\t- what is compositing?\n\t- why is important?\n\t- Compositing in film\n\t\t- nuke as industry standard\n\t- planning your shot with compositing in mind from the beginning\n\t\t- how that can save time\n\t- Compositing for CG\n\t\t- render passes\n\t\t- cryptomates\n\t\t- piecing separate renders together\n\t\t\t- background\n\t\t\t- character\n\t\t\t- VFX\n- Tooling\n\t- python scripting\n\t- addon creation\n\t- plugins\n\t- Blender under the hood\n- A few last things\n\t- audio\n\t\t- audio reactive work\n\t\t- film work has audio\n\t\t- it may be helpful in some cases to keep audio in mind when working.\n\n\n---\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/Blender-Lessons-Home":{"title":"Blender Lessons Home","content":"\n[[notes/3D-Modeling/blender/Lessons/Navigation In Blender|Navigation in Blender]]\n\n[[notes/3D-Modeling/blender/Lessons/Lesson - Boolean surfacing and normals|Booleans and Normals]]\n\n[[notes/3D-Modeling/blender/Lessons/Texturing lesson 2]]\n\n[[notes/3D-Modeling/Texturing/Texturing Fundimentals]]\n\n[[notes/3D-Modeling/blender/Lessons/Texturing in Blender and other CG apps]]\n\n[[notes/3D-Modeling/slides/3d-modeling-fundimentals-slides]]\n\n[[notes/General/CG-Fundimentals/Lessons/Types of Mathematics in CG]]\n\n[[notes/3D-Modeling/blender/Lessons/Grease Pencil]]\n\n[[notes/3D-Modeling/Course Timeline/2 CG Fundimentals]]\n\n[[notes/3D-Modeling/blender/Lessons/Shading]]\n\n[[notes/3D-Modeling/Modeling-Fundimentals/Lessons/Poly Modeling]]\n\n[[notes/3D-Modeling/blender/Lessons/Sculpting and Retopology in Blender]]\n\n\n\n\n---\n# Notes\n[[notes/3D-Modeling/slides/Lesson Notes]]\n\n[[notes/3D-Modeling/blender/Notes/sept 19 notes]]\n\n[[notes/3D-Modeling/slides/lesson-2]]\n\n[[notes/3D-Modeling/slides/lesson 3]]\n\n[[notes/3D-Modeling/slides/lesson-2-notes]]\n\n[[notes/3D-Modeling/blender/Lessons/UV lesson plan]]\n\n[[notes/3D-Modeling/blender/Lessons/Fundimentals of Texturing for 3D Workflows]]\n\n[[notes/3D-Modeling/blender/Notes/sept 19 notes]]\n\n[[notes/3D-Modeling/blender/Lessons/Topology Lesson Notes]]\n\n\n---\n[[notes/3D-Modeling/blender/Course Planning last year]]\n\n\n\n---\n# Assignments\n\n\n[[notes/3D-Modeling/blender/assignments/UV assignment]]\n\n[[notes/3D-Modeling/blender/assignments/Shading and Rendering Exercise]]\n\n[[notes/3D-Modeling/blender/assignments/topology/Topology-Assignment-Instructions]]\n\n[[notes/3D-Modeling/blender/assignments/Grease Pencil Exercise]]\n\n[[notes/3D-Modeling/blender/assignments/blender-assignment]]\n\n[[notes/3D-Modeling/Final Project]]\n\n[[notes/3D-Modeling/blender/assignments/Texturing/Blender Texturing Exercise]]\n\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/Blender-Navigation":{"title":"Blender Navigation","content":"\n\n\n\n![[notes/attachments/keys-color/shift-key-col.png|80]]+![[notes/attachments/keys-color/tilde-key-col.png|50]]=\u003efirst person style navigation\n\n\n\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/Fundimentals-of-Texturing-for-3D-Workflows":{"title":"Fundimentals of Texturing for 3D Workflows","content":"\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/Grease-Pencil":{"title":"Blender Grease Pencil Lesson Notes","content":"\n\n\n---\n\n### Extra blender tips\n- Cntrl + 2 in object mode -\u003e auto subdivides\n- Cntrl + A -\u003e look in the apply menu for *Visual Geometry to Mesh*\n\n\n\n\n---\n\n## Grease Pencil\n### Set up\n1. Add Grease pencil object\n\t1. or -\u003e Open new file with 2D Animation option\n2. Set up your tablet\n\t1. set your pen buttons to middle-click and right-click\n3. *optional* set up your viewport\n\t1. toggle *world* in the background options of your shading dropdown in the 3D-viewport. ![[notes/attachments/viewport-click-world-for-background-color.png]]\n\t2. change your viewport color to something you are used to\n4. Get Extra brushes\n\t1. Enable the *Grease Pencil Tools addon* that comes shipped with Blender\n\t2. Create a grease pencil object and go into *Draw* mode\n\t3.  Navigate to the *Tool* tab in the outliner ![[notes/attachments/grease-pencil-tools-blender.png]]\n\t4. In the *Brushes* section open the dropdown and click *Download and Import Texture Brush pack* ![[notes/attachments/download-extra-brushes-grease-pencil-blender.png]]\n\n---\n## Interface\n\n\n---\n## Tools\n\n### Draw\n\n### Fill\n\n### Erase\n\n### Cut\n\n\n\n\n---\n### Things to keep in mind\n\n- Object vs edit mode\n- ![[notes/attachments/keys-color/shift-key-col.png|70]] + drawing =\u003e stabilizer toggle (like smoothing in sculpt mode)\n- ![[notes/attachments/keys-color/f-key-col.png|50]] -\u003e Brush size\n- ![[notes/attachments/keys-color/shift-key-col.png|70]]+![[notes/attachments/keys-color/f-key-col.png|50]] -\u003e Brush opacity\n- extract palette from image\n\t- load image into image viewer\n\t- extract palette\n\t- Generate palette -\u003e import it coolors.co\n\n\n\n\u003e[!NOTE] Grease pencil is somewhere between drawing, vector illustration, and 3D modeling\n\n\n---\n## Grease Pencil Workflows\nWhen you use grease pencil there are many different workflows. Often workflows still include modeling especially for 3D illustrations. \n\n### Materials vs. Vertex Color\nThere are pros and cons to each workflow.\nWhen you are using materials for all your colors \n\n### Sketching\n\n\n## Illustration\n\n\n## Masking\n\n\n### Sculpt Mode\n\n\n### Modeling\n\n\n### Drawing on Objects\n\n\n---\n## Other Things\n\n### Rigging\n\n\n\n---\n## Extra learning\n\n\u003e[!NOTE] Some of these tutorials are breaking some modeling rules that you should be following.\n\n[Grease Pencil #1: Basics of Interface | Blender 2.82 | Tutorial - YouTube](https://www.youtube.com/watch?v=w3O-t_dkoBU)\n\n[Grease Pencil New Mask Features | Blender Grease Pencil - YouTube](https://www.youtube.com/watch?v=lI0V-0UuhmE)\n\n[Blender Quick Tip: Exploring the Grease Pencil color palette - YouTube](https://www.youtube.com/watch?v=4VpvaSbh8KA)\n\n[Blender Quick Tip: Create and Import Custom GP Brushes - YouTube](https://www.youtube.com/watch?v=6lk9Y2s6bQw)\n\n[Blender Quick Tip: Create and Import Custom GP Brushes - YouTube](https://www.youtube.com/watch?v=6lk9Y2s6bQw)\n\n[Blender 2D/3D for beginners, drawing and animating with greasepencil (blender 2.8) - Part 1/2 - YouTube](https://www.youtube.com/watch?v=c57qq2nE3B0)\n\n[Grease pencil beginner tutorial | TOTORO | Blender 3.2 - YouTube](https://www.youtube.com/watch?v=SpFwrQOpQ0M)\n\n[Basic Blender Toon / Cel Shader Tutorial 2D Grease Pencil + 3D Modelling - YouTube](https://www.youtube.com/watch?v=hBztmFHkNQo)\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/Lesson-Boolean-surfacing-and-normals":{"title":"Booleans Surfacing and Normals","content":"\n# Booleans\n### what are booleans?\n- The term comes from a type of mathematics called boolean algebra\n- These mathematics can be applied to many things. In our case it's applied to datasets that represent 3D surfaces.\n\n### How does boolean algebra work?\n- Logic operations with 1s or 0s\n\n0 = false/off\n1 = true/on\n\n### Logic Gates\n![[notes/attachments/Pasted image 20220912091433.png]]\n\nNOT \nSwitches the bit\n![[notes/attachments/Pasted image 20220912080159.png]]\n\nAND\ntakes two or more inputs and outputs one bit\nall inputs must be true for the output to be true\n![[notes/attachments/Pasted image 20220912080404.png]]\n\nOR\nat least one input must be true for the output to be true\n\n![[notes/attachments/Pasted image 20220912080605.png]]\n\nNOT\ninverter\n\n![[notes/attachments/Pasted image 20220912080711.png]]\n\n---\n\nBooleans and logic gates are fundimental to computing and much more. In our case they help with some important operations we can do on our meshes.\n\n![[notes/attachments/Pasted image 20220912081003.png]]\n\n\u003e[!NOTE] The important thing is that these let us create more complex shapes easily\n\n### Caveats\nIf you are working with polygonal geometry then the resulting meshes typically are not very clean.\n\n\u003eOne way to avoid this is to use volumes or SDFs and then convert those to polygonal geometry\n\n\u003e[!NOTE] This can be ok depending on you're usecases\n\n\n---\nDo a demonstration of boolean without addons\n\nthen show bool-tool\n\n---\n### Common Boolean operations for CG\n\u003e[!NOTE] These are methods of creating certain looks that more than simple boolean mathematics, instead are more an artistic method using booleans\n\n\n\n\n\n#### Slice Cuts\n![[notes/attachments/Pasted image 20220912082704.png]]\n\n1. add main and cutter object\n2. set visibility of cutter to wireframe\n3. create the boolean modifier\n4. add solidify modifier to cutter\n\t1. you can add more solidifier but made sure they are above the bevel\n\t2. \n\n\n\n\n---\n\n### Fixing Boolean Meshes\n\u003eFixing round hole in quad mesh\n\ntools\n- Merge\n- dissolve\n- retopology\n- remeshing\n\nShading issues\n\n\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/Navigation-In-Blender":{"title":"","content":"\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/Sculpting-and-Retopology-in-Blender":{"title":"Scultping and retopology lesson notes","content":"\n\n### Lesson\n\n- Assignments\n- Proposals\n- Sculpting\n- Retopology\n- Next week\n\n---\n\n### Reminders of some blender things\n- moving around\n- wireframe and face direction\n- context menus\n\n---\n## General Blender Hotkeys\n- cntrl + Tab -\u003e modes pie menu\n- Tab -\u003e switch modes\n\t- machinetools - pie menu\n\t- no machinetools -\u003e hit 1 2 3 for edge vert and face modes\n\n\n\n---\n### Sculpting\nSculpting in blender has seen a lot of improvements in the last few years. It's still no ZBrush, but it can fill most of your sculpting needs for free and you don't have to leave blender.\n\nmy video -\u003e [Intro to blender sculpt mode](https://youtu.be/c8iK4zSZjHg)\n\n\n### Resources\n[Learn to Sculpt in Blender - Quick Start Guide - YouTube](https://www.youtube.com/watch?v=Cmi0KoFtc-4)\n\n### Setup Blender for Sculpting\n\n\n1. Get into sculpting mode\n\t1. Either with the regular mode switching or \n\t2. the sculpting workspace\n\t\t1. The workspace has some specific hot-keys and things setup for sculpting so, it's probably best to use this one.\n\n\n#### Sculpt mode interface\n![[notes/3D-Modeling/attatchments/sculpting-window-areas.png]]\n\n1. Sculpting tools\n2. Tool options\n3. N-Panel\n4. Global sculpting options\n5. Context menus for sculpt-mode\n\n![[notes/3D-Modeling/attatchments/blender-sculpt-mode-upper-left-window-menus.png]]\n\n1. Mode dependent context menus\n2. Brush selection\n3. Brush dependent quick options\n\n### Sculpting Tools\n-  ![[notes/attachments/keys-color/f-key-col.png|50]] -\u003e resize brush\n- ![[notes/attachments/keys-color/cntrl-key-col.png|50]] -\u003e subtract \n- ![[notes/attachments/keys-color/shift-key-col.png|100]] -\u003e toggle smooth brush\n\n\u003e[!Important] If you have a tablet map your pen buttons to middle click and right click\n\n\n\n\n\n\n---\n## Retopology Theory\nRetopology is the the process of creating new geometry on top of a high resolution mesh in order to texture and animate the mesh.\n### Important guidelines\n- Create your edge flow in a way that follows the surface of your high-resolution mesh\n- Stick to quads as much as you can\n- Evenly space you quads as much as you can\n- Don't add extra resolution, only use as many polygons as you need to showcase the shape\n\t\t- start with a lower resolution\n\t- it's easier to go higher than lower\n- Add extra resolution in areas that will have a lot of deformation\n- make sure your edge and faceloops make sense as you progress\n\n\n\n---\n### Retopo in blender without paid or external addons\n\nMy video -\u003e [Intro to blender retopo](https://youtu.be/6QVPsSWuEpI)\n\n\n### Resources\n\n[Retopology for Beginners in Blender 2.8 - Retopo the Correct Way - YouTube](https://www.youtube.com/watch?v=CuQzPDs99yM\u0026t=1s)\n\n[(4) Retopo in Blender - Retopologizing the Face - YouTube](https://www.youtube.com/watch?v=OuFwUaS8y1I)\n\n[Retopology in Blender (Beginner Tutorial) - YouTube](https://www.youtube.com/watch?v=X2GNyEUvpD4)\n\n[(3) Use My EASY Method For Retopology In Blender ! - YouTube](https://www.youtube.com/watch?v=dqA039UOSwA)\n\n\n### Enable the following addons\n- Loop tools\n- F2\n\n\n### Setup\n1. Make base mesh non-selectable\n2. make a new mesh with a single quad and align it to a position where you want to start\n3. Enable snapping to face\n\t1. and enable project individual elements\n4. Enable always in-front for retopo-mesh in viewport display options\n5. in viewport shading enable backface culling\n6. create new material\n\t1. then go to viewport display and choose a new color for visibility\n7. Add shrink-wrap modifier and set the target to the base-mesh\n\t1. Make sure the cage is visible in the viewport\n\u003e[!NOTE] This is just for improved accuracy\n8. Add mirror modifier\n\t1. make sure clipping and merge is enabled\n9. *Optional* Add displacement modifier to push the mesh out a bit along the normal if needed\n\n\u003e[!warning] Never use subd or have it on when retopologizing\n\u003e\n\u003eYou may toggle it on and off just to check if you want but that's it.\n\u003eYou want your mesh to look as honest as you can\n\n\u003eA subd can give you a false view of your mesh\n\n### Retopology work after setup\nUse the following tools in the following ways:\n- cntrl + right-click -\u003e to extrude to where your mouse cursor is\n- g -\u003e move verts and edges\n- g+g -\u003e slide verts and edges\n- cntrl + r -\u003e add edge loop\n\t- drag after\n\t- right-mouse to snap to center\n\t- scroll middle mouse to add segments\n- e -\u003e extrude\n\n\u003e[!warning] Use as few loops as you need and no more\n\n\u003e[!NOTE] Try to get your topology to have even spacing\n\n---\n\n### F2 Addon\n Make sure it's enabled\n\nThe F2 addon is a smarter filler tool that you will probably find yourself using all the time.\n\n\u003e[!warning] This addon ships with blender so make sure you enable it!\n\n\u003e[!NOTE] This only works you have 4 edges connected to a vert\n\n\nSelect a corner vert and hit *f*\n\n---\n\n### Other Rips and Tools for Retopology\n\n- set spacebar as search menu\n- ![[notes/attachments/keys-color/alt-key-col.png|70]] + ![[notes/attachments/keys-color/z-key-col.png|50]] -\u003e enable x-ray\n- you could also add some transparency to your viewport shader\n- remap your merge hotkey to something more easily accessable\n- bridge tool\n\t- select two apposing edges and hit *f*\n\t- *F2* will do the same but you select one edge\n- Only use subd for sanity checks\n- grid-fill\n\t- search for grid-fill\n\t- you will have to tweak offset\n\t- it's in the menus\n- Soft-select / proportional editing\n\t- o -\u003e hotkey\n\t- in the menu\n\t- different types of falloffs\n- sculpt smoothing\n\t- go into sculpting\n\t- shift -\u003e smooth brush\n\t\t- or select smooth brush\n\t\t- f -\u003e change brush size\n\t- in viewport overlays enable wireframe\n\t\n\n---\n\n## Bsurfaces Workflow\nThis method is faster and uses an addon that ships with blender called bsurfaces\n\n\u003e[!important] Makes sure you enable bsurfaces in your addon preferences\n\n### Setup\n1. Enable bsurfaces\n2. Select your base-mesh\n3. press ![[notes/attachments/keys-color/n-key-col.png|50]] to bring up the n-panel\n4. navigate to the edit tab\n5. open the Bsurfaces drop-down\n6. click the *initialize (add BSurface mesh)*\n\t- This adds the shrinkwrap modifier and sets up a few other things similar to what we've already done \n7. *Optional* click *add mirror and others button*\n8. Click the *in front* checkbox to make sure the retopo mesh is always in front\n\t1. Enable back-face culling to clean up your view\n\t2. toggle the mirror modifier on and off in the viewport based on what you need\n9. *optional* change shrink-wrap modifier method to *project* to be a bit more accurate\n10. *optional* change color to your liking \n11. Now we should automatically be in *annotation mode* \n\t- This addon uses the annotation tool to help you quickly create your topology\n12. Draw your topology lines on the surface\n13. Click the *add surface* button in the n-panel window and it will create the topology.\n14. Open the pop-up window in the bottom left and tweak the options.\n\n### Ways to add geometry\n1. Add loose geometry\n\t1. make sure to deselect everything with ![[notes/attachments/keys-color/a-key-col.png|50]]+![[notes/attachments/keys-color/a-key-col.png|50]]\n\t2. ![[notes/attachments/keys-color/alt-key-col.png|70]]+![[notes/attachments/keys-color/d-key-col.png|50]] -\u003e temporarily enable annotate tool\n\t3. add strokes with the annotate tool\n\t4. click *add surface* \n\t5. tweak the options in the popup menu\n2. Add to existing geo\n\t1. select one edge\n\t2. then use  ![[notes/attachments/keys-color/alt-key-col.png|70]]+![[notes/attachments/keys-color/d-key-col.png|50]] to add strokes\n\n---\n\n## Other Tools\nThere are many tools people have built for retopology in blender. Some of the best ones are paid\n\nI frequently will use a tool called [Retopoflow](https://www.blendermarket.com/products/retopoflow)\n\nThis tool works a little more like retopology modes in other 3D packages.\n\nAnother cheaper tool that is also very powerful is [SpeedRetopo](https://www.blendermarket.com/products/speedretopo). This tool works more like BSurfaces than retoploflow\n\n#### Remeshing\nBlender now has a voxel remesher built in. You can use it in several contexts but sometimes you just want something a little better.\n\nEnter **Quad Remeshing**:\nQuad remeshing is an algorithmic method to remesh the surface of an object with quads. It's quick and dirty, but can sometimes get you good enough results.\n\n\u003e[!important] Much like auto-UVing you should only use this after you understand retopology otherwise it can be a crutch\n\n[Quad Remesher](https://exoside.com/quadremesher/)by *EXOSIDE* is an excelent quad remesher tool. There are plugins for almost all 3D packages.\n\n\u003e[!info] Exocide's quad remesher is very similar to ZBrush's ZRemesher\n\u003e\n\n[Tesselator](https://www.blendermarket.com/products/tesselator) is a cheaper quad remesher addon on the blender-market.\n\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/Shading":{"title":"Shading and Rendering in Blender","content":"\n```toc\nstyle: bullet | number | inline (default: bullet) min_depth: number (default: 0) max_depth: number (default: 6) title: string (default: undefined) allow_inconsistent_headings: boolean (default: false) delimiter: string (default: |) varied_style: boolean (default: false) \n```\n\n\n# Agenda\n1. Retopology\n2. Grease pencil refresher\n3. Shading\n4. Exercise\n\n---\n\n# Rendering\n\n## What is Rendering?\nRendering in the context of computer graphics usually refers to the process of taking some type of data and turning it into a final image.\nThis is accomplished using a large and complex stack of tools and software and hardware.\n\n\u003e The term rendering was taken from traditional art as a way to describe what the computers are doing. Namely creating images.\n\n## What are Renderers?\nRenderers are software stacks to do the hard work of taking many types of data and turning that data into an image.\nOften making use of research in many different fields, from physics, to material science and applied in computer science.\nFor example, most renderers try to approximate how physical light bounces of certain materials and how our eyes interpret that light. \n\n## Types of Renderers\nThere are many types of renderers, but in general we can lump them into two categories\n1. Path-tracers\n2. Rasterizers\nTo quickly differenciate them think of path-tracers as the type of renderer that Pixar uses and Rasterizers the renderer that game engines use.\n\n### Path-Tracers\nPath-tracers are generally trying to do things as accurately and with as much quality as possible, at the expense of speed.\n\n\u003e You could never play a game with renderman\n\nThe reason for this is that one of the foundational techniques they use is ray-tracing. This involves simulating how millions of photons bounce around the scene and react with different materials.\n\u003e[!NOTE] Because of this straightforward approach to rendering it is often paradoxically simpler to get a scene to look the way you want than with raster-engines\n\n### Rasterizers or Raster-Engines\nRaster renderers are the flipside of path-tracers. Instead of accuracy they prioritize speed. This is because these engines are usually used for things like games where you want to render 60 frames-per-second on top of your game logic and everything else happening.\nThese days raster engines are approaching the quality of path-tracers of the past and are used even in some contexts for film.\n\u003e[!NOTE] They are especially used for previs and lookdev in film.\n\n## Rendering in Blender\n\nBlender ships with two render engines.\n1. Cycles\n2. Eevee\n\nCycles is a classic path-tracing render engine, while eevee is a raster-engine.\n\n\n\n### Cycles\nCycles is a path-tracing render engine. It will take more CPU and GPU power to get a nice image, but that's not a bug, that's a feature. Path-tracers are designed to efficiently use as many resources on your computer as possible for the render.\n\n#### Setting up Cycles\n1. Go to the render settings tab in the properties window and in the *Render engine* drop-down select *Cycles* ![[notes/attachments/render-engine-selection-blender.png]]\n2. *Optional* in the render settings tab you can then choose to use GPU or CPU. If you have a good enough GPU you should always use GPU. ![[notes/attachments/gpu-cpu-cycles-settings-blender.png]]\n\t1. You will probably also have to set up how you want cycles to use the GPU.\n\t\t1. Open the blender preferences window (In the edit menu) and open the *system* menu ![[notes/attachments/GPU-settings-cycles-blender.png]]\n\t\t\t1. System menu\n\t\t\t2. Cycles render devices section\n\t\t\t3. Ways to integrate the GPU with the CPU\n\t\t\t4. Your systems hardware that can be used for rendering. Typically your CPU and GPU(s)\n\t\t2. Then select a compatible method to use your GPU with. CUDA and OptiX are the most common especially with Nvidia GPUs\n\t2. Now if you switch to shaded mode in your viewport it will use Cycles instead of workbench or eevee. ![[notes/attachments/viewport-modes-pie-menu-blender.png]] ![[notes/attachments/rendered-mode-vieport-blender.png]]\n\n### Eevee\nEevee is a raster-engine build into blender. It can get you much faster results and has almost complete feature parity with cycles. This means you can use the same material for cycles and eevee!\n\n\u003e[!NOTE] The *Material Preview* view-mode (also known as the *lookdev* mode) always uses Eevee.\n\u003e\n\u003eThis is because it's faster and uses less computer resources and so it's easier to iterate through your surfacing. \n\n\n#### Setting up Eevee\nSetting up eevee is pretty much the same as cycles. You probably won't need to actually do anything because Eevee is set by default. But if not, in your render settings just choose eevee.\n\n### General Rendering Tips\n\n\n---\n## Shading\nShading refers the way software and artists define how the surfaces should react to light and shadow.\nIn the context of 3D we do that with shaders and materials and lights.\nThis whole process can be extremely complex, so we will only cover the basics here.\n\n### Important Terminology\n- Shading -\u003e How surfaces react to light\n- Shaders\n\t- Technical Definition -\u003e Code that executes on a GPU. (This is a more *correct definition*)\n\t- General Definition in the context of this lesson -\u003e A way to define the behavior of a surface in our scene.\n\n### Set up Workspace for Shading\nOpen the shading workspace or follow the steps below.\n\n1. Split your 3D viewport window.\n\t1. Hover over the borders between the windows until your cursor turns into a double-sided arrow then right click and choose to split the window.\n\t2. Or, hover the cursor right next to the border of the window until your cursor turns into a plus symbol.\n\t3. ![[notes/attachments/split-windows-blender.png]]\n2. On the new window you just created click on the window-type dropdown\n\t- ![[notes/attachments/select-window-type-blender.png]]\n3. Then choose *shader editor*. Your windows could look something like this ![[notes/attachments/my-shading-window-layout-blender.png]]\n\nNow you're workspace is set up. There are a few other things to set up.\n\n### More Set up\n#### Node Wrangler Addon\nI recommend enabling the *Node Wrangler* addon in your preferences.\n\n\u003e[!NOTE] *Node Wrangler* comes shipped with Blender\n\n![[notes/attachments/node-wrangler-addon-enable-blender.png]]\n\nMost addons have extra options if you expand the window. And have a link to their documentation.\n\n[Node Wrangler — Blender Manual](https://docs.blender.org/manual/en/3.3/addons/node/node_wrangler.html)\n\n---\n\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/Texturing-in-Blender-and-other-CG-apps":{"title":"Texturing in Blender and Other CG Apps","content":"\n# Texturing in CG Fundamentals\n\nTextures are images. In the context of CG workflows they can be thought of as datasets. each pixel holds some kind of data that we \n\n\n\n---\n# Texture Painting in Blender\n\n\n\n\n\n---\n# Prepping Models for External Texturing Software\n\n\n\n\n\n---\n# Using Substance Painter\n\n\n\n\n\n---\n# Using Mari Painter\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/Texturing-lesson-2":{"title":"Texturing Lesson 2","content":"\n\n# Agenda\n- Assignment problems\n- Other things\n- My project\n- Blender things\n- Substance things\n\n---\n# Assignment Problems\n- UDIM vertex color bug\n\t- It's a bug, it works for me, It must have something todo with windows.\n\n\n\n---\n# Blender Stuff\n- baking\n- \n\n\n\n---\n# Substance Stuff\n- Texture Projection\n\t- triplanar\n\t- UV\n\t- other\n- Smart materials\n\t- filters\n\t- masks\n\t- generators\n- Workflows\n\t- Painting masking\n\t- painting normal maps\n\t- designer -\u003e painter\n\t- decals\n\t- brushes\n\t- shaders - textursets\n\n\n## Hotkeys\n### Painting\n- Resize =\u003e cntrl+RMB -\u003e move left/right\n- Hardness =\u003e cntrl+RMB -\u003e move up/down\n- Rotate =\u003e cntrl+LMB -\u003e move up/down\n- Flow =\u003e cntrl+LMB -\u003e move left/right\n- Straight line =\u003e Shift+LMB\n- Stabilizer =\u003e D+LMB\n- Symmetry =\u003e L\n- Brush settngs =\u003e RMB click\n![[notes/attachments/Pasted image 20221026105412.png]]\n\n\n## Layers\nThe layer panel looks like this:\n![[notes/attachments/Pasted image 20221026105516.png]]\n\nThere are two main types of layers:\n- Fill layers\n- Paint layers\n\n\n\n\n","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/Topology-Lesson-Notes":{"title":"","content":"[Bad shading](https://www.youtube.com/watch?v=qB1eg3ef5vs)\n\n### Agenda\n- Intro\n\t- this weekend\n- Assignments\n\t- pain points\n\t\t- applying modifiers\n\t\t- overlapped geo\n\t\t- [Pureref](https://www.pureref.com/)\n\t- questions\n\t- some demonstrations\n\t\t- advanced selection\n\t\t\t- ring vs lo1op\n- Topology\n\t- Important tools\n\t\t- dissolve vs delete\n\t\t- knife tool\n\t\t- slide\n\t\t- loop tools\n\t\t- \n\t- \u003efocus on film\u003c\n\t- problems\n\t\t- non-manifold geo\n\t\t\t- one edge is shared by only one polygon *or* more than two\n\t\t\t- 3D-Print addon\n\t\t\t\t- analyze geo for non-manifold meshes\n\t\t\t\t- \u003e*N-Panel* for addon options\n\t\t\t\t- [Mesh Check addon](https://pistiwique.gumroad.com/l/mesh_check_BGL_edition)\n\t\t\t\t\t- ![[notes/attachments/Pasted image 20220907102651.png]]\n\t- Edge flow\n\t- bevels ![[notes/attachments/Pasted image 20220907091048.png]]\n\t\t- everything is beveled in the real world\n\t\t- modifier vs the tool\n\t\t- levels of bevels\n\t\t- angles\n\t\t- stick with even numbers\n\t\t\t- corners!\n\t\t\t- outer to arc\n\t- Water-tight geo\n\t\t- bevels\n\t\t- *3D printing*\n\t- subdivision\n\t\t- methodology\n\t\t\t- don't rely on it\n\t\t\t\t- except sometimes in the beginning if you are smoothing you're shapes out\n\t\t\t- the point is for high-res models just for render times\n\t\t\t\t- every level is x4 geo\n\t\t- try and keep you're quads square as much as you can\n\t\t\t- for sculpt ready models\n\t\t\t- multi-res\n\t- sculpting for hard surface\n\t\t- imperfections\n\t\t- baking normals to low res\n\t\t\t- displacement vs normal\n\t\t\t\t- displacements -\u003e shadows\n\t\t\t\t- normals no shadows\n\t- Shading\n\t\t- artifacts\n\t\t- normals\n\t\t\t- direction\n\t\t\t\t- overlay\n\t\t\t\t\t- *create shorcut* ![[notes/attachments/Pasted image 20220907104801.png]]\n\t\t\t- artifacts\n\t\t\t- ! Auto-smooth\n\t\t\t\t- normal angle\n\t- UVs\n\t\t- distortion\n\n---\n\n### Film Industry Modeling Checklist \n1. Keep geo as light as possible\n2. only use quads if possible\n3. even distribution of the polygons\n4. bevel everything\n5. freeze transformations\n6. use as few parts as possible\n7. make the geometry water tight\n8. remove all non-manifold polygons\n9. make geometry sculptable\n10. no overlapping UVs, *use UDIMS*\n11. check the normals (*for shading artifacts*)\n12. Naming conventions\n\n\u003e[!NOTE] These are guidelines\n\u003e\n\u003eThey can be broken but it's important to understand them first so you know when you have an edge-case where you can bend the rules\n\n---\n### Misc blender tips\n- SHIFT+r =\u003e repeat last action\n- SHIFT+SPACE =\u003e toolshelf\n- CNTRL+ALT =\u003e ring select\n- F3 =\u003e Operator search\n\n\n---\n\n### Resources\n\n[Blender bob - modeling for VFX](https://www.youtube.com/watch?v=Nt2d0byHIPQ\u0026list=PLg8eRfEI_iOmMe1IwoZVcj8spkr7T5Hue)\n\n[Blender bob - Advanced Modeling techniques in Blender](https://www.youtube.com/watch?v=k7_V4sfsdwg\u0026list=PLg8eRfEI_iOlbfEJXKp0_B-CVkbp1kSPm)\n\n[Edge flow addon for Blender](https://github.com/BenjaminSauder/EdgeFlow/releases/tag/0.5)\n\n[Mesh Check addon](https://pistiwique.gumroad.com/l/mesh_check_BGL_edition)\n\n\n---\n\n### Assignments\n\n\u003e[!NOTE] These Should be in blender\n\nExercises\n- modeling techniques for topology\n\t- bevels\n\t- creating more geometry\n- Fixing meshes\n\t- non-manifold faces\n\t- overlapping mesh\n\t- finding hidden problems\n\t- shading errors","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Lessons/UV-lesson-plan":{"title":"","content":"# Things to go over\n1. Next week we will talk about the final project\n2. I have the rest of the semester outlined\n3. how are assignments coming\n\t1. do we need to extend the due date?\n4. UVs\n\n---\n\n### UV Mapping\n- What are UVs\n\t- coordinate systems\n\t- texture mapping\n\t- other uses\n- History of UVs\n\t- shading\n\t\t- flat, smooth, phong\n\t- projection\n\t\t- affine\n\t\t- box\n\t\t- perspective\n\t\t- etc\n\t- ","lastmodified":"2023-01-14T00:13:42.955046624Z","tags":null},"/notes/3D-Modeling/blender/Matricies-PDF":{"title":"","content":"```PDF\n{\n\t\"url\" : \"../Embeded Files/pdf/Matricies_coordinates.pdf\"\n}\n\n```","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Notes/sept-19-notes":{"title":"sept 19 notes","content":"\n- blender preferences\n\n\n\n\n### Topo assignment\n\n- Common Issues\n\t- edge flow conversions\n\t\t- ngons\n\t\t- laminate-faces\n\t\t- \u003e What methods did you use?\n\t- smooth bevel\n\t\t- ngons\n\t- **Apply topo**\n\t\t- many didn't even attempt\n\t\t- couldn't apply exercises from before to connect geometry\n\t\t- was is miscommunication on my end?\n\t\t- was it unclear?\n\t- ! **Fixing Meshes**\n\t\t- Almost everyone didn't do it\n\t\t- was it unclear?\n\t\t- was the mesh check addon not clear on how to use?\n\t\t- many people didn't even try fixing bevel artifacts\n\t\t- or attempted to fix normals\n\n---\nA recap on fixing meshes and edge flow\n\n---\n\n### UV assignment check-in\n- how are people feeling?\n- do we need more time\n- is there clarification people need?\n\n---\n## Final Project\nFor the final project you will be modeling surfacing a non-trivial prop and putting in context of 2D animated shot. Try and push yourself, and have fun!\n\n---\nTo complete the project in the next several weeks we will work on our models.\nThe lessons for each week will often coincide with where you should be at with your project.\n\n---\nThere will be additional grades during certain checkpoints of your project\nFor example (I need to nail these down still...)\n1. Final model\n2. Surfacing\n3. Rendering\n4. Compositing\n\n---\n\n### Requirements\n1. Mesh mush be Subd compatible\n2. All mesh problems must be cleaned up\n3. Must be UV'd\n\t1. UVs should be clean\n4. Topology should be mostly quads\n5. Main mesh pieces should be watertight\n6. Use as few parts as possible\n7. Freeze transforms and have local transforms make sense\n8. No non-manifold polygons\n9. Normals should make sense\n10. No normal artifacts\n\n---\n\n### Proposal\nThe proposal will include a document and video of you walking through the proposal.\n\n#### Proposal Requirements\n1.  Turn in a single page PDF document\n2. The document should have a description of the model you want to make\n\t1. sketches or example images should be included\n\t2. the model should be a hero object\n\t\t1. important prop\n\t\t2. vehicle\n\t\t3. part of the environment\n4. A description of the context\n\t- film\n\t- shot\n\t- still\n5. A description of the art direction of the final image\n\t1. with example images\n6. A description of your personal goals with this project\n\n```mermaid\ngraph TD;\n\tA--\u003eB;\n\tA--\u003eC;\n\tA--\u003eE;\n\tB--\u003eD;\n\tC--\u003eD;\n```\n","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Resources/Blender-Resources":{"title":"Blender Resources","content":"\n\nFor this course we will be using several different tools and resources to complete the lessons and learn the material.\n\n---\n## Blender.org\nIf you don't already have blender you can go to the official website and download it.\nYou can run the installer or use it as a portable application.\n\n\n[blender.org](https://www.blender.org/)\n\n\n---\n## Addons\n\nThe number one addon I use is Machin3tools. I never use blender without it these days. Luckily it's free and makes the workflow a little faster. My main use for this addon are the fast pie menus which make switching contexts much more fluid.\n[machin3tools](https://machin3.gumroad.com/l/MACHIN3tools)\n\nThe Machin3Tools Documentations\n[Machin3Tools Docs](https://machin3.io/MACHIN3tools/docs/)\n\nThe YouTube channel by the creator of the addon.\n[MACHIN3](https://www.youtube.com/channel/UC4yaFzFDILd2yAqOWRuLOvA)\n\n\u003eOther addons I use all the time.\n\u003e - HardOps [HO Docs](https://hardops-manual.readthedocs.io/en/latest/#:~:text=Hard%20Ops%20is%20a%20Hard,hard%20surface%20and%20boolean%20behavior.)\n\u003e - BatchOps [Store page](https://blendermarket.com/products/batchops)\n\u003e - KitOps [Free version](https://blendermarket.com/products/kit-ops-free)\n\u003e - MeshMachin3 [Store page](https://blendermarket.com/products/meshmachine)\n\u003e - DecalMachin3 [Store page](https://blendermarket.com/products/decalmachine)\n\u003eThere are more but all of these in combo are able to help me reduce repetition in my 3D modeling.\n\n\n### Store\nOne hub for getting blender addons is the blender market. Part of the profits made there are donated to the blender foundation. However legally any addons are supposed to be free and opensource so most can be found on GitHub.\n\n[Blender Market](https://blendermarket.com/)\n\n\n---\n## YouTube\n[Official Blender Channel](https://www.youtube.com/c/BlenderFoundation)\n[CGMatter](https://www.youtube.com/c/CGMatter)\n[Default Cube](https://www.youtube.com/c/DefaultCube)\n[Blender Guru](https://www.youtube.com/user/AndrewPPrice)\n[Ian Hubbert](https://www.youtube.com/user/mrdodobird)\n[Southern Shotty](https://www.youtube.com/channel/UCOWrbryuVEPUMSSgayuLURg)\n[Markom3D](https://www.youtube.com/channel/UCdlNVsQys37ETeTDqQqiHFQ)\n[Curtis Holt](https://www.youtube.com/channel/UCzghqpGuEmk4YdVewxA79GA)\n[Polyfjord](https://www.youtube.com/user/lotsalote)\n[Iridesium](https://www.youtube.com/channel/UCsVG9hd6Dqdj7lP-YPIgCjg)\n[Ducky3D](https://www.youtube.com/channel/UCuNhGhbemBkdflZ1FGJ0lUQ)\n[Danny Mac 3D](https://www.youtube.com/user/djmccabie)\n[Blender Fast Track](https://www.youtube.com/channel/UCsvgY1GWmJwvk3o6UeXVxAg)\n[CGGeek](https://www.youtube.com/user/Blenderfan93)\n[Stylized Station](https://www.youtube.com/channel/UC7cmH--tFhYduIshTKzQUJQ)\n[CGCookie](https://www.youtube.com/user/blendercookie)\n[Josh Gambrell](https://www.youtube.com/channel/UCXfGjwohMgPm4Ng2e1FXySw)\n[askNK](https://www.youtube.com/channel/UCHx1jeKRMi_wDAwvvhaIDYA)\n[Grant Abbitt](https://www.youtube.com/user/mediagabbitt)\n[Flipped Normals](https://www.youtube.com/user/FlippedNormalsTuts)\n[MACHIN3](https://www.youtube.com/channel/UC4yaFzFDILd2yAqOWRuLOvA)\n[Gleb Alexadrov](https://www.youtube.com/user/GlebAlexandrov)\n[Josh Gambrell](https://www.youtube.com/channel/UCXfGjwohMgPm4Ng2e1FXySw)\n[Ponte Ryuuru](https://www.youtube.com/channel/UCEOVGZ2rpLhR7gSPvaexxxQ)\n[MX2](https://www.youtube.com/user/masterxeon1001)\n[Bad Normals](https://www.youtube.com/channel/UCvigl2g67gl18hJgFex-3zg)\n\n\n---\n# Paid Resources\nAlthough there are a lot of great free resources, there are a lot of excellent paid sources as well.\n\n\n## Blender Cloud\nThe first paid resource I'm going to recommend is blender cloud. Because the money goes to support blender development, and the trainings and resources are straight from blender itself.\n\n[Blender Cloud](https://studio.blender.org/welcome/)\n\n---\n# HDRIs and Textures\n\n#### Free\n[PolyHaven](https://polyhaven.com/)\n[Free HDR Skies](https://hdrmaps.com/freebies/)\n[AmbientCG](https://ambientcg.com/)\n[sketchuptextures](https://www.sketchuptextureclub.com/)\n[FreeStockTextures](https://freestocktextures.com/)\n[Texture Ninja](https://texture.ninja/)\n[3DTextures.me](https://3dtextures.me/)\n[Texturelib](http://texturelib.com/)\n[Wild Textures](https://www.wildtextures.com/)\n[Pixar 128](https://renderman.pixar.com/pixar-one-twenty-eight)\n[3DXo](https://www.3dxo.com/textures)\n[Texturer](http://texturer.com/)\n[arrowway](https://www.arroway-textures.ch/)\n[Enviornment Textures](https://www.environment-textures.com/photos/search/query/free-textures/thumb/small/page/1)\n[Free Textures](https://freetextures.3dtotal.com/)\n\n#### Paid\n\n[Quixel Megascans](https://quixel.com/megascans)\n[Blender Quixel Plugin](https://quixel.com/plugins/)\n[Poliigon](https://www.poliigon.com/)\n[Textures.com](https://www.textures.com/)\n\n\n## Substance\n[Free Substance Assets](https://substance3d.adobe.com/community-assets)\n","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Coordinate-Handedness":{"title":"{{title}}","content":"\n### References:\n\n1.  Andy Johnson's CS 488 Course Notes, Lecture 5\n2.  Foley, Van Dam, Feiner, and Hughes, \"Computer Graphics - Principles and Practice\", Chapter ??\n3.  Woo et. al., OpenGL Programming Guide\n\n### Coordinate System \"Handedness\"\n\nIn a 2-D coordinate system the X axis generally points from left to right, and the Y axis generally points from bottom to top. ( Although some windowing systems will have their Y coordinates going from top to bottom. )\n\nWhen we add the third coordinate, Z, we have a choice as to whether the Z-axis points into the screen or out of the screen:\n\n![](https://www.cs.uic.edu/~jbell/CourseNotes/ComputerGraphics/diagrams/coord.gif)\n\nRight Hand Coordinate System (RHS)  \nZ is coming out of the page  \n\nCounterclockwise rotations are positive  \nif we rotate about the X axis : the rotation Y-\u003eZ is positive  \nif we rotate about the Y axis : the rotation Z-\u003eX is positive  \nif we rotate about the Z axis : the rotation X-\u003eY is positive  \n\nLeft Hand Coordinate System (LHS)  \nZ is going into the page  \n\nClockwise rotations are positive  \nif we rotate about the X axis : the rotation Y-\u003eZ is positive  \nif we rotate about the Y axis : the rotation Z-\u003eX is positive  \nif we rotate about the Z axis : the rotation X-\u003eY is positive  \n\nso basically its the same thing ...\n\nThe important thing to note is what coordinate system is being used by the package you are working with, both for the creation of models and the displaying of them. Also note that if the two packages use different coordinate systems, then the model(s) may need to be inverted in some fashion when they are loaded in for viewing.\n\nOpenGL generally uses a right-hand coordinate system.\n\n### Multiple Coordinate Systems in a Graphics Program\n\nIn a typical graphics program, we may need to deal with a number of different coordinate systems, and a good part of the work ( and the cause of many headaches ) is the conversion of coordinates from one system to another. We'll learn about the conversion process a little later, but in the meantime, here is a list of some of the coordinate systems you may encounter:\n\n-   **World Coordinate System** - Also known as the \"universe\" or sometimes \"model\" coordinate system. This is the base reference system for the overall model, ( generally in 3D ), to which all other model coordinates relate.\n-   **Object Coordinate System** - When each object is created in a modelling program, the modeller must pick some point to be the origin of that particular object, and the orientation of the object to a set of model axes. For example when modelling a desk, the modeller might choose a point in the center of the desk top for the origin, or the point in the center of the desk at floor level, or the bottom of one of the legs of the desk. When this object is moved to a point in the world coordinate system, it is really the origin of the object ( in object coordinate system ) that is moved to the new world coordinates, and all other points in the model are moved by an equal amount. Note that while the origin of the object model is usually somewhere on the model itself, it does not have to be. For example, the origin of a doughnut or a tire might be in the vacant space in the middle.\n-   **Hierarchical Coordinate Systems** - Sometimes objects in a scene are arranged in a hierarchy, so that the \"position\" of one object in the hierarchy is relative to its parent in the hierarchy scheme, rather than to the world coordinate system. For example, a hand may be positioned relative to an arm, and the arm relative to the torso. When the arm moves, the hand moves with it, and when the torso moves, all three objects move together.\n-   **Viewpoint Coordinate System** - Also known as the \"camera\" coordinate system. This coordinate system is based upon the viewpoint of the observer, and changes as they change their view. Moving an object \"forward\" in this coordinate system moves it along the direction that the viewer happens to be looking at the time.\n-   **Model Window Coordinate System** - Not to be confused with desktop windowing systems ( MS Windows or X Windows ), this coordinate system refers to the subset of the overall model world that is to be displayed on the screen. Depending on the viewing parameters selected, the model window may be rectalinear or a distorted viewing frustrum of some kind.\n-   **Screen Coordinate System** - This 2D coordinate system refers to the physical coordinates of the pixels on the computer screen, based on current screen resolution. ( E.g. 1024x768 )\n-   **Viewport Coordinate System** - This coordinate system refers to a subset of the screen space where the model window is to be displayed. Typically the viewport will occupy the entire screen window, or even the entire screen, but it is also possible to set up multiple smaller viewports within a single screen window.\n\n\n\nhttps://www.cs.uic.edu/~jbell/CourseNotes/ComputerGraphics/Coordinates.html","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/Coordinate-Systems-scratchpixel":{"title":"Coordinate Systems - Scratchpixel","content":"\n\nGeometry\n\n\n## Introducing Coordinate Systems\n\nCoordinate systems play an essential role in the graphics pipeline. They are not complicated; coordinates are one of the first things we learn in school when we study geometry. However, learning a few things about them now will make it easier to understand matrices.\n\nIn the previous chapter we mentioned that points and vectors (as used in CG) are represented with three real numbers. But what do these numbers mean? Each number represents a **signed distance** from the origin of a line to the position of the point on that line. For example, consider drawing a line and putting a mark in the middle. We will call this mark the **origin**. This mark becomes our point of reference: the position from which we will measure the distance to any other point. If a point lies to the right side of the origin, we take the signed distance to be greater than zero (that is, positive something). On the other hand, if it is on the left side of the origin, the value will be negative (negative something).\n\nWe assume the line goes to infinity on either side of the origin. Therefore, in theory, the distance between two points on that line could be infinitely large. However, this presents a problem: in the world of computers, there is a practical limit to the value you can represent for a number (which depends on the number of bits we used to encode that number). Thankfully, this maximum value is usually big enough to build most of the 3D scenes we will want to render; all the values we deal with in the world of CG are bounded anyway. With that said, let's not worry too much about this computational limitation for now.\n\nNow that we have a line and an origin we add some additional marks at a regular interval (unit length) on each side of the origin, effectively turning our line into a ruler. With the ruler established, we can simply use it to measure the **coordinate** of a point from the origin (\"coordinate\" being another way of saying the signed distance from the origin to the point). In computer graphics and mathematics, the ruler defines what we call an **axis**.\n\n![](https://www.scratchapixel.com/images/upload/geometry/oneaxis.png?)\n\nFigure 1: the position of a point is defined as the (signed) distance from the point's position to the origin of the axis. The axis extends from minus to plus infinity.\n\nIf the point we are interested in is not on the axis, we can still find the point's coordinate by projecting it onto the ruler using a vertical line (This is assuming the ruler is horizontal. In general, we use a line perpendicular to the ruler). The distance from the origin to the the intersection of this vertical line with the ruler is the coordinate of that point with respect to that axis. We have just learned to define the coordinate of a point along an axis.\n\n## Dimensions and Cartesian Coordinate Systems\n\nLet's call the horizontal ruler from before the **x-axis.** We can draw another ruler perpendicular to the x-axis at its origin. We will call this the **y-axis**. For any point, we can determine the both the x- and y-coordinate by drawing perpendicular lines to each axis and measuring the distance from those intersections to the origin (this is the same processes described above). We can now find two numbers, or two coordinates, for an arbitrary point: one for the x-axis, and one for the y-axis. Thus, by placing two axes, we have defined a two dimensional space called a plane.\n\nFor example, consider drawing a number of points on a piece of paper. This piece of paper occupies a two dimensional space, i.e. a plane. We can again draw two axes: one for each dimension. If we use the same x- and y-axes to measure each point drawn on that paper, these two axes are said to define a coordinate system. If these two rulers are perpendicular to each other, they define what we call a **Cartesian coordinate system**.\n\nNote that we commonly use a concise notation called an **ordered pair** to write the coordinates of a point. An ordered pair is simply two numbers separated by a comma. For Cartesian coordinate systems, it is customary to first write the horizontal x-coordinate followed by the vertical y-coordinate. For example, we would write (2.5, 2.25) for a point whose x-coordinate was 2.5 and y-coordinate was 2.25 (see Figure 2). However, do not let this intimidate you. Remember, we can always interpret these ordered pairs as two signed distances: the point is 2.5 units right of and 2.25 units up from the origin. We will use this way of writing a point's coordinates a lot in the coming lessons.\n\n![](https://www.scratchapixel.com/images/upload/geometry/axis2d.png?)\n\nFigure 2: a 2D Cartesian coordinate system is defined by two perpendicular (right angle) axes (represented by the grey square in the middle of the figure). Each axis is divided into regular intervals of unit length. Computing the coordinates of a 2D point is simply an extension of the 1D case (in Figure 1) to the 2D case. We take signed distances from the point to the origin of the coordinate system in both x and y.\n\nAt this point in the lesson, we now know how to make a two-dimensional Cartesian coordinate system and define the coordinates of a 2D point in that coordinate system. Note that the coordinates of points defined in a coordinate system are unique. This means that the same point cannot be represented by two different sets of coordinates simultaneously in one system. However it is important to note that we are free to choose any coordinate system that we please.\n\nIn fact, we can chose to define infinitely many such coordinate systems in a plane. For the sake of simplicity, let's assume that we drew just two such Cartesian coordinate systems on a sheet of paper. On this paper we place one point. The coordinates of that point will be different depending on which of the two coordinate systems we consider. For instance, in Figure 3, point P has coordinates (-1, 3) in coordinate system A and (2, 4) in coordinate system B. However this really is the same point; the dot is in the same place as when we first drew it.\n\n![](https://www.scratchapixel.com/images/upload/geometry/pointincoordsystems.png?)\n\nFigure 3: the same point is defined in two different coordinates systems. We can transform the point in the red coordinate system (A) to the green coordinate system (B) by adding the values (3, 1) to its coordinates.\n\n![](https://www.scratchapixel.com/images/upload/geometry/scalepoint.png?)\n\nFigure 4: scaling (shown in blue) or translating a point (shown in green) modifies its coordinates. A scale is a multiplication of the point's coordinates by some value. A translation is an addition of some values to the point's coordinates.\n\nSo if you know the coordinates of P in coordinate system A, what do you need to do to find the coordinate of the same point in another coordinate system, B? This represents an extremely important operation in CG (and mathematics in general). We will soon learn why along with how to find the map which translates the coordinates of a point from one coordinate system to another (check the chapter [Transforming Points and Vectors](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/transforming-points-and-vectors)).\n\nFor now, let's just consider the previous example in Figure 3. Note that by adding the values (3, 1) coordinate-wise (that is, add the two x-axis values and then add the two y-axis values independently) to the coordinates (-1, 3) leads to the coordinate (2, 4). So adding (3, 1) to the coordinates of P in A yields the coordinates of P in B. Adding (-3, -1) to (2, 4) yields (-1, 3). This takes coordinates of P in B to coordinates of P in A. It is important to note that (-3, -1) is just the additive inverse (or the opposite) of (3, 1). This is intuitive as they can be thought of as altering a point's coordinates in opposite directions: adding (3, 1) maps in one direction, from A to B, whereas (-3, -1) maps in the opposite, inverse direction from B to A.\n\nAnother common operation is to move the point in the coordinate system A to another location in the same coordinate system. This is called a **translation** and is certainly one of the most basic operation you can do on points. Note that all sorts of other linear operators can be applied to point coordinates. A multiplication of a real number to the coordinates of a point produces a **scale** (figure 4). A scale moves P along the line that is going through the point and the origin (because when we are transforming a point we are actually transforming the vector going from the origin to the point). More on all of this later.\n\n## The Third Dimension\n\nThe 3D coordinate system is a simple extension of the 2D case. We will just be adding a third axis orthogonal to both the x- and y-axis called the z-axis (representative of depth). The x-axis points to the right, the y-axis points up and the z-axis points backward (it comes out the screen in a way when the x-axis points to the right). While other conventions can be used (see the following paragraph), we will only use this one throughout Scratchapixel. In Geometry, this 3D coordinate system defines what is more formally known as **Euclidean space**.\n\n![](https://www.scratchapixel.com/images/upload/geometry/coordsys3d.png?)\n\nFigure 5: a three dimensional coordinate system. A point is defined by three coordinates, one for each axis.\n\nWe conclude this portion of the chapter with a paragraph for those of you interested in a more formal definition of a coordinate system. In linear algebra, the three axes (one or two in the 1D and 2D cases respectively) form what we call the **basis** of that coordinate system. A basis is a set of linearly independent vectors that, in a linear combination, can represent every vector (or point) in a given vector space (the coordinate system). Vectors from a set are said to be linearly independent if and only if none of the vectors in the set can be written as a linear combination of other vectors in that set. **Change of basis**, or change of coordinate system, is a common operation in mathematics and the graphics pipeline.\n\n## Left-Handed vs Right-Handed Coordinate Systems\n\nUnfortunately, due to various conventions concerning handedness, coordinate systems are not that simple. The problem can be illustrated in the following figure: when the up and forward vectors are oriented in the same way (the forward vector is pointing away from the plane defined by the screen), an appropriate \"right\" vector can either point to the left or to the right.\n\n![](https://www.scratchapixel.com/images/upload/geometry/rhlh.png?)\n\nTo differentiate the two conventions, we call the first coordinate system the **left-hand coordinate system**, and the other, the **right-hand coordinate system**. The left- and right-hand rule was introduced by physicist John Ambrose Fleming as a way of easily differentiating the two conventions.\n\n![](https://www.scratchapixel.com/images/upload/geometry/rhcoordsys.gif?)\n\nFigure 6: typically the right-hand coordinate system is represented with the right axis (in red) pointing to the right, and the forward vector (blue) pointing away from the screen.\n\nWhy is it called handedness? If you take your left and right hands and orient your fingers as shown in the figure, you will see that your fingers indicate the orientation of the **right**, **up** and **forward vector** (also sometimes called the down vector) for both coordinate systems. Fittingly, your left hand orients the left-hand coordinate system while your right hand orients the right-hand coordinate system. However, in the case of the right-hand system, we will turn the coordinate system around so that the right vector does indeed visually point to the right. When we do that, the down vector ends up pointing away from the screen. This rotation is illustrated in Figure 6.\n\nRemember that the **middle finger (the middle finger not the index) — always — represents the right vector** when using this mnemonic device for checking the coordinate handedness. First orient the middle finger on either of your hands along what you consider to be the right vector and check if the other two fingers point in the same direction as the other two axes. From there, you shall see immediately if it is a left- or right-hand coordinate system.\n\nThe handedness of the coordinate system also plays a role in the orientation of normals computed from the edges of polygonal faces. If the orientation is right-handed, then polygons whose vertices were specified in **counterclockwise** order will be front-facing. This will be explained in the lesson on rendering polygonal objects.\n\n## The Right, Up and Forward Vectors\n\n![](https://www.scratchapixel.com/images/upload/geometry/zaxis.png?)\n\nFigure 7: the most popular convention used in CG defines the up vector as being the y-axis (a). However it's not uncommon to find in many CG related papers (particularly those related to shading techniques) coordinate systems where the up vector is defined as the z-axis (b). Some authors claim that this convention comes from the notation commonly used in the fields of physics and mathematics. Both coordinate systems as drawn in this figure are right handed.\n\nThe Cartesian coordinate system is only defined by three perpendicular vectors of unit length. As far as the mathematical notation is concerned, **this coordinate system does not convey anything about what these three axes actually mean**. The developer is the one that decides how these axes should be interpreted. It is thus very important to make a clear distinction between the handedness the coordinate system and the conventions used to label the corresponding axes.\n\nIs the up vector called the z- or y-axis? Let's take the convention used in Figure 7b and assume that the x-axis is the right vector. What can we say about the handedness of this coordinate system? It's a right-handed coordinate system (orient the middle finger of your right hand along the x-axis and check if the other two fingers points along the up and forward vector). As you can see, all we do is to take either a right- or left-handed coordinate system and label the axes x, y and z. The naming convention (how you label these axes) has nothing to do with the handedness of the coordinate system. It is really crucial to understand this difference. Many people often think that because some system uses a convention where the up vector is **labeled** the z-axis (instead of the more popular y-axis convention), one system is left-handed and the other is right-handed. Not at all.\n\n**The only thing that defines the handedness of the coordinate system is the orientation of the left (or right) vector relative to the up and forward vectors, regardless of what these axes represent.** Handedness and conventions regarding the names of the axes are two different things.\n\nIt is also critically important to know which convention is used for the coordinate system when dealing with a renderer or any other 3D application. At present, the standard in the industry tends to be the right-hand XYZ coordinate system where x points to the right, y is up and z is outward (coming out of the screen). Programs and 3D APIs such as Maya and OpenGL use a right-hand coordinate system, while DirectX, pbrt and PRMan use a left-hand coordinate system. Note that both Maya and PRMan use a coordinate system in which the up vector is called the y-axis and the forward vector is called the z-axis. Essentially, this means that the z-coordinate of 3 for a point in one system is -3 in the other. For this reason, we potentially need to reverse the sign of an object's z-coordinates when the geometry is exported to the renderer. The choice of coordinate system handedness also plays a critical role when it comes to rotation and the cross product of two vectors. We will talk about this more in the next few chapters. It's actually easy enough (but painful) to go from one coordinate system to another. All that is needed is to scale the point coordinates and the camera-to-world matrix by (1, 1, -1).\n\nFor now, just note that **Scratchapixel uses a right-hand coordinate system** mainly to stay compatible with Maya and also because it seems to have become the de-facto industry standard anyway (we wished everybody really was using the same conventions).\n\n## The World Coordinate System\n\nWe have learned that points' and vectors' coordinates relate to the origin of a Cartesian coordinate system defined by three perpendicular unit vectors (that make up a basis). We have also explained that we can create as many coordinate systems as we want and that points and vectors have unique coordinates within each one of these coordinate systems. However, in most 3d applications, each different type of coordinate system is defined with respect to a master coordinate system called the **world** coordinate system. It defines the origin and the main x-, y- and z-axes from which all other coordinate systems are defined. The world coordinate system is maybe the most important of all the distinct coordinate systems in the rendering pipeline. These include the object, local (used in shading), camera and screen coordinate systems. We will be explain all of these as we go along.\n\n## Things We Need To Remember\n\nWe realise that most readers (if not all) do not need to have these concepts explained. However, what is important here is not so much knowledge of basic geometry but a comfort with the right terminology used throughout pretty much all CG literature. In this chapter, the terms of importance are **coordinates**, **axes** and the **Cartesian coordinate system**. We also have introduced the concept of linear operators (scale and translate) to transform points, or more correctly, vectors. The most important concepts to remember from that chapter are that points' coordinates relate to a coordinate system, a multitude of coordinate systems can be defined, and that points have unique coordinates in each of these coordinate systems. Being able to figure out whether the coordinate system you will be using (either in your program or in the API you will be using to render images) is left- or right-handed is also of great importance. It is important to not mix the handedness of a coordinate system with the convention used for the labeling of the axes.","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/Geometry-CPP-anotated":{"title":"{{title}}","content":"\nThis program illustrates how the concept of vector and matrix can be implemented in C++. This is a light version of the implementation. It contains the most essential methods to manipulate vectors and matrices. It should be enough for most projects. Vectors and matrices are really the alphabet as we said in the lesson of any graphics application. It's really important you feel confortable with these techniques especially with the concepts of normalizing vectors, computing their length, computing the dot and cross products of two vectors, and the point- and vector-matrix multiplication (and knowing the difference between the two).\n\nInstructions to compile this program:  \nc++ geometry.cpp -o geometry -std=c++11\n\n```cpp\n#include \u003ccstdlib\u003e  \n#include \u003ccstdio\u003e  \n#include \u003ciostream\u003e  \n#include \u003ciomanip\u003e  \n```  \n\nImplementation of a generic vector class - it will be used to deal with 3D points, vectors and normals. The class is implemented as a template. While it may complicate the code a bit, it gives us the flexibility later, to specialize the type of the coordinates into anything we want. For example: Vec3f if we want the coordinates to be floats or Vec3i if we want the coordinates to be integers. Vec3 is a standard/common way of naming vectors, points, etc. The OpenEXR and Autodesk libraries use this convention for instance.\n\n```cpp\ntemplate\u003ctypename T\u003e  \n**class** Vec3  \n{  \n\t**public**:  \n\tVec3() : x(0), y(0), z(0) {}  \n\tVec3(T xx) : x(xx), y(xx), z(xx) {}  \n\tVec3(T xx, T yy, T zz) : x(xx), y(yy), z(zz) {}  \n\tVec3 operator + (**const** Vec3 \u0026v) **const**  \n\t{ **return** Vec3(x + v.x, y + v.y, z + v.z); }  \n\tVec3 operator - (**const** Vec3 \u0026v) **const**  \n\t{ **return** Vec3(x - v.x, y - v.y, z - v.z); }  \n\tVec3 operator * (**const** T \u0026r) **const**  \n\t{ **return** Vec3(x * r, y * r, z * r); }  \n\tT dotProduct(**const** Vec3\u003cT\u003e \u0026v) **const**  \n\t{ **return** x * v.x + y * v.y + z * v.z; }  \n\tT crossProduct(**const** Vec3\u003cT\u003e \u0026v) **const**  \n\t{ **return** Vec3\u003cT\u003e(y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x);\n}  \nT norm() **const**  \n{ **return** x * x + y * y + z * z; }  \nT length() **const**  \n{ **return** sqrt(norm()); }  \n```\nThe next two operators are sometimes called access operators or accessors. The Vec coordinates can be accessed that way v[0], v[1], v[2], rather than using the more traditional form v.x, v.y, v.z. This useful when vectors are used in loops: the coordinates can be accessed with the loop index (e.g. v[i]).\n\n```cpp\n**const** T\u0026 operator [] (uint8_t i) **const** { **return** (\u0026x)[i]; }  \nT\u0026 operator [] (uint8_t i) { **return** (\u0026x)[i]; }  \nVec3\u0026 normalize()  \n{  \n\tT n = norm();  \n\t**if** (n \u003e 0) {  \n\tT factor = 1 / sqrt(n);  \n\tx *= factor, y *= factor, z *= factor;  \n}  \n  \n**return** *this;  \n}  \n  \nfriend std::ostream\u0026 operator \u003c\u003c (std::ostream \u0026s, **const** Vec3\u003cT\u003e \u0026v)  \n{  \n\t**return** s \u003c\u003c '(' \u003c\u003c v.x \u003c\u003c ' ' \u003c\u003c v.y \u003c\u003c ' ' \u003c\u003c v.z \u003c\u003c ')';  \n}  \n  \nT x, y, z;  \n};  \n```\n\nNow you can specialize the class. We are just showing two examples here. In your code you can declare a vector either that way: ``Vec3\u003cfloat\u003e`` a, or that way Vec3f a\n```cpp\ntypedef Vec3\u003cfloat\u003e Vec3f;  \ntypedef Vec3\u003cint\u003e Vec3i;  \n\n```\nImplementation of a generic 4x4 Matrix class - Same thing here than with the Vec3 class. It uses a template which is maybe less useful than with vectors but it can be used to define the coefficients of the matrix to be either floats (the most case) or doubles depending on our needs. To use you can either write: ``Matrix44\u003cfloat\u003e`` m; or: Matrix44f m;\n\n```cpp\n\ntemplate\u003ctypename T\u003e  \n**class** Matrix44  \n{  \n**public**:  \n  \nT x[4][4] = {{1,0,0,0},{0,1,0,0},{0,0,1,0},{0,0,0,1}};  \n  \nMatrix44() {}  \n  \nMatrix44 (T a, T b, T c, T d, T e, T f, T g, T h,  \nT i, T j, T k, T l, T m, T n, T o, T p)  \n{  \n\tx[0][0] = a;  \n\tx[0][1] = b;  \n\tx[0][2] = c;  \n\tx[0][3] = d;  \n\tx[1][0] = e;  \n\tx[1][1] = f;  \n\tx[1][2] = g;  \n\tx[1][3] = h;  \n\tx[2][0] = i;  \n\tx[2][1] = j;  \n\tx[2][2] = k;  \n\tx[2][3] = l;  \n\tx[3][0] = m;  \n\tx[3][1] = n;  \n\tx[3][2] = o;  \n\tx[3][3] = p;  \n}  \n  \n**const** T* operator [] (uint8_t i) **const** { **return** x[i]; }  \nT* operator [] (uint8_t i) { **return** x[i]; }  \n  \n// Multiply the current matrix with another matrix (rhs)  \nMatrix44 operator * (**const** Matrix44\u0026 v) **const**  \n{  \n\tMatrix44 tmp;  \n\tmultiply (*this, v, tmp);  \n\n\t**return** tmp;  \n}  \n```\n\nTo make it easier to understand how a matrix multiplication works, the fragment of code included within the #if-#else statement, show how this works if you were to iterate over the coefficients of the resulting matrix (a). However you will often see this multiplication being done using the code contained within the #else-#end statement. It is exactly the same as the first fragment only we have litteraly written down as a series of operations what would actually result from executing the two for() loops contained in the first fragment. It is supposed to be faster, however considering matrix multiplicatin is not necessarily that common, this is probably not super useful nor really necessary (but nice to have -- and it gives you an example of how it can be done, as this how you will this operation implemented in most libraries).\n\n```cpp\nstatic void multiply(**const** Matrix44\u003cT\u003e \u0026a, **const** Matrix44\u0026 b, Matrix44 \u0026c)  \n{  \n\t#if 0  \n\t**for** (uint8_t i = 0; i \u003c 4; ++i) {  \n\t**for** (uint8_t j = 0; j \u003c 4; ++j) {  \n\tc[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j] +  \n\ta[i][2] * b[2][j] + a[i][3] * b[3][j];  \n}  \n}  \n\t#else  \n\t// A restric qualified pointer (or reference) is basically a promise  \n\t// to the compiler that for the scope of the pointer, the target of the  \n\t// pointer will only be accessed through that pointer (and pointers  \n\t// copied from it.  \n\t**const** T * __restrict ap = \u0026a.x[0][0];  \n\t**const** T * __restrict bp = \u0026b.x[0][0];  \n\tT * __restrict cp = \u0026c.x[0][0];  \n\n\tT a0, a1, a2, a3;  \n\n\ta0 = ap[0];  \n\ta1 = ap[1];  \n\ta2 = ap[2];  \n\ta3 = ap[3];  \n\n\tcp[0] = a0 * bp[0] + a1 * bp[4] + a2 * bp[8] + a3 * bp[12];  \n\tcp[1] = a0 * bp[1] + a1 * bp[5] + a2 * bp[9] + a3 * bp[13];  \n\tcp[2] = a0 * bp[2] + a1 * bp[6] + a2 * bp[10] + a3 * bp[14];  \n\tcp[3] = a0 * bp[3] + a1 * bp[7] + a2 * bp[11] + a3 * bp[15];  \n\n\ta0 = ap[4];  \n\ta1 = ap[5];  \n\ta2 = ap[6];  \n\ta3 = ap[7];  \n\n\tcp[4] = a0 * bp[0] + a1 * bp[4] + a2 * bp[8] + a3 * bp[12];  \n\tcp[5] = a0 * bp[1] + a1 * bp[5] + a2 * bp[9] + a3 * bp[13];  \n\tcp[6] = a0 * bp[2] + a1 * bp[6] + a2 * bp[10] + a3 * bp[14];  \n\tcp[7] = a0 * bp[3] + a1 * bp[7] + a2 * bp[11] + a3 * bp[15];  \n\n\ta0 = ap[8];  \n\ta1 = ap[9];  \n\ta2 = ap[10];  \n\ta3 = ap[11];  \n\n\tcp[8] = a0 * bp[0] + a1 * bp[4] + a2 * bp[8] + a3 * bp[12];  \n\tcp[9] = a0 * bp[1] + a1 * bp[5] + a2 * bp[9] + a3 * bp[13];  \n\tcp[10] = a0 * bp[2] + a1 * bp[6] + a2 * bp[10] + a3 * bp[14];  \n\tcp[11] = a0 * bp[3] + a1 * bp[7] + a2 * bp[11] + a3 * bp[15];  \n\n\ta0 = ap[12];  \n\ta1 = ap[13];  \n\ta2 = ap[14];  \n\ta3 = ap[15];  \n\n\tcp[12] = a0 * bp[0] + a1 * bp[4] + a2 * bp[8] + a3 * bp[12];  \n\tcp[13] = a0 * bp[1] + a1 * bp[5] + a2 * bp[9] + a3 * bp[13];  \n\tcp[14] = a0 * bp[2] + a1 * bp[6] + a2 * bp[10] + a3 * bp[14];  \n\tcp[15] = a0 * bp[3] + a1 * bp[7] + a2 * bp[11] + a3 * bp[15];  \n\t#endif  \n}  \n  \n// \\brief return a transposed copy of the current matrix as a new matrix  \nMatrix44 transposed() **const**  \n{  \n\t#if 0  \n\tMatrix44 t;  \n\t**for** (uint8_t i = 0; i \u003c 4; ++i) {  \n\t**for** (uint8_t j = 0; j \u003c 4; ++j) {  \n\tt[i][j] = x[j][i];  \n}  \n}  \n  \n\t**return** t;  \n\t#else  \n\t**return** Matrix44 (x[0][0],  \n\tx[1][0],  \n\tx[2][0],  \n\tx[3][0],  \n\tx[0][1],  \n\tx[1][1],  \n\tx[2][1],  \n\tx[3][1],  \n\tx[0][2],  \n\tx[1][2],  \n\tx[2][2],  \n\tx[3][2],  \n\tx[0][3],  \n\tx[1][3],  \n\tx[2][3],  \n\tx[3][3]);  \n\t#endif  \n}  \n  \n// \\brief transpose itself  \nMatrix44\u0026 transpose ()  \n{  \n\tMatrix44 tmp (x[0][0],  \n\tx[1][0],  \n\tx[2][0],  \n\tx[3][0],  \n\tx[0][1],  \n\tx[1][1],  \n\tx[2][1],  \n\tx[3][1],  \n\tx[0][2],  \n\tx[1][2],  \n\tx[2][2],  \n\tx[3][2],  \n\tx[0][3],  \n\tx[1][3],  \n\tx[2][3],  \n\tx[3][3]);  \n\t*this = tmp;  \n\n\t**return** *this;  \n}  \n  \n```\nThis method needs to be used for point-matrix multiplication. Keep in mind we don't make the distinction between points and vectors at least from a programming point of view, as both (as well as normals) are declared as Vec3. However, mathematically they need to be treated differently. Points can be translated when translation for vectors is meaningless. Furthermore, points are implicitly be considered as having homogeneous coordinates. Thus the w coordinates needs to be computed and to convert the coordinates from homogeneous back to Cartesian coordinates, we need to divided x, y z by w. The coordinate w is more often than not equals to 1, but it can be different than 1 especially when the matrix is projective matrix (perspective projection matrix).\n\n```cpp\ntemplate\u003ctypename S\u003e  \nvoid multVecMatrix(**const** Vec3\u003cS\u003e \u0026src, Vec3\u003cS\u003e \u0026dst) **const**  \n{  \n\tS a, b, c, w;  \n\n\ta = src[0] * x[0][0] + src[1] * x[1][0] + src[2] * x[2][0] + x[3][0];  \n\tb = src[0] * x[0][1] + src[1] * x[1][1] + src[2] * x[2][1] + x[3][1];  \n\tc = src[0] * x[0][2] + src[1] * x[1][2] + src[2] * x[2][2] + x[3][2];  \n\tw = src[0] * x[0][3] + src[1] * x[1][3] + src[2] * x[2][3] + x[3][3];  \n\n\tdst.x = a / w;  \n\tdst.y = b / w;  \n\tdst.z = c / w;  \n}  \n```  \n\nThis method needs to be used for vector-matrix multiplication. Look at the differences with the previous method (to compute a point-matrix multiplication). We don't use the coefficients in the matrix that account for translation (x[3][0], x[3][1], x[3][2]) and we don't compute w.\n\n```cpp\ntemplate\u003ctypename S\u003e  \nvoid multDirMatrix(**const** Vec3\u003cS\u003e \u0026src, Vec3\u003cS\u003e \u0026dst) **const**  \n{  \n\tS a, b, c;  \n\n\ta = src[0] * x[0][0] + src[1] * x[1][0] + src[2] * x[2][0];  \n\tb = src[0] * x[0][1] + src[1] * x[1][1] + src[2] * x[2][1];  \n\tc = src[0] * x[0][2] + src[1] * x[1][2] + src[2] * x[2][2];  \n\n\tdst.x = a;  \n\tdst.y = b;  \n\tdst.z = c;  \n}  \n```  \n\nCompute the inverse of the matrix using the Gauss-Jordan (or reduced row) elimination method. We didn't explain in the lesson on Geometry how the inverse of matrix can be found. Don't worry at this point if you don't understand how this works. But we will need to be able to compute the inverse of matrices in the first lessons of the \"Foundation of 3D Rendering\" section, which is why we've added this code. For now, you can just use it and rely on it for doing what it's supposed to do. If you want to learn how this works though, check the lesson on called Matrix Inverse in the \"Mathematics and Physics of Computer Graphics\" section.\n\n```cpp\nMatrix44 inverse()  \n{  \n\t**int** i, j, k;  \n\tMatrix44 s;  \n\tMatrix44 t (*this);  \n\n\t// Forward elimination  \n\t**for** (i = 0; i \u003c 3 ; i++) {  \n\t**int** pivot = i;  \n\n\tT pivotsize = t[i][i];  \n\n\t**if** (pivotsize \u003c 0)  \n\tpivotsize = -pivotsize;  \n\n\t**for** (j = i + 1; j \u003c 4; j++) {  \n\tT tmp = t[j][i];  \n\n\t**if** (tmp \u003c 0)  \n\ttmp = -tmp;  \n\n\t**if** (tmp \u003e pivotsize) {  \n\tpivot = j;  \n\tpivotsize = tmp;  \n}  \n}  \n  \n**if** (pivotsize == 0) {  \n// Cannot invert singular matrix  \n**return** Matrix44();  \n}  \n\n\t**if** (pivot != i) {  \n\t**for** (j = 0; j \u003c 4; j++) {  \n\tT tmp;  \n\n\ttmp = t[i][j];  \n\tt[i][j] = t[pivot][j];  \n\tt[pivot][j] = tmp;  \n\n\ttmp = s[i][j];  \n\ts[i][j] = s[pivot][j];  \n\ts[pivot][j] = tmp;  \n}  \n}  \n\n\t**for** (j = i + 1; j \u003c 4; j++) {  \n\tT f = t[j][i] / t[i][i];  \n\n\t**for** (k = 0; k \u003c 4; k++) {  \n\tt[j][k] -= f * t[i][k];  \n\ts[j][k] -= f * s[i][k];  \n}  \n}  \n}  \n\n\t// Backward substitution  \n\t**for** (i = 3; i \u003e= 0; --i) {  \n\tT f;  \n\n\t**if** ((f = t[i][i]) == 0) {  \n\t// Cannot invert singular matrix  \n\t**return** Matrix44();  \n}  \n\n\t**for** (j = 0; j \u003c 4; j++) {  \n\tt[i][j] /= f;  \n\ts[i][j] /= f;  \n}  \n\n\t**for** (j = 0; j \u003c i; j++) {  \n\tf = t[j][i];  \n\n\t**for** (k = 0; k \u003c 4; k++) {  \n\tt[j][k] -= f * t[i][k];  \n\ts[j][k] -= f * s[i][k];  \n}  \n}  \n}  \n  \n\t**return** s;  \n}  \n  \n// \\brief set current matrix to its inverse  \n**const** Matrix44\u003cT\u003e\u0026 invert()  \n{  \n\t*this = inverse();  \n\t**return** *this;  \n}  \n  \nfriend std::ostream\u0026 operator \u003c\u003c (std::ostream \u0026s, **const** Matrix44 \u0026m)  \n{  \n\tstd::ios_base::fmtflags oldFlags = s.flags();  \n\t**int** width = 12; // total with of the displayed number  \n\ts.precision(5); // control the number of displayed decimals  \n\ts.setf (std::ios_base::fixed);  \n\n\ts \u003c\u003c \"(\" \u003c\u003c std::setw (width) \u003c\u003c m[0][0] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[0][1] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[0][2] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[0][3] \u003c\u003c \"\\n\" \u003c\u003c  \n\n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[1][0] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[1][1] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[1][2] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[1][3] \u003c\u003c \"\\n\" \u003c\u003c  \n\n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[2][0] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[2][1] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[2][2] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[2][3] \u003c\u003c \"\\n\" \u003c\u003c  \n\n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[3][0] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[3][1] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[3][2] \u003c\u003c  \n\t\" \" \u003c\u003c std::setw (width) \u003c\u003c m[3][3] \u003c\u003c \")\\n\";  \n\n\ts.flags (oldFlags);  \n\t**return** s;  \n}  \n};  \n  \n\ttypedef Matrix44\u003cfloat\u003e Matrix44f;  \n```  \n\nTesting our code. To test the matrix inversion code, we used Maya to output the values of a matrix and its inverse (check the video at the top of this page). Of course this implies that Maya actually does the right thing, but we can probably agree, that is actually does;). These are the values for the input matrix: 0.707107 0 -0.707107 0 -0.331295 0.883452 -0.331295 0 0.624695 0.468521 0.624695 0 4.000574 3.00043 4.000574 1 Given the input matrix, the inverse matrix computed by our code should match the following values: 0.707107 -0.331295 0.624695 0 0 0.883452 0.468521 0 -0.707107 -0.331295 0.624695 0 0 0 -6.404043 1\n\n```cpp\n\n**int** main(**int** argc, **char** **argv)  \n{  \n\tVec3f v(0, 1, 2);  \n\tstd::cerr \u003c\u003c v \u003c\u003c std::endl;  \n\tMatrix44f a, b, c;  \n\tc = a * b;  \n\n\tMatrix44f d(0.707107, 0, -0.707107, 0, -0.331295, 0.883452, -0.331295, 0, 0.624695, 0.468521, 0.624695, 0, 4.000574, 3.00043, 4.000574, 1);  \n\tstd::cerr \u003c\u003c d \u003c\u003c std::endl;  \n\td.invert();  \n\tstd::cerr \u003c\u003c d \u003c\u003c std::endl;  \n\n\t**return** 0;  \n}\n```","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/How-Matricies-Work-scratchpixel":{"title":"{{title}}","content":"# Matrices 1\n\n## Conventions. A Word of Warning!\n\nYou may be surprised to find that the information we give on this page is different from what you find in other books or on the internet. The information is in fact the same but the order or the sign of the matrix coefficients may be different. This is because different authors/programs, use different conventions. Try to follow the logic of this lesson without paying too much attention to what other documents might say, and read the next chapter which will explain exactly how different conventions change the way we present them on paper and implement them in a program.\n\n## Point-Matrix Multiplication\n\nIn this lesson we will start to put all the things we have learned on points, vectors, matrices and coordinate systems together. And at last, you will learn how matrices work. We mentioned in the previous chapter that two matrices needed to have compatible sizes in order to be multiplied with each other. For instance the matrices of size **m x p** and **p x n** can be multiplied with each other. We also mentioned in the previous chapter that in computer graphics, we would primarily deal with 4x4 matrices.\n\nA point or a vector is a sequence of three numbers and for this reason they too can be written as a 1x3 matrix, a matrix that has one row and three columns:\n\nPoint written in a matrix form $P=[xyz]$\n\n.\n\nThe trick here is that, if we can write points and vectors as [1x3] matrices, we can multiply them by other matrices. Remember than the matrix **m x p** can be multiplied by the matrix **p x n** to give the matrix **m x n**. If the first matrix is a point we can then write m = 1 and p = 3. Which implies that the **p x n** matrix is something of the form 3 x n where n can be any number greater than 1. In theory, a multiplication of a [1x3] matrix by any of the following matrices would work: [3x1], [3x2], [3x3], [3x4], etc. Here is an example of a [1x3]*[3x4] matrix multiplication:\n\n$$\\begin{bmatrix}x \u0026 y \u0026 z\\end{bmatrix} *\n\\begin{bmatrix}\nc_{00}\u0026c_{01}\u0026{c_{02}}\u0026c_{03}\\\\\nc_{10}\u0026c_{11}\u0026{c_{12}}\u0026c_{13}\\\\\nc_{20}\u0026c_{21}\u0026{c_{22}}\u0026c_{23}\\\\\n\\end{bmatrix}$$\n\nThere is two things we need to remember now to make sense of what we are going to explain. The first one is that a point multiplied by a matrix transforms the point to a new position. The result of a point multiplied by a matrix has to be a point. If it wasn't the case, we wouldn't be using matrices has a convenient way of transforming points. The second thing we need to remember is that a **m x p** matrix multiplied by a **p x n** matrix, gives a **m x n** matrix. If we look at our point as a 1x3 matrix, we need the result of the multiplication to be another point, that is a 1x3 matrix. It therefore requires the matrix that we will be multiplying the point with, to be a 3x3 matrix. Multiplying a 1x3 matrix by a 3x3 matrix gives as expected, a 1x3 matrix which is another point. Here is what this multiplication looks like:\n\n$$\\begin{bmatrix}x \u0026 y \u0026 z\\end{bmatrix} *\n\\begin{bmatrix}\nc_{00}\u0026c_{01}\u0026{c_{02}}\\\\\nc_{10}\u0026c_{11}\u0026{c_{12}}\\\\\nc_{20}\u0026c_{21}\u0026{c_{22}}\\\\\n\\end{bmatrix}$$\n\nIn CG, we usually use 4x4 matrices instead of 3x3 matrices and we will soon explain why, but for now, lets stick with the 3x3 matrices for a while. To finish this section of the chapter, we will write some pseudocode to show how we can multiply a point P\n\n(or a vector) in its matrix form to a 3x3 matrix to get a new transformed point PT\n\n. If you need a refresher on matrix multiplication, read the previous chapter. Remember that for each coefficient of new matrix, you need to multiply each coefficient from the current row for the left-hand side matrix with its \"equivalent\" coefficient from the current column for the right-hand side matrix and sum up the resulting products. In pseudo code, it gives something like that (we will give the version for 4x4 matrices later):\n\n```cpp\n// multiply coeffs from row 1 with coeffs from column 1  \nPtransformed.x = P.x * c00 + P.y * c10 + P.z * c20  \n// multiply coeffs from row 1 with coeffs from column 2  \nPtransformed.y = P.x * c01 + P.y * c11 + P.z * c21  \n// multiply coeffs from row 1 with coeffs from column 3  \nPtransformed.z = P.x * c02 + P.y * c12 + P.z * c22  \n```\n## The Identity Matrix\n\nThe **identity matrix** or **unit matrix** is a square matrix whose coefficients are all 0 excepted the coefficients along the diagonal which are set to 1:\n\n$$\\begin{bmatrix}\n\\color{red}{1} \u0026 0 \u0026 0 \\\\\n0 \u0026 \\color{red}{1} \u0026 0 \\\\\n0 \u0026 0 \u0026 \\color{red}{1}\n\\end{bmatrix}$$\n\nThe result of P multiplied by the identity matrix is P. If we replace the coefficient of the identity matrix in the point-matrix multiplication code we can clearly understand why:\n\n```cpp\n// multiplying P by the identity matrix gives P  \nPtransformed.x = P.x * 1 + P.y * 0 + P.z * 0 = P.x  \nPtransformed.y = P.x * 0 + P.y * 1 + P.z * 0 = P.y  \nPtransformed.z = P.x * 0 + P.y * 0 + P.z * 1 = P.z  \n```\n\n## The Scaling Matrix\n\nIf you look at the code of the point-matrix multiplication you can see that the coordinates of the point P are respectively multiplied by the coefficients R00\n\nfor x, R11 for y and R22\n\nfor z. When these coefficients are set to 1 (and all the other coefficients of the matrix are set to 0), we get the identity matrix. However when these coefficients (along the diagonal) are different than 1 (whether smaller or bigger than 1), then they act as a multiplier on the point's coordinates (in other words, the points coordinates are scaled up or down by some amount). If you remember what we have said in the chapter on coordinate systems, multiplying the coordinates of a point by some real numbers results in scaling the point's coordinates. The scaling matrix can therefore be written as:\n\n$$\\begin{bmatrix}\n\\color{red}{S_X} \u0026 0 \u0026 0 \\\\\n0 \u0026 \\color{red}{S_Y} \u0026 0 \\\\\n0 \u0026 0 \u0026 \\color{red}{S_Z}\n\\end{bmatrix}$$\n\nWhere the real numbers SX\n\n, SY and SZ\n\nare the scaling factors.\n\n```cpp\n// multiplying P by the scaling matrix  \nPtransformed.x = P.x * Sx + P.y * 0 + P.z * 0 = P.x * Sx  \nPtransformed.y = P.x * 0 + P.y * Sy + P.z * 0 = P.y * Sy  \nPtransformed.z = P.x * 0 + P.y * 0 + P.z * Sz = P.z * Sz  \n```\nAs an example, imagine a point P which coordinates are (1, 2, 3). If we set the coefficients of the scaling matrix with Sx = 1, Sy = 2 and Sz = 3, then P multiplied by this matrix gives another point whose coordinates are (1, 4, 9).\n\nNote that if either one of the scaling coefficients in the matrix are negative, then the point's coordinate for the corresponding axis will be flipped (it will be mirrored to the other side of the axis).\n\n## The Rotation Matrix\n\nWhat we will be talking about in this paragraph is about building a matrix that will rotate a point or a vector around one axis of the cartesian coordinate system. And for doing so, we will need to use trigonometric functions.\n\n![](https://www.scratchapixel.com/images/upload/geometry/rotation.png?)\n\nFigure 1: a 90 degrees counterclockwise rotation.\n\nLets take a point P defined in a three-dimensional coordinate system with coordinate (1, 0, 0). Lets ignore the z-axis for a while and assume that the point lies in the xy plane. What we want is to transform the point from P\n\nto PT by the mean of a rotation (we could do this with a translation but using a rotation will make our demonstration easier). PT coordinates are (0, 1, 0). As you can see in figure 1 this can be done by rotating the point around the z-axis by 90 degrees **counterclockwise**. Lets assume now that we have a matrix R. When P is multiplied by R it transforms P to PT\n\n. Considering what we know about matrix multiplication lets see how we can re-write a point-matrix multiplication and isolate the computation of each of the transformed point coordinates:\n\n$$\\begin{array}{l}\nP_T.x = P.x * R_{00} + P.y * R_{10} + P.z * R_{20}\\\\\nP_T.y = P.x * R_{01} + P.y * R_{11} + P.z * R_{21}\\\\\nP_T.z = P.x * R_{02} + P.y * R_{12} + P.z * R_{22}\\\\\n\\end{array}$$\n\n![](https://www.scratchapixel.com/images/upload/geometry/rotation45.png?)\n\nFigure 2: a 45 degrees counterclockwise rotation.\n\nAs we said, we don't care so much about PT.z\n\nfor now which represents the z-coordinate of PT. Lets concentrate instead on PT.x and PT.y which represent respectively the x and y coordinates of PT. From P to PT, the x-coordinate goes from 1 to 0. If we look at the first line of the code we wrote to compute PT, it means that R00 has to be equal to 0. Considering that P.y and P.z are 0 anyway we don't care so much about the values that R10 and R20 may have for now. From P to PT the y-coordinate goes from 0 to 1. Lets have a look at the second line of code. What do we know about P? We know that P.x is 1 and that all the other coordinates of P are 0. Which necessarily means that R01 has to be 1. Let's recap. We know that R00 is 0 and R01 is 1. Lets write it down and see what R\n\nlooks like (compare this matrix with the identity matrix):\n\n$$R_z=\n\\begin{bmatrix}\n0 \u0026 1 \u0026 0 \\\\\n1 \u0026 0 \u0026 0 \\\\\n0 \u0026 0 \u0026 1 \\\\\n\\end{bmatrix}$$\n\nDon't worry for now if you don't understand why the coefficients have the value they have. That will be explained soon. All you want to see, is that if you use this matrix to transform $P = (1, 0, 0)$ you will get $P_T = (0, 1, 0)$.\n\n$$\\begin{array}{l}\nP_T.x = P.x * 0 + P.y * 1 + P.z * 0 = 0\\\\\nP_T.y = P.x * 1 + P.y * 0 + P.z * 0 = 1\\\\\nP_T.z = P.x * 0 + P.y * 0 + P.z * 1 = 0\\\\\n\\end{array}$$\n\n![](https://www.scratchapixel.com/images/upload/geometry/unitcircle.png?)\n\nFigure 3: cosine and sine can be used to determine the coordinate of a point on the x- and y-axis of the unit circle.\n\nThis is where our knowledge of trigonometric functions will become handy. If we look at a point on the unit circle we know that its x and y coordinates can be computed using the sine and the cosine of the angle θ\n\n(see figure 3).\n\n$$\\begin{array}{l}\nx = \\cos(\\theta) = 0\\\\\ny = \\sin(\\theta) = 1\\\\\n\\text{with } {\\theta = {\\pi \\over 2}}\\\\\n\\end{array}$$\n\nWhen θ\n\n= 0, x = 1 and y = 0. When θ = 90 degrees (or π2), x = 0 and y = 1. That is interesting because you will notice that x = 0 and y = 1 are the values of R00/R11 and R01/R10\n\nrespectively. So we could re-write the matrix R as:\n\n$$R_z(\\theta)=\n\\begin{bmatrix}\n\\cos(\\theta) \u0026 \\sin(\\theta) \u0026 0 \\\\\n\\sin(\\theta) \u0026 \\cos(\\theta) \u0026 0 \\\\\n0 \u0026 0 \u0026 1 \\\\\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n0 \u0026 1 \u0026 0 \\\\\n1 \u0026 0 \u0026 0 \\\\\n0 \u0026 0 \u0026 1 \\\\\n\\end{bmatrix} \\text{ with } {\\theta = {\\pi \\over 2}}$$\n\nIf you only want to make a rotation of 45 degrees (replace 90 by 45 or π4) and apply R to P, you will get the coordinates (0.7071, 0.7071) for PT\n\nwhich is correct (figure 2). Thus, it seems that we can generalise the notation for R (a matrix that rotates points around the z-axis) and write:\n\n$$R_z(\\theta)=\n\\begin{bmatrix}\n\\cos(\\theta) \u0026 \\sin(\\theta) \u0026 0 \\\\\n\\sin(\\theta) \u0026 \\cos(\\theta) \u0026 0 \\\\\n0 \u0026 0 \u0026 1 \\\\\n\\end{bmatrix}$$\n\nWe know that the transformation from P\n\nto PT works with R in its current form but lets now imagine that P is (0, 1, 0) and PT is (1, 0, 0) which is a rotation of 90 degrees but this time **clockwise** (figure 4, see further down). Would R work and transform P to PT\n\n? Lets check:\n\n$$R_z=\n\\begin{bmatrix}\n\\cos(-{\\pi \\over 2}) \u0026 \\sin(-{\\pi \\over 2}) \u0026 0 \\\\\n\\sin(-{\\pi \\over 2}) \u0026 \\cos(-{\\pi \\over 2}) \u0026 0 \\\\\n0 \u0026 0 \u0026 1 \\\\\n\\end{bmatrix}=\n\\begin{bmatrix}\n0 \u0026 -1 \u0026 0 \\\\\n-1 \u0026 0 \u0026 0 \\\\\n0 \u0026 0 \u0026 1 \\\\\n\\end{bmatrix}$$\n\n$$\\begin{array}{lll}\nP_T.x = \u00260 * R_{00} \u0026+\u0026 1 * R_{10} \u0026+\u0026 P.z * R_{20} \u0026= \\\\\n\u00260*0 \u0026+\u0026 1*-1 \u0026+\u0026 0*0\u0026=-1\\\\\nP_T.y = \u00260 * R_{01} \u0026+\u0026 1 * R_{11} \u0026+\u0026 P.z * R_{21} \u0026= \\\\\n\u00260*-1 \u0026+\u0026 1*0 \u0026+\u0026 0*0\u0026= 0\\\\\nP_T.z = \u00260 * R_{02} \u0026+\u0026 1 * R_{12} \u0026+\u0026 P.z * R_{22} \u0026= \\\\\n\u00260*0 \u0026+\u0026 1*0 \u0026+\u0026 0*1\u0026= 0\\\\\n\\end{array}$$\n\nThat doesn't seem quite right since we started from the point with coordinate (0, 1, 0) and after transformation, we have the coordinates (-1, 0, 0) instead of (1, 0, 0). If we want the coordinates (1, 0, 0), R01\n\nshould be 1 (and not -1). In that case we would get for R:\n\n$$R_z=\n\\begin{bmatrix}\n\\cos(-{\\pi \\over 2}) \u0026 \\sin(-{\\pi \\over 2}) \u0026 0 \\\\\n-\\sin(-{\\pi \\over 2}) \u0026 \\cos(-{\\pi \\over 2}) \u0026 0 \\\\\n0 \u0026 0 \u0026 1 \\\\\n\\end{bmatrix}=\n\\begin{bmatrix}\n0 \u0026 -1 \u0026 0 \\\\ 1 \u0026 0 \u0026 0 \\\\\n0 \u0026 0 \u0026 1 \\\\\n\\end{bmatrix}$$\n\n$$\\begin{array}{lll}\nP_T.x = \u00260 * R_{00} \u0026+\u0026 1 * R_{10} \u0026+\u0026 P.z * R_{20} \u0026= \\\\\n\u00260*0 \u0026+\u0026 1*1 \u0026+\u0026 0*0\u0026=1\\\\\nP_T.y = \u00260 * R_{01} \u0026+\u0026 1 * R_{11} \u0026+\u0026 P.z * R_{21} \u0026= \\\\\n\u00260*-1 \u0026+\u0026 1*0 \u0026+\u0026 0*0\u0026= 0\\\\\nP_T.z = \u00260 * R_{02} \u0026+\u0026 1 * R_{12} \u0026+\u0026 P.z * R_{22} \u0026= \\\\\n\u00260*0 \u0026+\u0026 1*0 \u0026+\u0026 0*1\u0026= 0\\\\\n\\end{array}$$\n\n![](https://www.scratchapixel.com/images/upload/geometry/rotationmin90.png?)\n\nFigure 4: a 90 degrees clockwise rotation.\n\nWe know that the points in the xy plane should stay in the xy plane if we rotate them around the z-axis (so our rotation matrix Rz should not affect the z-coordinate of PT). When we look at the code transforming P to PT, it is easy to see that the third row and the third column do not affect the computation of PT. The first two coefficients in the third column which are used to compute a value for PT.z, R02 and R12, are set to 0 and the third one, R22, is set to 1 which multiplied by P.z leaves the value of P.z\n\nunchanged. We can conclude that the matrix generating a rotation of a point/vector around the z-axis has the following form:\n\n$$R_z(\\theta)= \\begin{bmatrix} \\cos(\\theta) \u0026 \\sin(\\theta) \u0026 0 \\\\ -\\sin(\\theta) \u0026 \\cos(\\theta) \u0026 0 \\\\ 0 \u0026 0 \u0026 1 \\\\ \\end{bmatrix}$$\n\nTo find the matrices that could rotate a point around the x and y axis (or in the yz and xz planes) we can simply follow the same logic we used to find the matrix that rotates points and vectors around the z-axis (on in the xy plane). We will leave this to you as an exercise but considering the information we have given for finding Rz, that should be fairly simple. If Rx is the matrix that generates a rotation around the x-axis and Ry is the matrix that generates a rotation around the y-axis, here is what these matrices look like:\n\n$$R_x(\\theta)= \\begin{bmatrix} \n1 \u0026 0 \u0026 0 \\\\\n0 \u0026 \\cos(\\theta) \u0026 \\sin(\\theta) \\\\\n0 \u0026 -\\sin(\\theta) \u0026 \\cos(\\theta) \\\\\n\\end{bmatrix}$$\n\n$$R_y(\\theta)= \\begin{bmatrix}\n\\cos(\\theta) \u0026 0 \u0026 -\\sin(\\theta) \\\\\n0 \u0026 1 \u0026  0 \\\\\n\\sin(\\theta) \u0026 0 \u0026 \\cos(\\theta) \\\\ \n\\end{bmatrix}$$\n\n$$R_z(\\theta)= \\begin{bmatrix} \\cos(\\theta) \u0026 \\sin(\\theta) \u0026 0 \\\\ -\\sin(\\theta) \u0026 \\cos(\\theta) \u0026 0 \\\\ 0 \u0026 0 \u0026 1 \\\\ \\end{bmatrix}$$\n\nRemember that you multiply the point's coordinates by the coefficients contained in each **column** of these matrices to compute the x, y and z coordinates of the transformed point.\n\n![](https://www.scratchapixel.com/images/upload/geometry/rotation2.png?)\n\nFigure 5: rotations around the x- y- and z-axis. The arrow indicates the rotation direction for positive angles.\n\n![](https://www.scratchapixel.com/images/upload/geometry/rothand.png?)\n\nFigure 6: if you use a left hand coordinate system (left) wrap your fingers around the axis of rotation to find in which direction positive rotation values will rotate points and vectors. If you use a right-hand coordinate system, use the same procedure using your right hand instead.\n\nYou can also use the mnemonic technique we have described in the chapter on coordinate system to easily find out in which directions point or vectors will rotate if the angle of rotation is positive. For a right-hand coordinate system, wrap your fingers around the axis of rotation (like showed in figure 6) and they will naturally indicate the direction in which positive rotation values rotates vectors and points (positive rotation is counter-clockwise). For a left-hand coordinate system, repeat the procedure but use your left hand instead (positive rotation is clockwise).\n\n## Combining (Rotation) Matrices\n\nWe have learned in the previous chapter that multiplying matrices together combines their transformations. Now that we know how to rotate points around individual axis, it is possible to multiply $Rx, Ry, Rz$ together (using every possible combinations) to create more complex rotations. If for instance you want to rotate a point around the x-axis, and then the y-axis, we can create two matrices using the matrices Rx and Ry and combine them using matrix multiplication $(Rx*Ry)$ to create a $Rxy$ matrix encoding the two individual rotations:\n\n$RXY=RX∗RY$\n\nNote that the order of rotation is important and makes a difference. If you rotate a point around the x-axis first and then the y-axis second, you will end up (in most cases) with a result which is different from a rotation around the y-axis then around the x-axis. In most 3D packages such as Maya, 3DSMax, Softimage, Houdini, etc. it is possible to specify the order in which the rotations takes place. For instance the order can be $xyz$, ... (see in Maya the list of possible options).\n\n## The Translation Matrix\n\nTo translate points using point-matrix multiplication we need to use [4x4] matrices. This chapter being limited to [3x3] matrices, we will explain how translation works with matrices in the chapter Transforming Points and Vectors.\n\n## Rotation around an Arbitrary Axis\n\nIt is possible to write some code that will rotate a point or a vector around an arbitrary axis. However this is won't be necessary to write a basic raytracer and we will develop this topic in a future revision of this lesson after the other basic lessons are completed.\n\n[_arrow_back_Previous Chapter](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/matrices)\n\nChapter 5 of 13\n\n[Next Chapter](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/how-does-matrix-work-part-2)","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/How-Matricies-work-2-scratchpixel":{"title":"{{title}}","content":"# Matrices 2\n\n## Relation Between Matrices and Cartesian Coordinate Systems\n\nIf you imagine that you have a point Px\n\nwith coordinates (1, 0, 0) and want to rotate this point around the z-axis by 10 degrees clockwise, what would be the new point's coordinates. Using what we have learned so far on rotation matrices, we know that these new coordinates can be found using simple trigonometry. The x coordinates of the new rotated point is given by cos(-10) and the y coordinate is given by $sin(-10)$ (don't forget that the trigonometric functions in C++ expect the angles to be expressed in radians). If we do the same thing but this time with a point $P_y$ which is (0, 1, 0) then the x coordinate of this point after rotation will be equal to -sin(-10) and the y coordinate will be equal to $cos(-10)$. You can observe that the first line (or row) of the rotation matrix that rotates points around the z-axis $(RZ)$ contains the same trigonometric functions than those we used to compute the new coordinates of the point $P_x$ after rotation. The same observation can be made for the second line of the matrix which also contains the same trigonometric functions than those we used to compute the new coordinates for $P_y:$\n$$\\begin{array}{ll}Px_x = \\cos(\\theta)\u0026Px_y = \\sin(\\theta)\\\\Py_x=-\\sin(\\theta)\u0026 Py_y=\\cos(\\theta)\\end{array}$$\n\n\n\nAs you can see, as we rotate these axes around the z-vector, the new coordinates can be computed using for $P_x$\n\nthe first row of the matrix, and for $P_y$, the second row. If you repeat the exercise for $P_z$ and the rotation matrix $RX$ or $RY$ you will see that the new coordinates of $P_z$ can be computed using the third row of any one of these matrices (depending on which axis your rotate $P_z$ around).\n\nThe key idea in understanding matrices is that each row of the matrix represents an axis (or the bases) of a coordinate system. This is important as later, you will learn how to create matrices to transform points and vectors from one coordinate system to another (change of basis) by simply replacing the rows of the matrix by the coordinates of each axis of that coordinate system you want to transform your vectors or points into:\n\n$$\\begin{bmatrix}\n\\color{red}{c_{00}}\u0026 \\color{red}{c_{01}}\u0026\\color{red}{c_{02}}\\\\\n\\color{green}{c_{10}}\u0026 \\color{green}{c_{11}}\u0026\\color{green}{c_{12}}\\\\\n\\color{blue}{c_{20}}\u0026 \\color{blue}{c_{21}}\u0026\\color{blue}{c_{22}}\\\\\n\\end{bmatrix}\n\\begin{array}{l}\n\\rightarrow \\quad \\color{red} {x-axis}\\\\\n\\rightarrow \\quad \\color{green} {y-axis}\\\\\n\\rightarrow \\quad \\color{blue} {z-axis}\\\\\n\\end{array}$$\n\nThis is a common technique in CG and will be described in the next chapters. Matrices are less of mystery when you understand that they are just a way of storing the coordinates of a coordinate system where the **rows of the matrix are the axis of this coordinate system** or **orientation matrix** as we call it sometimes.\n\n## Orthogonal Matrices\n\nIn fact the type of matrices we have just described in this chapter and the previous one (the rotation matrices), are called in linear algebra, **orthogonal matrices**. An orthogonal matrix is a square matrix with real entries whose columns and rows are **orthogonal unit vectors**. We have mentioned previously that each row from the matrix represents an axis of a Cartesian coordinate system. If the matrix is a rotation matrix or the result of several rotation matrices multiplied with each other, then each row necessarily represents an axis of unit length (because the elements of the rows are constructed from the sine and cosine trigonometric functions which are used to compute the coordinates of points lying on the unit circle). You can see them as a Cartesian coordinate system which is originally aligned with the world coordinate system (the identity matrix's rows represent the axes of the world coordinate system) and rotated around one particular axis or a random axis. Orthogonal matrices have a few interesting properties but maybe the most useful one in Computer Graphics, is that the **transpose** of an orthogonal matrix is equal to its **inverse**. Assuming Q is an orthogonal matrix, we can write:\n\n$QT=Q−1$ which entails that $QQT=I$\n\nwhere I is the identity matrix (see the chapter on [Matrix Operations](http://localhost/lessons/mathematics-physics-for-computer-graphics/geometry/matrix-operations) to learn more about matrix inversion, the transpose of a matrix and the matrix identity).\n\n## Affine Transformations\n\nYou will sometimes find the terms **affine transformations** used in place of matrix transformation. This technical term is actually more accurate to designate the transformations that you get from using the type of matrices we have described so far. In short, an affine transformation, is a transformation that preserves straight lines. The translation, rotation, shearing matrix are all affine transformations as are their combinations. The other type of transformation we will be studying in Computer Graphics are called **projective transformations** (perspective projection is a projective transformation). As you may have guessed, such transformations do not necessarily preserve parallelism between lines (check the lessons on the perspective and orthographic projection matrix in the [Foundation of 3D Rendering](http://localhost/lessons/3d-basic-rendering) section).\n\n## Summary\n\n![](https://www.scratchapixel.com/images/upload/geometry/rotationcoordsys.gif?)\n\nFigure 6: as the point rotates, its coordinates in regard to the world coordinate system (red and green axes) change. But they stay the same in regards the coordinate system defined by the rotation matrix.\n\nNot only you have learned in this chapter (and the previous one) how to create rotation matrices but we have also given you a way of visualizing what a matrix is: each row of the matrix represents one axis of a Cartesian coordinate system. The orientation (rotation), size (scale) and position (translation) of this coordinate system represents the transformation that will be applied to the points when they are multiplied by this matrix. The key idea is that points are originally defined in a certain coordinate system (lets call it A). If a point is attached to a local coordinate system B (the matrix) and that we move, rotate and translate that local coordinate system (i.e. the matrix), the point coordinates will not change in regard to the local coordinate system B. The point is somehow constrained to the transformation applied to the local coordinate system B (it moves with it). However, the coordinates of that point will change in the coordinate system A. Multiplying the point whose coordinates are expressed in regards to A by the matrix B will provide us with the point's new coordinates in the coordinate system A. This is illustrated in figure 6.\n\nWhat you need to remember from that chapter, is how to find the formula for the basic rotation matrices. That the order by which you multiply this basic matrices is important. And finally (and that's almost the most important) that a matrix can be seen as a local cartesian system where each row of the matrix represents one axis of that local coordinate system. Such matrix is also called an orientation matrix and we will explain why in the chapter [Creating an Orientation Matrix or Local Coordinate System](http://localhost/lessons/mathematics-physics-for-computer-graphics/geometry/creating-an-orientation-matrix-or-local-coordinate-system).","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/Math-operations-on-points-and-vectors-scatchpixel":{"title":"{{title}}","content":"# Math operations on geo\n\nNow that we have explained the concept of (cartesian) coordinate system (and how points' and vectors' coordinates relate to coordinate systems), we can look at some of the most common operations which can be performed on points and vectors. This should cover the most common functions you will find in any 3D application and renderer.\n\n## Vector Class in C++\n\nFirst let's define our C++ Vector class:\n\n```cpp\ntemplate\u003ctypename T\u003e  \n**class** Vec3  \n{  \n\t**public**:  \n\t// 3 most basic ways of initializing a vector  \n\tVec3() : x(T(0)), y(T(0)), z(T(0)) {}  \n\tVec3(**const** T \u0026xx) : x(xx), y(xx), z(xx) {}  \n\tVec3(T xx, T yy, T zz) : x(xx), y(yy), z(zz) {}  \n\tT x, y, z;  \n};  \n```\n## Vector Length\n\nAs we mentioned in the previous paragraph, a vector can be seen as an arrow starting from one point and finishing to another. The vector itself indicates not only the direction of point B from A but also can be used to find out the distance between A and B. This is given by the length of a vector which can easily be computed with the following formula:\n\n||V||=V.x∗V.x+V.y∗V.y+V.z∗V.z−−−−−−−−−−−−−−−−−−−−−−−−−−−−√\n\nIn mathematics, the double bar (||V||) notation indicates the lentgh of a vector. The **vector's length** is sometimes also called **norm** or **magnitude** (figure 1).\n\n```cpp\ntemplate\u003ctypename T\u003e  \n**class** Vec3  \n{  \n\t**public**:  \n\t...  \n\t// length can be a method from the class...  \n\tT length()  \n{  \n**return** sqrt(x * x + y * y + z * z);  \n}  \n...  \n};  \n  \n// ... or you can also compute the length in a function which is not part of the class  \ntemplate\u003ctypename T\u003e  \nT length(**const** Vec3\u003cT\u003e \u0026v)  \n{ **return** sqrt(v.x * v.x + v.y * v.y + v.z * v.z); }  \n```\nNote that the axes of the three-dimensional cartesian coordinate systems are unit vectors.\n\n## Normalizing a Vector\n\nWe sometimes use normalise with an 's' and normalize with a 'z'. We have mixed cultural influences which is why we sometimes use one or the other, but in programming though the convention is often to use American spelling in the name of methods or functions, which is why it comes to writing code, we will always use normalize.\n\nA normalised vector (we will use normalise with a z here which is the standard in the industry), is a vector whose length is 1 (vector B in figure 1). Such a vector is also called a **unit vector** (it is a vector which has unit length). Normalizing a vector is very simple. We first compute the length of the vector and divide each one of the vectors coordinates with this length. The mathematical notation is:\n\nV^=V||V||\n\n![](https://www.scratchapixel.com/images/upload/geometry/normalize.png?)\n\nFigure 1: the magnitude or length of vector A and B is denoted by the double bar notation. A normalized vector is a vector whose length is 1 (in this example vector B).\n\nNote that the C++ implementation can be optimised. First we only normalize the vector if its length is greater than 0 (as dividing by 0 is forbidden). We then compute a temporary variable which is the invert of the vector length, and multiply each coordinate of the vector with this value rather than dividing them with the vector's length. As you may know, multiplications in a program are less costly than divisions. This optimisation can be important, as normalizing of vector is an extremely common operations in a renderer which can be applied to thousands, hundreds of thousands, millions of vectors (when not more). At this level, any possible optimisation will have an impact on the final render time. Note though that some compilers will manage that for you under the hood. But you can always make that optimisation explicit in your code.\n\n```cpp\ntemplate\u003ctypename T\u003e  \n**class** Vec3  \n{  \n\t**public**:  \n\t...  \n\t// as a method of the class Vec3  \n\tVec3\u003cT\u003e\u0026 normalize()  \n\t{  \n\tT len = length();  \n\t**if** (len \u003e 0) {  \n\tT invLen = 1 / len;  \n\tx *= invLen, y *= invLen, z *= invLen;  \n}  \n  \n**return** *this;  \n}  \n...  \n};  \n\n\t// or as a utility function  \n\ttemplate\u003ctypename T\u003e  \n\tvoid normalize(Vec3\u003cT\u003e \u0026v)  \n{  \n\tT len2 = v.x * v.x + v.y * v.y + v.z * v.z;  \n\t// avoid division by 0  \n\t**if** (len2 \u003e 0) {  \n\tT invLen = 1 / sqrt(len2);  \n\tx *= invLen, y *= invLen, z *= invLen;  \n}  \n}  \n```\nIn mathematics, you will also find the term **norm** to define a function that assigns a length or size (or distance) to a vector. The function we have just described is called the **Euclidean norm**.\n\n## Dot Product\n\n![](https://www.scratchapixel.com/images/upload/geometry/dotproduct.png?)\n\nFigure 2: the dot product of two vectors can be seen as the projection of A over B. if the two vectors A and B have unit length then the result of the dot product is the cosine of the angle subtended by the two vectors.\n\nThe dot product or scalar product requires two vectors A and B and can be seen as the projection of one vector onto the other. The result of the dot product is a real number (a float or double in programming). A dot product between two vectors is denoted with the dot sign: A⋅B\n\n(it can also be sometimes written as \u003cA,B\u003e\n\n). The dot product consists of multiplying each element of the A vector with its counterpart from vector B and taking the sum of each product. In the case of 3D vectors (length of the vector is three, they have three coefficients or elements which are x, y and z), it consists of the following operation:\n\nA⋅B=A.x∗B.x+A.y∗B.y+A.z∗B.z\n\nNote that this is quite similar to the way we compute the length (distance this time) of a vector. If we take the square root (A⋅B−−−−√\n\n) of the dot product between two vectors that are equal (A=B), then what we get is the length of the vector. We can write:\n\n||V||2=V⋅V\n\nIt can be used in the normalize method:\n\n\n```cpp\ntemplate\u003ctypename T\u003e  \n**class** Vec3  \n{  \n\t**public**:  \n\t...  \n\tT dot(**const** Vec3\u003cT\u003e \u0026v) **const**  \n{  \n**return** x * v.x + y * v.y + z * v.z;  \n}  \n  \nVec3\u003cT\u003e\u0026 normalize()  \n{  \n\tT len2 = dot(*this);  \n\t**if** (len2 \u003e 0) {  \n\tT invLen = 1 / sqrt(len2);  \n\tx *= invLen, y *= invLen, z *= invLen;  \n}  \n  \n**return** *this;  \n}  \n...  \n};  \n  \n\ttemplate\u003ctypename T\u003e  \n\tT dot(**const** Vec3\u003cT\u003e \u0026a, **const** Vec3\u003cT\u003e \u0026b)  \n{ **return** a.x * b.x + a.y * b.y + a.z * b.z; }  \n```\nThe dot product between two vectors is an extremely important and common operation in any 3D application because the result of this operation relates to the **cosine of the angle** between the two vectors. Figure 2 illustrates the geometric interpretation of the dot product. In this example vector A is projected in the direction of vector B.\n\n-   if B is a unit vector then the product A⋅B\n    \n\ngives ||A||cos(θ)-   , the magnitude of the projection of A in the direction of B, with a minus sign if the direction is opposite. This is called the scalar projection of A onto B.\n    \n-   when neither A nor B is a unit vector, we can write that A⋅B/||B||\n    \nsince B as a unit vector is B/||B||-   .\n    \n-   when the two vectors are normalised then taking the arc cosine of the dot product gives you the angle θ\n    \nbetween the two vectors: θ=cos−1(A⋅B/||A||||B||) or θ=cos−1(A^⋅B^) (in mathematics, cos−1 is the inverse of the cos\n\n-   function. In computer programming languages, this function is generally denoted acos()).\n    \n\n![](https://www.scratchapixel.com/images/upload/geometry/dotproduct1.png?)\n\nThe dot product is a very important operation in 3D. It can be used for many things. As a test of orthogonality. When two vectors are perpendicular to each other (A.B), the result of the dot product between these two vectors is 0. When the two vectors are pointing in opposite directions (A.C), the dot product returns -1. When they are pointing in the exact same direction (A.D), it returns 1. It is also used intensively to find out the angle between two vectors or compute the angle between a vector and the axis of a coordinate system (which is useful when the coordinates of a vector are converted to spherical coordinates. This explained in the chapter on [trigonometric functions](http://localhost/lessons/mathematics-physics-for-computer-graphics/geometry/spherical-coordinates-and-trigonometric-functions)).\n\n[![](https://www.scratchapixel.com/images/design/donate.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick\u0026hosted_button_id=78FWLXMM9YGPN)\n\n## Cross Product\n\nThe **cross product** is also an operation on two vectors, but to the difference of the dot product which returns a number, the cross product returns a vector. The particularity of this operation is that the vector resulting from the cross product is perpendicular to the other two (this is shown in figure 3). The cross product operation is written using the following syntax:\n\nC=A×B\n\n![](https://www.scratchapixel.com/images/upload/geometry/crossproduct.png?)\n\nFigure 3: the cross product of two vectors A and B gives a vector C perpendicular to the plane defined by A and B. When A and B are orhotogonal to each other (and have unit length), A, B, C form a Cartesian coordinate system.\n\nTo compute the cross product we will need to implement the following formula:\n\nCX=AY∗BZ−AZ∗BYCY=AZ∗BX−AX∗BZCZ=AX∗BY−AY∗BX\n\nThe result of the cross product is another vector which is orthogonal to the other two. A cross product between two vectors is denoted with the cross sign: A×B\n\n. The two vectors A and B define a plane and the resulting vector C is perpendicular to that plane. Vectors A and B don't have to be perpendicular to each other but when they are the resulting A B and C vectors form a cartesian coordinate system (assuming the vectors have unit length). This is particularly useful to create coordinate systems which we will explain in the chapter [Creating a Local Coordinate System](http://localhost/lessons/mathematics-physics-for-computer-graphics/geometry/creating-an-orientation-matrix-or-local-coordinate-system).\n\n```cpp\ntemplate\u003ctypename T\u003e  \n**class** Vec3  \n{  \n\t**public**:  \n\t...  \n\t// as a method of the class...  \n\tVec3\u003cT\u003e cross(**const** Vec3\u003cT\u003e \u0026v) **const**  \n{  \n\t**return** Vec3\u003cT\u003e(  \n\ty * v.z - z * v.y,  \n\tz * v.x - x * v.z,  \n\tx * v.y - y * v.x);  \n\t}  \n\t...  \n};  \n  \n// or as an utility function  \ntemplate\u003ctypename T\u003e  \nVec3\u003cT\u003e cross(**const** Vec3\u003cT\u003e \u0026a, **const** Vec3\u003cT\u003e \u0026b)  \n{  \n\t**return** Vec3\u003cT\u003e(  \n\ta.y * b.z - a.z * b.y,  \n\ta.z * b.x - a.x * b.z,  \n\ta.x * b.y - a.y * b.x);  \n}  \n```\nIf you need a mnemonic way of remembering this formula, we like to use the technique that consists of asking ourselves the question \"why z?\", y and z being the coordinates of vector A and B used to compute the x coordinate of the resulting vector C (because indeed \"why z?\" - 'why' here of course stands for the letter 'y'). More seriously, logic can easily be used to reconstruct this formula. Since you know that the result of the cross product is a vector perpendicular to the other two, you know that if A and B are the x- and y-axis of a cartesian coordinate system, the cross product of A and B should give you the z-axis that is (0,0,1). The only way you can get this result is if Cz = 1 which is only true when Cz = A.x * B.y - A.y * B.x. From there, you can deduce the other coordinates which are used to compute Cx and Cy. Finally the easiest method might just be to write the cross production operation in the following form:\n\n⎛⎝⎜axayaz⎞⎠⎟×⎛⎝⎜bxbybz⎞⎠⎟=⎛⎝⎜aybz−azbyazbx−axbzaxby−aybx⎞⎠⎟\n\nPresenting the vector in a column vector form, shows that for to find any coordinate of the resulting vector (for example x) we need to use the other two (y and z if x is the coordinate we wish to compute) from vector A and B.\n\nIt is very important to note that the order of the vectors involved in the cross product has an effect on the resulting vector C. If we take the previous example (taking the cross product between the x- and they y-axis of a cartesian coordinate system), you can see that A x B doesn't give you the same result than B x A:\n\nAxB = (1,0,0)x(0,1,0) = (0,0,1),\n\nwhereas\n\nBxA=(0,1,0)x(1,0,0)=(0,0,-1).\n\n![](https://www.scratchapixel.com/images/upload/geometry/normalleftrighthand.png?)\n\nFigure 4: using your left or right hand to determine the orientation of vector C (the normal for instance) when the index fingers points along A and the middle finger points along B.\n\n![](https://www.scratchapixel.com/images/upload/geometry/normalleftrighthand2.png?)\n\nFigure 5: using you right hand, you can align your index finger along either A or B and the middle finger against the other vector (B or A) to find out if C (the normal for instance) point upwards or inwards in the right-hand coordinate system.\n\nWe say that the cross product is **anticommutative** (swapping the position of any two arguments negates the result): If AxB=C then BxA=-C. Remember from the previous chapter that when two vectors are used to define the first two basis of a coordinate system, the third vector can point on either side of the plane. We also described a technique in which you use your hands to differentiate the two systems. When you compute a cross product between vectors you will always get the same unique solution. For instance if A = (1, 0, 0) and B = (0, 1, 0), C can only be (0, 0, 1). So you might ask why should I care about the handedness of my coordinate system then? Because if the result of the computation is always the same, the way you will draw the resulting vector however, depends on the handedness of your coordinate system. You can use the same mnemonic technique to find out in which direction the vector should point to depending on the convention you are using. In the case of a right-hand coordinate system, if you align the index finger along the A vector (for example the tangent at a point on the surface) and the middle finger along the B vector (the bitangent if you try to figure out the orientation of a normal), the thumb will point in the direction of the C vector (the normal). Note that if you use the same technique but with the left hand on the same vectors A and B, your the thumb will point in the opposite direction. Remember though, that this only a **representation** issue.\n\nIn mathematics, the result of a cross product is called a **pseudo vector**. The order of the vector in the cross product operation is important when **surface normals** are computed from the tangent and bitangent at the point where the normal is computed. Depending on this order, the resulting normal can either be pointing towards the interior of the surface (**inward-pointing normal**) or away from it (**outward-pointing normal**). You can find more information on this topic in the chapter [Creating an Orientation Matrix](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/math-operations-on-points-and-vectors#).\n\n## Vector/Point Addition and Subtraction\n\nOther mathematical operations on points are usually straightforward. A multiplication of a vector by a scalar or another vector gives a point. We can add two vectors to each other, subtract them, divide them, etc. Note that some 3D APIs makes the distinction between points, normals and vectors. Technically they are subtle differences between each of them which can justify to create three separate C++ classes. For example: normals are not transformed like points and vectors (we will learn about that in this lesson), subtracting two points technically gives a vector, adding a vector to another vector or a point gives a point, etc. However, from practice, we found that writing these three C++ distinct classes to represent each type is not worth some of the complexity that comes with it. Similarly to OpenEXR which has become an industry standard, we chose to represent all types with a single templated class called Vec3. We therefore make no distinction between normal, vector and points (from a coding point of view). We will just need to manage the (rare) exceptions when variables representing different types (normal, vector, points) but declared under the generic type Vec3, should be processed differently. Here is some C++ code to represent the most common operations (you will find the complete source code at the end of this lesson):\n\n\n```cpp\ntemplate\u003ctypename T\u003e  \n**class** Vec3  \n{  \n\t**public**:  \n\n\tVec3\u003cT\u003e operator + (**const** Vec3\u003cT\u003e \u0026v) **const**  \n\t{ **return** Vec3\u003cT\u003e(x + v.x, y + v.y, z + v.z); }  \n\tVec3\u003cT\u003e operator - (**const** Vec3\u003cT\u003e \u0026v) **const**  \n\t{ **return** Vec3\u003cT\u003e(x - v.x, y - v.y, z - v.z); }  \n\tVec3\u003cT\u003e operator * (**const** T \u0026r) **const**  \n\t{ **return** Vec3\u003cT\u003e(x * r, y * r, z * r); }  \n\n};  \n```\n[_arrow_back_Previous Chapter](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/coordinate-systems)\n\nChapter 3 of 13\n\n[Next Chapter](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/matrices)","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/Matricies-scratchpixel":{"title":"{{title}}","content":"\n# Matricies\n\nBefore we explain why matrices are interesting, let's start by saying that rendering an image by keeping all the 3D objects and the camera at the origin would be quite limited. In essence, matrices play an essential role in moving objects, light and cameras around in the scene so that you can compose your image the way you want. Because our basic renderer wouldn't produce very exciting images if we were to ignore them all together. You will realise as you develop your own 3D renderer, that you won't be able to ignore them very long. So let's study them without any more delay.\nIntroduction to Matrices: they Make Transformations Easy!\n\nThere is really nothing complicated about matrices and why some people fear them is mostly because they don't really fully comprehend what they represent and how they work. They play an instrumental part in the graphics pipeline and you will see them used regularly in the code of 3D applications.\n\nIn the previous chapter we mentioned that it was possible to translate or rotate points by using linear operators. For example we showed that we could translate a point by adding some values to its coordinates. We also showed that it was possible to rotate a vector by using trigonometric functions. Now, in short (and this is not a mathematical definition of what matrices are), a matrix is just a way of combining all these transformations (scale, rotation, translation) into one single structure. Multiplying a point or a vector by this structure (the matrix) gives us a transformed point or vector. Combining these transformations means any combination of the following linear transformations: scale, rotation, translation. We can create a matrix that will rotate a point by 90 degrees around the x-axis, scale it by 2 along the z-axis (the scale applied to the point is (1, 1, 2)) and then translate it by (-2, 3, 1). We could do this by performing a succession of linear transformations on a point but this would potentially mean writing a lot of code:\n```cpp\nVec3f translate(Vec3f P, Vec3f translateValue) { ... } \nVec3f scale(Vec3f P, Vec3f scaleValue) { ... } \nVec3f rotate(Vec3f P, Vec3f axis, float angle) { ... } \n... \nVec3f P = Vec3f(1, 1, 1); \nVec3f translateVal(-1, 2, 4); \nVec3f scaleVal(1, 1, 2); \nVec3f axis(1, 0, 0); \nfloat angle = 90; \nVec3f Pt; \nPt = translate(P, translateVal): // translate P \nPt = scale(Pt, scaleVal); // then scale the result \nPt = rotateValue(Pt, axis, angle); // finally rotate the point \n```\nAs you can see this code is not very compact. But if we use a matrix we can simply write:\n001\n002\n003\n```cpp\nMatrix4f M(...); // set the matrix for translation, rotation, scale \nVec3f P = Vec3f(1, 1, 1); \nVec3f Ptranformed = P * M; // do everything at once, translate, rotate, scale \n```\nTransforming P to achieve a similar effect is simply done by multiplying the point with a matrix (M). We are just showing here what matrices are used for in the graphics pipeline and what advantages they have. In that particular example, we have told you that they can be used to combine together any of the three basic geometric transformations we can perform on points and vectors (scale, translation, rotation) in a very easy, fast and compact way. What we have to do now, is to explain you how and why that works (it will take us a few chapters though).\nMatrices, What Are They?\n\n![](https://www.scratchapixel.com/images/upload/geometry/rowcolumn.png?)\n\nWhat matrices really are? Instead of answering with an abstract mathematical definition we will first start with real matrix examples. Once we have seen a couple of more concrete examples extending the concept to its generic/mathematical form will be easier. If you read a few CG books already, you may have seen matrices mentioned in quite a few places and they often appear as two-dimensional array of numbers. To define a two-dimensional array of numbers we use the standard notation m x n where m and n are two numbers that represent the size of this array. As you may have guessed, m and n respectively represent the number of rows and columns of the matrix. Rows are the horizontal lines of numbers in the 2D array and columns are the vertical ones. Here is an example of a [3x5] matrix:\n\n$$\\begin{bmatrix}\n1\u00263\u00267\u00269\u00260\\\\\n3\u00263\u00260\u00268\u00263\\\\\n9\u00261\u00260\u00260\u00261\n\\end{bmatrix}$$\n\nWe will denote the numbers of the matrix, the matrix coefficients (you might come across the term entry or element but coefficient is often used in CG) and we usually use the subscripts i, j to point to a particular coefficient in the matrix. Matrices themselves are most of the time written with capital letters (M, A, B, etc).\n\nMij\nwhere i is the row and j\n\nis the column.\n\nWe will make a lot of simplifications on matrices for now. One of them, is that in CG we are mostly using matrices which are said to be squared. These are matrices whose numbers m and n are equal. Typically, in CG, we will be interested in 3x3 or 4x4 matrices and we will tell you in the following chapter what they are and how to use them. More generally, these matrices are called square matrices (the matrix [m x n] is a square matrix if m = n). Now, this is a simplification as we said, because in reality m and n can take any value and don't have to be equal. You can create a 3x1 matrix, a 6x6 matrix or a 4x2 matrix. They are all valid matrices. But as we said, in CG, we will mainly be using 3x3 and 4x4 matrices.\n\nA  [3x3] $$\\begin{bmatrix}\n7\u00264\u00263\\\\\n2\u00260\u00263\\\\\n3\u00269\u00261\\\\\n\\end{bmatrix}$$\nand [4x4]$$ \\begin{bmatrix}\n7\u00261\u00264\u00263\\\\\n2\u00260\u00260\u00263\\\\\n3\u00261\u00269\u00261\\\\\n6\u00266\u00265\u00264\\\\\n\\end{bmatrix}$$\n\nmatrix.\n\nHere is an example of how we can implement a 4x4 matrix class in C++ (note that we use the template mechanism in case we need the matrix to use a float or double precision):\n\n```cpp\ntemplate\u003ctypename T\u003e \nclass Matrix44 \n{ \npublic: \n    Matrix44() {} \n    const T* operator [] (uint8_t i) const { return m[i]; } \n    T* operator [] (uint8_t i) { return m[i]; } \n    // initialize the coefficients of the matrix with the coefficients of the identity matrix\n    T m[4][4] = {{1,0,0,0},{0,1,0,0},{0,0,1,0},{0,0,0,1}}; \n}; \n \ntypedef Matrix44\u003cfloat\u003e Matrix44f; \n```\nThese operators in the Matrix44 class:\n\n```cpp\nconst T* operator [] (uint8_t i) const { return m[i]; } \nT* operator [] (uint8_t i) { return m[i]; } \n```\nAre sometimes called access operator or accessor. They are used to access the coefficients of the matrix without having to access explicitly the member variable m[4][4]. Typically, you would access the coefficients that way:\n```cpp\nMatrx44f mat; \nmat.m[0][3] = 1.f; \n```\nBut with the access operators, you can write:\n```cpp\nMatrx44f mat; \nmat[0][3] = 1.f; \n```\n\n## Matrix Multiplication\n\nMatrices can be multiplied with each other, and this operation is at the heart of the point- or vector-matrix transformation process. The result of a matrix multiplication (the technical term is matrix product, the product of two matrices) is another matrix:\n$M3=M1∗M2$\n\n![](https://www.scratchapixel.com/images/upload/geometry/matrixmult.png?)\n*Figure 2: a matrix to transform A to C can be obtained by multiplying a matrix M1 that transform A to B with a matrix M2 that transform point B to C. The multiplication of any combination of matrix that transform in successive steps A to C will give matrix M3.*\n\n\nIf you remember what we briefly mentioned in the introduction, a matrix defines in a concise way, a combination of linear transformations that can be applied to points and vectors (scale, rotation, translation). How that works, is something we haven't explained yet but that we will be addressing very soon. What's important to understand now is that a matrix multiplication is a way of combining in one matrix the effect of two other matrices. In other words, the transformation that each matrix M1 and M2 would operate on a point or a vector can be combined in one single matrix M3. Imagine you need to transform a point from A to B using matrix M1 and then transform B to C using matrix $M2$. Multiplying $M1$by $M2$ gives a matrix $M3$ which directly transforms A to C. A matrix obtained by multiplying two matrices is not different from the other two. What's important to note here is that if you have two other matrices M4 and M5 that respectively transform A to D and D to C then the multiplication of M4 with M5 will give you M3 again (there is a unique matrix for each particular transformation).\n\nNow there is a rule about matrix multiplication which is not important to know if you deal with 4x4 matrices (and you will understand why soon) but for you general knowledge on the subject, we will explain it here (it will become particularly important to remember when we will deal with point- and vector-matrix multiplication). Two matrices M1 and M2 can only be multiplied if the number of columns in M1 is equal to the number of rows in M2. In other worlds if two matrices can be written as m x p and p x n they can be multiplied and it will give a matrix of size m x n. Two matrix p x m and n x p can not be multiplied because m and n are not equal. A 4x2 and 2x3 matrices can be multiplied and will give a 4x3 matrix. The multiplication of two 4x4 matrices gives a 4x4 matrix (this rule isn't so important for us because we will almost always use 4x4 matrix so we generally won't care about whether matrices can be multiplied or not).\n$[M×P]∗[P×N]=[M×N]$\n\nLet' s see now how we multiply two matrices together which turns to be a mathematical operation on the coefficients of the two input matrices. In other words what we are interested in is how we compute the coefficients of the new matrix. It turns out to be quite simple as long as you remember the rule. We said previously that the coefficients in a matrix were defined by their row and column indices. Notation wise, we use the subscripts i and j to denote these row- and column-indices. So imagine that we want to find out what's the value of the coefficient Mi,j in the matrix M3. Let's say that i=1 and j=2 (note that index 0 indicates either the first row or the first column of the matrix. Index 3 indicates the last row or column. Arrays start at index 0 in C++). To compute M3(1,2) we select all the coefficients of the second row in M1 (where M1 is a 4x4 matrix) and all the coefficients of the third column in M2 (where M2 is also a 4x4 matrix). That gives us two sequences of four numbers than we will multiply with each other and sum up in the following way:\n$$M1=\n\\begin{bmatrix}\nc_{00}\u0026c_{01}\u0026c_{02}\u0026c_{03}\\\\\n\\color{red}{c_{10}}\u0026\\color{red}{c_{11}}\u0026\\color{red}{c_{12}}\u0026\\color{red}{c_{13}}\\\\\nc_{20}\u0026c_{21}\u0026c_{22}\u0026c_{23}\\\\\nc_{30}\u0026c_{31}\u0026c_{32}\u0026c_{33}\\\\\n\\end{bmatrix} \\text{ } M2=\n\\begin{bmatrix}\nc_{00}\u0026c_{01}\u0026\\color{red}{c_{02}}\u0026c_{03}\\\\\nc_{10}\u0026c_{11}\u0026\\color{red}{c_{12}}\u0026c_{13}\\\\\nc_{20}\u0026c_{21}\u0026\\color{red}{c_{22}}\u0026c_{23}\\\\\nc_{30}\u0026c_{31}\u0026\\color{red}{c_{32}}\u0026c_{33}\\\\\n\\end{bmatrix}$$\n$$M3_{12}=\n\\begin{array}{l}\n    M1_{10}*M2_{02} + \\\\\n    M1_{11}*M2_{12} + \\\\\n    M1_{12}*M2_{22} + \\\\ \n    M1_{13}*M2_{32}\n\\end{array}$$\n\nWe can use this process for all the coefficients of M3: use the row and column index of the coefficient we want to compute, and use these indices to select the coefficients of the corresponding row in M1 (M1(i,0), M1(i,1), M1(i,2), M1(i,3)) and select the coefficients for the corresponding column in M2 (M2(0,j), M2(1,j), M2(2,j), M3(3,j). Once we have these numbers we combine them using the formula showed above. Multiply all the coefficients of the same index with each other and sum up the results:\n\n$$M3_{ij}=\n\\begin{array}{l}\n    M1_{i0}*M2_{0j} + \\\\\n    M1_{i1}*M2_{1j} + \\\\\n    M1_{i2}*M2_{2j} + \\\\ \n    M1_{i3}*M2_{3j}\n\\end{array}$$\n\nLet's see how we could code this operation in C++. Let's define a matrix, as a two-dimensional array of 4 by 4 floats. Here is the function that can be used to multiply two matrices together:\n\n```cpp\nMatrix44 operator * (const Matrix44\u0026 rhs) const \n{ \n    Matrix44 mult; \n    for (uint8_t i = 0; i \u003c 4; ++i) { \n        for (uint8_t j = 0; j \u003c 4; ++j) { \n            mult[i][j] = m[i][0] * rhs[0][j] + \n                         m[i][1] * rhs[1][j] + \n                         m[i][2] * rhs[2][j] + \n                         m[i][3] * rhs[3][j]; \n        } \n    } \n \n    return mult; \n} \n```\n\nIt is not hard when you know how the multiplication of two matrices is obtained, to observe that the multiplication of M1 by M2 doesn't give the same result than the multiplication of M2 by M1. Matrix multiplication indeed is not commutative. M1*M2 doesn't give the same result than M2*M1.\nSummary\n\nWe haven't explained how and why matrices work, but do not worry all these important things will be explained in the next chapter. From this chapter you need to remember that a matrix is a two-dimensional array of numbers. The size of the matrix is denoted m x n where m is the number of rows and n the number of columns. You have learned that matrices can be multiplied only if the matrix on the left side of the multiplication has a number of columns that is equal to the number of rows of the matrix which is on the right inside of the multiplication. For instance two matrices which sizes are m x p and p x n can be multiplied with each other. The resulting matrix combines the transformation of the two matrices used in the multiplication. If M1 transforms a point from A to B and M2 transforms a point from B to C, then if M3 is the result of M1 multiplied by M2, M3 will transform this point from A to C. Finally we have learned how to compute the coefficients of a matrix resulting from of a matrix multiplication. It is also important to remember that matrix multiplication is not commutative. Practically, it means that we will need to pay attention to the order in which we multiply matrices with each other. This order matters and if your code doesn't work, you may want to check the order in which matrices are multiplied with each other.","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/Matrix-Operations-scratchpixel":{"title":"{{title}}","content":"\n# Matrix Operations\n\n## Transpose\n\nThe transpose of a matrix M\n\nis another matrix which we write using the following convention: MT (with the superscript T). We can describe the process of transposing a matrix in different ways. It can be seen as: reflecting M over its main diagonal (from left to right, top to bottom) to obtain MT, writing the rows of M as the columns of MT or reciprocally, writing the columns of M as the rows of MT\n\n. Computing the transpose of a matrix can be done with the following code:\n\n```cpp\nMatrix44 transpose() **const**  \n{  \n\tMatrix44 transpMat;  \n\t**for** (uint8_t i = 0; i \u003c 4; ++i) {  \n\t**for** (uint8_t j = 0; j \u003c 4; ++j) {  \n\ttranspMat[i][j] = m[j][i];  \n}  \n}  \n  \n**return** transpMat;  \n}  \n```\nThe idea is to swap the rows and columns and since this operation can't be done in place we need to assign the result to a new matrix which is returned by the function. Transposing matrices can be useful when you want to convert matrices from a 3D application using row-major matrices to another using a column-major convention (and vice versa).\n\n## Inverse\n\nIf the multiplying point A by the Matrix M gives point B, multiplying a point B the inverse of the matrix M gives point A. In mathematics, a matrix inversion is usually written using the following notation:\n\n$M−1$\n\nFrom this observation, we can write that:\n\n$MM−1=I$\n\nWhere I is the identity matrix. Multiplying a matrix by its inverse gives the identity matrix.\n\nWe have mentioned in the chapter [How Does a Matrix Work](http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/how-does-matrix-work-part-2), the case of the orthogonal matrix which inverse can easily be obtained from computing its transpose. An orthogonal matrix is a square matrix with real entries whose columns and rows are orthogonal unit vectors. This is an important property which we will be using to learn how to [transform normals](http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/transforming-normals).\n\nMatrix inversion is an important process in 3D. We know that we can use point- or vector-matrix multiplication to convert points and vectors but it is some times useful to be able to move the transformed points or vectors back into the coordinate system in which they were originally defined into. It is often necessary for instance, to transform the ray direction and origin in object space to test for a primitive-ray intersection. If there is an intersection the resulting hit point is in object space and needs to be converted back into world space to be usable.\n\nThe lesson Matrix Inverse in the [Mathematics and Physics of Computer Graphics](http://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics) section will teach how to compute the inverse of a matrix (only available in the old version of Scratchapixel for now). Developing even a basic renderer without being able to use matrices and their inverse would be quite limited so we will be providing some code in this lesson for doing so. You can use this code without worrying to much about how it works and read this advanced lesson another time if you don't feel ready yet.","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/Orientation-Matrix-scratchpixel":{"title":"{{title}}","content":"\n# Orientation Matrix\n\n## Creating on Orientation Matrix or Local Coordinate System\n\nIn this chapter, we will use what we have learned so far about coordinate systems and what they represent to build a local coordinate system (or frame) from a vector which can also be a normal. This technique is often used in the rendering pipeline as a way of converting point and vectors which are defined in one coordinate system to another. The idea is to let the normal at that point to become one of the axis of that local coordinate system (often aligned with the up vector, and let the tangent and bi-tangent of that point to become the other two orthogonal axes of that local frame.\n\n![](https://www.scratchapixel.com/images/upload/geometry/normal.png?)\n\nFigure 1: the tangent (T) and bi-tangent (B) are lying in the plane tangent at P. Taking the cross product between T and B gives the surface normal N. Note that T, B and N are orthogonal to each other and form a Cartesian coordinate system.\n\nThe best way of constructing such as local frame is to use the **normal**, the **tangent** and **bi-tangent** at the surface P which, as we explained before lie in the plane tangent to P at the surface. The three axes should be orthogonal and of unit length. In the lessons related to computing the intersection between a ray and various geometric primitives, we will usually also learn how to compute the **derivatives** at the hit point (which we will call **dPdu** and **dPdv**) which are the technical terms used to describe the tangent and bitangent at P (check the lesson on geometric primitives to learn more about derivatives). We will usually find the normal at P from a cross product between dPdu and dPdv. However, you will have to be careful about the direction in which these two vectors are pointing in, to be sure that the result of this cross product is a vector oriented away from the surface (and not inward). If you know the directions the two vectors point to in space, then you can use the right-hand rule to figure out the order you should use them in to get a normal that points in the right direction (see chapters 3 [Math Operations on Points and Vectors](http://localhost/lessons/mathematics-physics-for-computer-graphics/geometry/math-operations-on-points-and-vectors)).\n\n![](https://www.scratchapixel.com/images/upload/geometry/crossnormal.png?)\n\nFigure 2: on the left the cross product of A and B gives a vector C point away from the normal. On the right the cross product of B and A gives a vector which points inwards. The direction of the resulting vector can easily be found using the right-hand rules.\n\nAssuming the normal N will correspond to the up vector, the tangent will be aligned with the right vector and the bitangent aligned along the dow vector, we can write these tree vectors as the rows of the following [4x4] matrix:\n\n$$\\begin{bmatrix}T_x\u0026T_y\u0026T_z\u00260\\\\N_x\u0026N_y\u0026N_z\u00260\\\\B_x\u0026B_y\u0026B_z\u00260\\\\0\u00260\u00260\u00261\\end{bmatrix}$$\n\n![](https://www.scratchapixel.com/images/upload/geometry/normal2.png?)\n\nFigure 3: the order in which the axis coordinates are written as rows of the orientation matrix depends on the convention you will be using. The up vector is usually the y-axis but in shading particularly, it's not unusual to choose the z-axis as the up-vector. If we assume a right-hand coordinate system, the z-axis in the figure on the left (a) would have to be the tangent, and the x-axis would have to be the bi-tangent. In figure b, y would have to be the tangent and x the bitangent. Point the index finger along the tangent and the middle finger along the bi-tangent to find out the direction of normal using the right-hand mnemonic technique.\n\nHowever you will have to be careful about the context (in the code) in which you will be using this matrix. Some parts of the code might be using a different convention where for example the up vector is considered to be the z-axis. This is usually particularly true for code that deals with shading tasks (to understand why, check the previous chapter on [Spherical Coordinates](http://localhost/lessons/mathematics-physics-for-computer-graphics/geometry/spherical-coordinates-and-trigonometric-functions)). In which case, the rows should be re-ordered in the following way:\n\n$$\\begin{bmatrix}T_x\u0026T_y\u0026T_z\u00260\\\\B_x\u0026B_y\u0026B_z\u00260\\\\N_x\u0026N_y\u0026N_z\u00260\\\\0\u00260\u00260\u00261\\end{bmatrix}$$\n\nAs you can see the coordinates of the normal are now on the third row of the matrix. Why do we suddenly use the convention of aligning the normal to the surface with the z-axis of the coordinate system? It is very confusion but sadly this is also a convention which is used in most papers related to shading which we can't ignore for this reason. It is preferable to follow the same convention. Note in figure 4 how the up vector is defined by the y-vector in the world coordinate system but is represented by the z-vector in the local coordinate system.\n\nRemember that if you use a column-major order convention (Scratchapixel uses a row-major order convention), the vectors will have to written as columns and not rows. For instance if the z-vector is considered to be the up vector, in the first column you will write the coordinates of T, in the second the coordinates of B and in the third the coordinates of N.\n\n![](https://www.scratchapixel.com/images/upload/geometry/localcoord.png?)\n\nFigure 4: it is sometimes useful to express a vector V in a local coordinate system which we can create from the normal and thangent at a point on the surface. If the normal N and tangent T are knows it is easy to compute the bitangent B and create a matrix from these three vectors that will represent this world-to-local coordinate system matrix that transforms V in world space to the space defined by N, T and B. This technique is very useful in shading. Note that the V vector doesn't change direction. Its coordinates are just different in the two coordinate systems.\n\nSo the question you may ask now, is what do we do with this matrix? If you have a vector v\n\nwhich is defined let say in world space (but any other space will do as well), then multiplying this vector by this matrix M will give a vector vM whose coordinates are defined in regards to the local coordinate system you constructed from N, T and B\n\n. As you can see there is no translation value set on the fourth row of the matrix which is the reason we call that type of matrix, an **orientation matrix**. You only want to use this matrix with vectors, and it will mainly be used in shading, where expressing vectors coordinates in relation to the surface normal (where N is usally aligned along the up vector which is either by convention the y- or z-axis) can greatly simplify the computation involved in finding out the color of an object at the point of intersection with the ray (figure 4). This technique will be studied in detail in the lesson on Shading.\n\n**Affine Space**: some renderers (such as [Embree from Intel](http://software.intel.com/en-us/articles/embree-photo-realistic-ray-tracing-kernels)) prefer to represent matrices or transformation as [affine space](http://en.wikipedia.org/wiki/Affine_space) in which a Cartesian coordinate system is defined as a location in space (the origin of the coordinate system say O for instance) and three axes (Vx, Vy, Vz). With this representation a vector (or point) can be transformed with the following code:","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/Points-Vectors-and-Normals-scratchpixel":{"title":"{{title}}","content":"\n# Points vectors normals\n\n_Keywords: vector, point, matrix, normal, transformation, Cartesian coordinate system, Cartesian coordinates, spherical coordinates, coordinate system._\n\n\"Geometry, is a branch of mathematics concerned with questions of shape, size, relative position of figures, and the properties of space.\"\n\n## A Word of Warning\n\nThis lesson will be long and tedious for most readers. If you are new to the field of computer graphics, take the time to read it carefully though. Fully understanding this part of the CG pipeline is of crucial importance and will save you a lot of time later.\n\n## Introduction to Geometry\n\nPoints, vectors, matrices and normals are to computer graphics what the alphabet is to literature; hence most CG books start with a chapter on linear algebra and geometry. However, for many looking to learn graphics programming, presenting a lot of maths before learning about making images can be quite upsetting. If you don't think CG programming is for you because you do not feel comfortable with maths or don't understand what a matrix is, don't give up now.\n\nWe began the \"Foundation of 3D Rendering\" section with a couple of lessons that do not require any prior knowledge of linear algebra for a reason. While this is a fairly unconventional way of teaching CG programming techniques, we believe it's more exciting for you to get started with something practical and fun: for example, an introductory ray tracer that requires very minor knowledge of maths and some knowledge of programming. Writing a renderer is a much more exciting and rewarding way of learning maths, as you can see incrementally how certain things are used to produce a concrete result (i.e. your final image). That being said, points, vectors and matrices are instrumental in the process of making CG images; we will use them extensively in pretty much every lesson.\n\nIn this lesson, you will learn what these constructs are, how they work and the various techniques that can be used to manipulate them. This lesson will also explain the different conventions in linear algebra that CG researchers have used over the years when solving their problems and writing their code. You need to be aware of these conventions as they are very often not mentioned in books (and poorly documented on the web). These conventions are important; before you can read or use another developer's code or techniques, you must first check what conventions they are using.\n\nOne quick note before we begin. If you are a mathematical purist, you might find it strange to see things explained here that are not technically related to linear algebra. We would like to keep the scope of this lesson broad and include simple mathematical techniques commonly used in CG which may only loosely relate to vectors and matrices. For instance, a point, mathematically speaking, has nothing to do with linear algebra (a branch of mathematics only concerned with vectors). We chose to cover points because they are extremely common in CG (and that the same mathematical techniques from linear algebra can be used to manipulate them). If you do not yet understand the distinction between points and vectors, do not worry. We will cover that extensively in this chapter.\n\n## What is Linear Algebra? Introduction to Vectors\n\nSo what exactly is linear algebra and what will we study in this lesson? As we mentioned in the previous section, linear algebra is a branch of mathematics that has to do with the study of **vectors**. Now you might ask, \"What is a vector and how is it useful in the CG world?\" We won't get into too much detail, but a vector can be represented as an array of **numbers**. This array of numbers, which can assume any desired length, is also sometimes called a **tuple** in mathematics. If we want to be specific about the length of the vector, we may choose to say **n-tuple** where **n** represents the number of elements vector. Below is an example of the mathematical notation for a vector with 6 elements:\n\nV=(a,b,c,d,e,f),\n\nwhere a, b, c, d, e, f are real numbers.\n\nThe idea behind grouping these numbers together is that collectively they represent another value or concept that is meaningful in the context of the problem. For example, in computer graphics, vectors can be used to represent either a position or direction in space. We will also be able to transform (or modify) these vectors through a series of operations in a very powerful and compact way. The process of transforming the content of a vector is achieved through what is called a **linear transformation**. We will spend much more time talking about transformations in a later section; for now, it is only important to recognise that they are very useful.\n\n[![](https://www.scratchapixel.com/images/design/donate.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick\u0026hosted_button_id=78FWLXMM9YGPN)\n\n## Points and Vectors\n\nThe terms **point** and **vector** are used throughout many scientific fields in a number of different contexts. In this section, we explain both terms in relation to this tutorial and computer graphics.\n\nHere, a **point** is a **position** in a three-dimensional space. A **vector**, on the other hand, usually means a **direction** (and some corresponding magnitude, or size) in three-dimensional space. Vectors can be thought of as arrows pointing various directions. Three-dimensional **points** and **vectors** are of course similar in that they are both represented by the aforementioned tuple notation.\n\nV=(x,y,x),\n\nwhere (x, y, z) are again real numbers.\n\n![](https://www.scratchapixel.com/images/upload/geometry/pointvec.png?)\n\nFigure 1: a point describes a position in space. A vector can be seen as a direction.\n\nRemember, when talking to a mathematician or a physicist, their understanding of a vector or point could be far more general; they are not necessarily restricted to the use we make of them in CG. For them, a vector could be of arbitrary or even infinite size (meaning it can contain as many numbers as desired).\n\nWe will finish this chapter by briefly mentioning **homogeneous points**. Sometimes it is necessary to add a fourth element for mathematical convenience. An example of a point with homogeneous coordinates is given below:\n\nPH=(x,y,z,w)\n\nHomogeneous points are used when it comes to multiplying points with matrices. Don't worry too much about them at this point of the lesson. We just mention them now as they sometimes appear in the literature and can be confusing to readers. They will be explained in detail later in this lesson.\n\n## A Quick Introduction to Transformations\n\nYou might still be wondering what effect a linear transformation has on points and vectors. It's actually quite simple. One of the most common operations we perform on points in CG consists of simply moving them around in space. This transformation is more specifically called **translation** and it plays a vital role in the rendering process.\n\nThe translation operator is nothing more than a linear transformation of the original point (which can be viewed as an input position point). Applied to a vector (which, remember, is a direction), translation has no meaning. This is because where the vector begins (that is, where it is centered) is not important; regardless of position, all \"arrows\" of the same length, pointing in the same direction, are equivalent. Instead, we very commonly use another linear transformation on vectors: rotation. Many more common operators can be used, but for now, let's just consider translation for points and rotations for vectors.\n\nP→Translate→PTV→Rotate→VT\n\nThe subscripted letter T\n\nstands for \"transformed\".\n\nAs you may have noticed, up to now, we have failed to discuss what the length, or magnitude, of a vector means. Indeed, the length of the arrow has a great deal of importance in CG. When the length of a vector is exactly 1, we say that the vector is **normalised** (you will hear and read this term all the time). The act of normalising a vector involves altering the vector such that its length becomes 1, but its direction remains unchanged. Most of the time, we will want our vectors to be normalised. However, in some cases, not normalising them can be preferred as the length of the vector will be meaningful.\n\nFor instance, imagine that you trace a line from point A\n\nto point B. The line created is a vector in the sense that it indicates where point B is located relative to point A. That is, it gives the direction of B as if you were standing at point A. The length of the vector in this case indicates the distance from A to B\n\n. This distance is sometimes required in certain algorithms.\n\nNormalisation of vectors is often a source of bugs in applications and every time you declare a vector (or even use one), we recommend that you always consciously ask yourself if this vector is/isn't or should/shouldn't be normalised.\n\n## Normals\n\n![](https://www.scratchapixel.com/images/upload/geometry/normal.png?)\n\nFigure 2: a normal is perpendicular to the plane tangent a P.\n\nA normal is the technical term used in Computer Graphics (and Geometry) to describe the orientation of a surface of a geometric object at a point on that surface. Technically, the **surface normal** to a surface at point P\n\n, can be seen as the vector perpendicular to a plane tangent to the surface at P\n\n. Normals play an important role in shading where they are used to compute the brightness of objects (see further lessons on Lights and Shading).\n\nNormals can be thought of as vectors with one caveat: they do not transform the same way that vectors do. This is one of main reasons we take the time to differentiate them. You will find more information on this topic in the chapter [Transforming Normals](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/transforming-normals). For now, it is only important to understand what they are.\n\n## From Theory to C++\n\nIn our C++ code, we won't make the distinction between points, vectors, and normals; we represent all three with a Vec3 class (a class template so that we can create float, int or double versions as needed). Some developers prefer to differentiate them. This clearly limits the possibility of making mistakes. From experience, we found it more efficient (less code to write in the first place) to just deal with one unique class (as the OpenEXR library does). However, we will still have to call a few specific functions carefully depending on whether or not the Vec3 we are dealing with represents a point, a vector or a normal. As you may remember, this is particularly critical when we use transformations. The full source code is provided in the download section of this lesson.\n\n\n```cpp\ntemplate\u003ctypename T\u003e  \n**class** Vec3  \n{  \n\t**public**:  \n\t// 3 most basic ways of initializing a vector  \n\tVec3() : x(T(0)), y(T(0)), z(T(0)) {}  \n\tVec3(**const** T \u0026xx) : x(xx), y(xx), z(xx) {}  \n\tVec3(T xx, T yy, T zz) : x(xx), y(yy), z(zz) {}  \n\tT x, y, z;  \n};  \n  \ntypedef Vec3\u003cfloat\u003e Vec3f;  \n  \nVec3\u003cfloat\u003e a;  \nVec3f b;  \n```\n## Summary\n\nFrom this first chapter, you should remember that mathematically a vector can be of any dimension. However in CG, we use a more specific definition: a **vector** is a direction in 3D space (and therefore represented by three numbers). Additionally, we talk of **points** as representations of positions (also in 3D space and also represented by three numbers). **Homogeneous points** are represented with four numbers but are a particular case that we will study later.\n\nPoints and vectors can be transformed using **linear transformations**.\n\nYou will see the term linear transformation being used often. If lines are preserved while being transformed, then we speak of linear transformation (multiplication by a matrix is a linear transformation).\n\nTypical examples of such transformations are **translation** for points and **rotation** for vectors. The length of a vector can be set to 1, in which case we say that it is **normalised**. The length of a vector (before it is normalised) represents the distance between two points and is sometimes needed in certain algorithms. For this reason, a developer has to be careful as to when and why he/she potentially chooses to normalise a vector.\n\n## What's Next?\n\nOne important thing we haven't explained yet is what the three numbers defining points and vectors represent. These number represent the coordinates of a point (in 2D or 3D space) with respect to a reference (also sometimes called the origin). This reference, which we technically call a **coordinate system**, is the topic of our next chapter.","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/Scratchpixel-Home":{"title":"{{title}}","content":"\n# Scratchpixel Articles\n\n\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Transforming Points and Vectors - Scratchpixel]]\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Orientation Matrix - scratchpixel]]\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/row major vs column major vector - scratchpixel]]\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Points Vectors and Normals - scratchpixel]]\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Matrix Operations - scratchpixel]]\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Transforming Normals - scratchpixel]]\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Spherical Coordinated - scratchpixel]]\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Matricies - scratchpixel]]\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/How Matricies work 2 - scratchpixel]]\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/How Matricies Work - scratchpixel]]\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Coordinate Systems - scratchpixel|Coordinate Systems - Scratchpixel]]\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Math operations on points and vectors - scatchpixel]]\n\n\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Geometry CPP anotated]]\n\n\n# web links\n\n**Contents**\n\n[Points, Vectors and Normals](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/points-vectors-and-normals)\n\n[**Coordinate Systems**](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/coordinate-systems)\n\n[Math Operations on Points and Vectors](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/math-operations-on-points-and-vectors)\n\n[Matrices](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/matrices)\n\n[How Does Matrix Work: Part 1](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/how-does-matrix-work-part-1)\n\n[How Does Matrix Work: Part 2](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/how-does-matrix-work-part-2)\n\n[Transforming Points and Vectors](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/transforming-points-and-vectors)\n\n[Row Major vs Column Major Vector](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/row-major-vs-column-major-vector)\n\n[Matrix Operations](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/matrix-operations)\n\n[Spherical Coordinates and Trigonometric Functions](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/spherical-coordinates-and-trigonometric-functions)\n\n[Creating an Orientation Matrix or Local Coordinate System](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/creating-an-orientation-matrix-or-local-coordinate-system)\n\n[Transforming Normals](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/transforming-normals)\n\n[Source Code](https://www.scratchapixel.com/code.php?id=22\u0026origin=/lessons/mathematics-physics-for-computer-graphics/geometry)\n","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/Spherical-Coordinated-scratchpixel":{"title":"{{title}}","content":"\n# Spherical Coordinates\n\nBeside points, vector, normals and matrices the last useful technique from linear algebra we will need to render images is to express vectors in terms of spherical coordinates. We could certainly render images wihout using them, but you will see that using them simplifies many problems especially when it comes to shading. This chapter is also a good opportunity to review trigonometric functions.\n\n## Trigonometric Functions\n\n![](https://www.scratchapixel.com/images/upload/geometry/trigonometry.png?)\n\nFigure 1: the sine and cosine function can be used to find the coodinate of P which lies on the unit circle.\n\nRendering a computer generated images is almost entirely a geometric problem so not understanding or using trigonometry for creating such images (and the phythagorean theorem) would be very hard. Let's start to review the **sine** and **cosine** function as well as the way angles can be computed from 2D coordinates. Usually these functions are defined in regards to the **unit circle** (a circle of radius 1). When we draw a point P on this unite circle, the x-coordinate of the point can be computed using the cosine of the angle subtended by the x-axis and a line that goes from the origin of the coordinate system to P. This angle is usually called θ\n\n(the greek letter theta). Similarly, the sine of this angle gives the y-coordinate of the point P. Note that the angle θ is defined in **radians**. It will be easier to defined the angles in degrees, but we will need to convert them internally to radians to use them in the C++ trigonometric functions: θradians=π180θdegrees. Remember that a complete turn around the unit circle represents 360 degrees of 2π\n\n.\n\n![](https://www.scratchapixel.com/images/upload/geometry/triangle.png?)\n\nFigure 2: names given to the side of a right-triangle\n\nIt is also important to remember that the cosine, sine and tangent functions are defined from a simple relationship between the edges of a right triangle (right-angled triangle). The tangent formula is interesting because to come back to our example using the unit circle, you can see that it can be computed using the ratio of y over x. Another very useful function in Computer Graphics is the **arctangent** which is the tangent inverse function. In other words, if you feed the arctangent function with the result of the tangent function you get θ\n\n. In programming you can use the atan function but this function doesn't take the sign of the parameters x and y into account. For instance if P has coordinates (0.707, 0.707) the angle θ is π/4. If the coordinates of P are now (-0.707, -0.707) theta should then be 3π/4. But the tan function will compute the ratio -0.0707/-0.0707 which is 1; the result of the tan function for such coordinates will thus be π/4\n\nthough this is the angle for the point with coordinates (0.707, 0.707) and not (-0.707, -0.707). This is obviously wrong. To fix the issue, you need to use the C/C++ function atan2 instead which takes into account the sign of the point's coordinates in the computation of the angle (check the documentation on the function for further details). Similarly to atan2, you can compute the inverse function of sine and cosine using arcsine (sin in C++) and arccosine (acts). Let's summarise all the functions we have talked about so far:\n\n$$\\begin{array}{l}\n\\sin(\\theta)={\\text{opposite side} \\over \\text{hypothenuse}}\\\\\n\\cos(\\theta)={\\text{adjacent side} \\over \\text{hypothenuse}}\\\\\n\\tan(\\theta)={\\text{opposite side} \\over \\text{adjacent side}}\n\\end{array}$$\n\n$$\\begin{array}{l}\n\\theta = \\text{acos}(P_x)\\\\\n\\theta = \\text{asin}(P_y)\\\\ \n\\theta = \\text{atan2}(P_y, P_x)\n\\end{array}$$\n\nRefer to the documentation of these functions to learn what they exactly return. The interesting thing to note is that the angle returned by the atan2 function is positive for counter-clockwise angles (upper half-plane, y \u003e 0) and negative for clockwise angles (lower half-plane, y \u003c 0). It produces results in the range [−π,π]\n\n. Finally let's finish this quick reminder with the Pythagorean Theorem which we will also be using often (for example the ray-sphere intersection test which you can find explained in the [Foundations of 3D Rendering](http://localhost/lessons/3d-basic-rendering) section). It says that:\n\n$hypothenuse2=adjacent2+opposite2$\n\nIn other words, the square of the hypothenuse length is equal to the sum of the squares of the other two sides of the right triangle (adjacent and opposite).\n\n\n## Representing Vectors with Spherical Coordinates\n\n![](https://www.scratchapixel.com/images/upload/geometry/sphericalcoord.png?)\n\nFigure 3: a vector can also be represented by two angles: the vertical angle (in red) θ\n\nand the horizontal angle (in green) ϕ\n\n.\n\n![](https://www.scratchapixel.com/images/upload/geometry/sphericalcoord1.png?)\n\nFigure 4: in the top figure, we are looking perpendicularly to the plane defined by the vector and the up axis. In the bottom figure, we are looking at the vector from the top. The angle θ\n\n(top figure) can vary from 0 to π and the angle ϕ (bottom figure) can vary from 0 to 2π.\n\nSo far we have learned how to represent vectors (as in directions) using cartesian coordinates (with three values, one for each axis). It is also possible though to represent the same vectors with only two values. One to represent the angle between the vector and the vertical axis and one to represent the angle between the the vector projected onto the horizontal plane and the right vector from the Cartesian coordinate system. In figure 3, these angles are represented in red and green. The vertical angle is always called θ\n\n(the greek letter theta) and the horizontal angle (in green) is always called ϕ (the greek letter phi). No matter what you do and what you see in text books, we advise you to follow these rules which is about the only convention unanimously followed by the CG community. These angles should be expressed in radians. Note that θ lies within the range [0:π] while ϕ varies in the range [0:2π] (see figure 4). As such θ and ϕ can also be seen as coordinates and are called **sphercal coordinates**. In figure 4 we can see what the vector looks like in 2D view. On top, we are looking perpendiculary to the plane defined by the vector and the up axis. The bottom figure represents a view from the top. Vr Vu and Vf correspond to the cartesian coordinates of the vector in the Cartesian coordinates systems defined by the right, up and forward axes. Note that we haven't used the names x, y, z for the axis for a reason we will explain soon. Also, we have always represented a normalized vector (of unit length) but any vectors of arbitrary length can be represented using spherical coordinates. The formal definition of spherical coordinates includes an additional term (usually denoted r for radial distance) to represent the length of the vector combined with θ and ϕ\n\nwhich can also be called the **polar** and **azimuth** angles. Spherical coordinates are just another way of enconding vectors. They make this representation compact as only two numbers are used instead of three (if you don't care about the length of the vector) with the Cartesian coordinates (it can save memory in your program) and they will become most useful when we will talk about shading. The question now is how we convert a vector represented in Cartesian coordinates to spherical coordinates.\n\n## Conventions Again: Z is Up!\n\n![](https://www.scratchapixel.com/images/upload/geometry/sphericalcoord3.png?)\n\nFigure 5: in mathematics and physics, spherical coordinates are represented in a Cartesian coordinate system where the z-axis represents the up vector.\n\nThe convention when it comes to represent vectors in mathematics and physics is to name the up vector as the z-axis and the right and forward vector respectively the x- and y-axis. And to make things easier, the convention is also to use a **left-hand coordinate** system (which you can see in figure 5). If you read an article on spherical coordinates from a reliable wiki, it's very likely that it will use this convention. Having z-axis representing the up vector, is something we have already briefly mentioned in the chapter on [Coordinate System](http://localhost/lessons/mathematics-physics-for-computer-graphics/geometry/coordinate-systems). As you can see, this convention is different from the one we normally use (where the up axis is the y-axis) but unfortunatly this notation is the norm and we will have to stick to it. What is actually the main point of interest to us, is how this will affect our code. When we will study shading, you will see that we use a trick to convert the vectors from world space to a local coordinate system where the normal at the surface of the shaded point represent the up vector (see the next chapter [Creating an Orientation Matrix or Local Coordinate System](http://localhost/lessons/mathematics-physics-for-computer-graphics/geometry/creating-an-orientation-matrix-or-local-coordinate-system)). However rather than building the matrix to transform vector from whatever space they are in to this local coordinate system by copying the tangent (x-axis), the normal (y-axis) and the bi-tangent (z-axis) to the first (right vector), second (up vector) and third (forward vector) row of the matrix as we usually do, we will copy them in them in this order:\n\n$$\\begin{bmatrix}T_x\u0026T_y\u0026T_z\u00260\\\\B_x\u0026B_y\u0026B_z\u00260\\\\N_x\u0026N_y\u0026N_z\u00260\\\\0\u00260\u00260\u00261\\end{bmatrix}$$\n\nWhere T, B and N represent the tangent bi-tangent and normal vectors. Note that we swapped the position of the normal (up vector or y-axis in the conventional coordinate system) and the bitangent (forward vector or z-axis in the conventional coordinate system) in the matrix construction. Let's see how this work. Imagine you have a normal whose coordinates in world space are (0, 1, 0). In other words, it points straight up. Let's construct a matrix using the trick we have just learned where the tangent and bit agent vectors have the coordinates (1, 0, 0) and (0, 0, 1):\n\n$$\\begin{bmatrix}1\u00260\u00260\u00260\\\\0\u00260\u00261\u00260\\\\0\u00261\u00260\u00260\\\\0\u00260\u00260\u00261\\end{bmatrix}$$\n\nNow imagine you want to transform a vector v\n\nin the local frame represented by this matrix and that the coordinates of this vector are (0, 1, 0). It is parallel to the y-axis in world space. If we apply the matrix-vector multiplication formula we get:\n\n$${ \\begin{array}{l}\nx = Vx * M_{00} + Vy * M_{10} + Vz * M_{20} = 0 * 1 + 1 * 0 + 0 * 0 = 0\\\\\ny = Vx * M_{01} + Vy * M_{11} + Vz * M_{21} = 0 * 0 + 1 * 0 + 0 * 1 = 0\\\\\nz = Vx * M_{02} + Vy * M_{12} + Vz * M_{22} = 0 * 0 + 1 * 1 + 0 * 0 = 1\\end{array} }$$\n\nAs you can see, once transformed, the vector has coordinates (0, 0, 1). It is aligned with the up vector which is represented by the normal which is also in this special case the z-axis. We have successfully managed to convert a vector in a coordinate system where the z-axis is the up vector. This concept is confusing especially if you try to display the resulting vector in a 3D application where the y-axis is up and the z-axis is the forward axis. However the way you need to look at this, is really more like a swap of the y- and z-coordinates of the vector.\n\n## Converting Cartesian to Spherical Coordinates\n\n![](https://www.scratchapixel.com/images/upload/geometry/sphericalcoord4.png?)\n\nFigure 6: it is easier to see that Vz is equal to cos(θ)\n\nwhen we rotate the figure by 90 degrees clockwise.\n\nFor the demonstration, we will assume that the vector is normalised. The illustration on the left in figure 6 is the same as the top illustration in figure 4 but with the up vector now represented as the z-axis (in blue). If we rotate the figure by 90 degrees clockwise (on the right of figure 6) you can see that it looks similar to figure 1 where the x-coordinates (in figure 1) was computed using the formula cos(θ). Applied to the case showed in figure 6, we can therefore say that Vz is equal to cos(θ) as well (here Vz is the same as Px in figure 1). And consequently the angle θ itself can be computed as the arccosine of the value Vz:\n\n$$\\begin{array}{l}V_z = \\cos(\\theta) \\rightarrow \\theta = acos(V_z)\\end{array}$$\n\nIn C++ you will write:\n\n\n```cpp\n**float** theta = acos(Vz);  \n```\n![](https://www.scratchapixel.com/images/upload/geometry/sphericalcoord5.png?)\n\nFigure 7: computing the angle ϕ.\n\nLet's now find out how to compute the angle ϕ\n\n. Let's now have a look at figure 7 which is the same at the illustration at the bottom of figure 4 but where the right and forward axis have now be named the x- and y-axis (in red and green). Remember from our quick trigonometric function refresher (at the top of this chapter), that the tangent of an angle can be computed by taking the ratio of the opposite side (which is Vy in this example) over the adjacent side (Vx) of a right triangle. You may ask why we just not compute this angle like we did for θ where we used the arccosine of the value Vx to find ϕ. That would actually be an option, but don't forget that ϕ varies from 0 to 2π. The advantage of using the tangent rather than the cosine is that the C++ implementation of the function (or rather the atan2 C++ function) will take into account the sign of its arguments (Vy and Vx) to return an angle that either varies from 0 to π if the vector is in the right part of the unit circle, and 0 to −π if the vector is in the left part of the unit circle. As a programmer, you will need to remap this value to the range [0:2π]\n\nif necessary (look at the end of this lesson for the complete code):\n\n$$tan(\\phi)= { V_y \\over V_x } \\rightarrow \\phi = atan({V_y \\over V_x})$$\n\nIn C++ you will write:\n\n\n```cpp\n**float** phi = atan2(Vy, Vx);  \n```\n## And Vice Versa: Spherical Coordinates to Cartesian Coordinates\n\nThe formula to compute Cartesian coordinate back from spherical coordinates is actually straightforward:\n\n$$\\begin{array}{l}\nx =\\cos(\\phi)\\sin(\\theta)\\\\\ny=\\sin(\\phi)\\sin(\\theta)\\\\\nz=\\cos(\\theta)\n\\end{array}$$\n\nIt is not always easy to remember this formula by heart, but it is always possible to re-write it from simple deductions. We know that the z coordinate of the vector only depends on the angle theta and that Vz=cos(θ). As for the x coordinate, imagine that you want V to have coordinates (1, 0, 0) which is true when θ=π/2 and ϕ=0. We know that sin(π/2)=1 and cos(0)=1 thus x=sin(θ)cos(ϕ). The same technique can be used to find y. Here some C++ code to compute cartesian coordinates from the two spherical angles:\n\n```cpp\ntemplate\u003ctypename T\u003e  \nVec3\u003cT\u003e sphericalToCartesian(**const** T \u0026theta, **const** T \u0026phi)  \n{  \n\t**return** Vec3\u003cT\u003e(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));  \n};  \n```\n## More Tricks with Trigonometric Functions\n\nNow that we have explained how to convert from cartesian coordinates to spherical and vice and versa, we will show a couple of useful functions that can be used in the renderer to manipulate vectors using both representations. The first function we will write is to compute θ from the cartesian coordinates. Remember than for spherical coordinates we will use a left-hand coordinate system in which the z-axis is the up vector. We have explained in this chapter than we can write:\n\n```cpp\ntemplate\u003ctypename T\u003e  \ninline T sphericalTheta(**const** Vec3\u003cT\u003e \u0026v)  \n{  \n\t**return** acos(clamp\u003cT\u003e(v[2], -1, 1));  \n}  \n```\nNote that the input vector is supposed to be normalised so the vector's z-coordinates should be in the range [-1:1] but clamping this value is safer. Next we will write a function to compute ϕ. We have mentioned in this chapter before than the function atan returns a value in the range [−π:π]. We will need to remap this value in the range [0:2π].\n\n```cpp\ntemplate\u003ctypename T\u003e  \ninline T sphericalPhi(**const** Vec3\u003cT\u003e \u0026v)  \n{  \n\tT p = atan2(v[1], v[0]);  \n\t**return** (p \u003c 0) ? p + 2 * M_PI : p;  \n}  \n```\nIt is not always necessary to compute the angle values from the cartesian coordinates. Sometimes we just want to get the values for cos(θ), sin(θ), cos(ϕ) or sin(ϕ). Computing cos(θ) is really straightforward (it is very similar to the function sphericalTheta we wrote earlier):\n\n```cpp\ntemplate\u003ctypename T\u003e inline T cosTheta(**const** Vec3\u003cT\u003e \u0026w) { **return** w[2]; }  \n```\nComputing sin(θ) is a bit more complicated. We know that a vector lying on the unit circle has length 1 (unit length). We also know (Pythagorean theorem) that for such vector we can write V2x+V2y=1. If $Vx=cos(θ)$ and $Vy=sin(θ)$ we can write:\n\n$$\\cos(\\theta)^2 + \\sin(\\theta)^2 = 1 \\rightarrow \\sin(\\theta)^2=1-\\cos(\\theta)^2$$\n\nWe can first write a function that compute sin(θ)2 and then another one to compute sin(θ) which just returns the square root of the result return by the first function:\n\n```cpp\ntemplate\u003ctypename T\u003e  \ninline T sinTheta2(**const** Vec3\u003cT\u003e \u0026w)  \n{  \n\t**return** std::max(T(0), 1 - cosTheta(w) * cosTheta(w));  \n}  \n  \ntemplate\u003ctypename T\u003e  \ninline T sinTheta(**const** Vec3\u003cT\u003e \u0026w)  \n{  \n\t**return** sqrt(sinTheta2(w));  \n}  \n```\n\n![](https://www.scratchapixel.com/images/upload/geometry/projectvec.gif?)\n\nFigure 8: the shadow of the yellow vector (v)\n\ncorresponds to the projection of (v) on the xy plane. This projected vector (vp) is shorter than a unit length vector but to normalize it, we can divide it xy coordinates by sin(θ) which we then can use to compute sin(ϕ) and cos(ϕ).\n\n### Computing cos(ϕ)\n\nand sin(ϕ) is also slightly more complicated. As you can see in figure 8, even though the vector v is of unit length in world space, its shadow on the xy plane creates a vector which doesn't lie on the unit circle (unless θ=π/2). Technically speaking, the shadow of this vector corresponds to **projecting** the vector v on the xy plane. However using atan2 to compute ϕ only works for vector of unit length. You can also notice that the length of the vector v projected in the xy plane (vp), is directly related to the angle θ (figure 9). For values of θ close to 0 or π, vp is very small (example on the left in figure 8) and for values close to π/2, vp is longer (it lies on the unit circle when θ=π/2).\n\n![](https://www.scratchapixel.com/images/upload/geometry/projphi.png?)\n\nFigure 9. Left: the length of the vector vp\n\ncan be computed using sin(θ). Right: the x and y coordinates of the vector vp\n\nonce normalised can be used to compute phi (using atan2(y, x)).\n\nThe value sin(θ)\n\nrepresents the length of the vector vp which is the vector v projected on the xy plane (figure 9a). Dividing the coordinates of vp by this length has for effect to normalise vp. Once a unit length vector, the x and y coordinates of vp can be used to compute sin(ϕ) and cos(ϕ).\n\n```cpp\ntemplate\u003ctypename T\u003e  \ninline T cosPhi(**const** Vec3\u003cT\u003e \u0026w)  \n{  \n\tT sintheta = sinTheta(w);  \n\t**if** (sintheta == 0) **return** 1;  \n\t**return** clamp\u003cT\u003e(w[0] / sintheta, -1, 1);  \n}  \n  \ntemplate\u003ctypename T\u003e  \ninline T sinPhi(**const** Vec3\u003cT\u003e \u0026w)  \n{  \n\tT sintheta = sinTheta(w);  \n\t**if** (sintheta == 0) **return** 0;  \n\t**return** clamp\u003cT\u003e(w[1] / sintheta, -1, 1);  \n}  \n```\n[_arrow_back_Previous Chapter](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/matrix-operations)\n\nChapter 10 of 13\n\n[Next Chapter](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/creating-an-orientation-matrix-or-local-coordinate-system)","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/Transforming-Normals-scratchpixel":{"title":"{{title}}","content":"# Normals\n\n\n## What is a normal?\n\n![](https://www.scratchapixel.com/images/upload/geometry/normal.png?)\n\nFigure 1: the tangent (T) and bi-tangent (B) are lying in the plane tangent at P. Taking the cross product between T and B gives the surface normal N. Note that T, B and N are orthogonal to each other and form a Cartesian coordinate system.\n\nWe briefly mentioned what normals were in the first chapter of this lesson. A surface normal from a surface at P, is a vector perpendicular to the tangent plane to that surface at P. We will learn more about how to compute normals as we get to the lessons on geometric primitives. But lets just say for now that if you know the tangent T and bi-tangent B of the surface at P (which defines the plane tangent to the surface at P) then we can compute the surface normal at P using a simple cross product between T and B:\n\n$$N = T \\times B$$\n\nRemember what we have said on the cross product operation. It is anticommutative which means that swapping the position of any two arguments negates the result. In other words: $T×B=N$ and $B×T=−N$. In practice, it just means that you will have to be careful to compute the normal so that it points away from the surface (for reasons we will explain when we will get to the lessons on Shading) but we will come back on this again in other lessons.\n\n## Transforming Normals\n\n![](https://www.scratchapixel.com/images/upload/geometry/transformnormal1.png?)\n\nFigure 2: a) in blue we have draw the normal to the line AB. b) We have transformed the point AB by scaling them by the factor (2, 1, 0). If we do the same for the normal with coordinates (1, 1, 0) we can see that the transformed normal is not perpendicular anymore to A'B'. c) we transformed the normal by the transpose of the inverse of the matrix. The resulting normal is orthogonal to A'B'.\n\nYou may ask then why not simply considering normals as vectors. Why do we take the pain of differentiating them? In the previous chapters, we have learned to use matrix multiplication to transform points and vectors. The problem with normals, is that we tend to assume that transforming them in the same way we transform points and vectors will work. In fact, this is sometimes the case, for example when the matrix scales the normal uniformly (that is when the values of the matrix along the diagonal, which we have learned encode the scale values applied to the transformed point or vector are all the same). But lets now consider the case where a non-uniform scale is applied to an object. Lets draw (in 2D) a line which is passing through the points A=(0, 1, 0) and B=(1, 0, 0) as illustrated in figure 1. If you draw another line from the origin to the coordinate (1, 1, 0) you can see that this line is perpendicular to our plane. Lets consider this to be our normal N (technically, we should normalize this vector but not doing so is not going to be a problem for this explanation). Now lets say that we apply a non uniform scale to the plane using the following matrix:\n\n$$M=\\begin{bmatrix}2\u00260\u00260\u00260\\\\0\u00261\u00260\u00260\\\\0\u00260\u00261\u00260\\\\0\u00260\u00260\u00261\\end{bmatrix}$$\n\nThis matrix scale the x-coordinate of any point (or vector) by 2 and leave the other coordinates unchanged. Applied to our example, we get A'=A*M which gives A'=(0, 1, 0) and B'=B*M which is equal to (2, 0, 0). Similarly, if we compute N' as N'=N*M, we get N'=(2, 1, 0). Now, if we both draw our new transformed line (going through A' and B') and N', we can see that N' is no longer perpendicular to A'B'. In fact, the solution to transforming normals, is not to multiply them by the same matrix used for transforming points and vectors, but to multiply them by the **transpose of the inverse of that matrix**:\n\n$$N'=N*M^{-1T}$$\n\nBefore considering the mathematical proof, let's first try to explain why this solution works using intuition. First, we know that normals represent directions, so like vectors they are not affected by translation. In other words, we can ignore the fourth column and fourth row of our [4x4] matrix and just consider the inner, upper-left [3x3] remaining matrix which we know encode the rotation and the scale. We have also explained in this lesson that the transpose of an orthogonal matrix is also its inverse, and that rotation matrices are orthogonal. In other words, if Q is an orthogonal matrix, we can write:\n\n$QT=Q−1$ therefore $Q=Q−1T$\n\nThe transpose of the inverse of an orthogonal matrix Q gives the matrix Q. In other words, this doesn't change anything. Using the transpose of the inverse of that matrix doesn't change the elements from the matrix that encode rotations, and transforming a normal with this transposed inverted matrix, will rotate the normals as if we had use the original matrix (we want the normal to follow any rotation you apply to an object). Question from a reader: \"But the elements of the matrix M along the diagonal can encode rotations and scaling at the same time. So if scale and rotations are mixed up in one single matrix, is the matrix still orthogonal?\". If the scaling is different than 1 in any dimension, you would be right. However you can see a matrix that encodes both rotation and scaling as a multiplication of two distinct matrices, one that encodes rotation only R, and one that encodes scaling only S:\n\n$M=R∗S$\n\nAnd the matrix on the left R would be orthogonal. Therefore saying that the transpose of the inverse of that matrix R−1T is the same as the matrix itself R holds true. All we are left to do in our demonstration, is to see what happens to the matrix S when we take the transpose of its inverse.\n\nThe last elements from the matrix we haven't looked at yet, are the numbers along the diagonal of the matrix which we know encode the scale values. What happens to them when we compute the transpose of the inverse of a matrix? The transpose operation itself doesn't change the elements along the diagonal of a matrix. Only the inverse operation changes them. If a point is scaled by a factor of 4 we know that we need to scale it by 0.25 (14, the inverse of the original scale factor) to bring it back to its original position. Similarly, the inverse of a scale matrix can easily be computed by taking the inverse of the scale factors. Applied to our example we get:\n\n$$M^{-1T}=\\begin{bmatrix}1 \\over 2\u00260\u00260\u00260\\\\0\u00261\u00260\u00260\\\\0\u00260\u00261\u00260\\\\0\u00260\u00260\u00261\\end{bmatrix}$$\n\nIf we apply this matrix to our normal N=(1, 1, 0) we get N'=(0.5, 1, 0). Lets now draw this vector next to the line A'B' and check that it is perpendicular to the line (figure 2c). As you can see, we now have a normal which is orthogonal to the transformed line A'B'.\n\nIt is also possible to compute the normals from transformed vertices but this technique can't be used for example with quadratic shapes. Imaging a sphere renderered as quadratic shape. If you scale the sphere along the x-axis by 2 you will get an ellipsoid. Try to visually imagine what's happening to the normal of a sphere transformed that way, if you just apply the original matrix to the normals. If you can compute the derivatives of a point on surface (the tangent and bitangent), you can compute a transformed normal from these transformed derivatives, no matter what type of geometric primitive you are dealing with. This is actually the technique we will be using in our basic renderer but we won't always have access to these derivatives so using the transpose of the inverse matrix is still the only valid technique we can use in these cases.\n\nHere is now the mathematical proof that the transpose of the inverse is actually what we need to transform normals. Remember that the dot product of two orthogonal vectors is equal to 0. Note also, that we can re-write the dot product as a matrix multiplication between a [1x3] and a [3x1] matrix which gives us a [1x1] matrix, one number as with the result of the dot product. If the result of the dot product is 0 then the result of the matrix multiplication (assuming you are using the same vectors) should also be 0. Imagine that we have two vectors orthogonal to each other at point P. One vector is v\n\nand lies within the plane tangent to P and n is the normal at P. The dot product of v and n is 0 since n is the normal and v lies in plane tangent to P. We can also re-write n as a [3x1] matrix which we can get by transposing n itself and multiply v as a [1x3] matrix by nT\n\nwhich result should also be 0 (since the formula of the matrix multiplication is the same as the formula of a dot product in that case):\n\n$$v \\cdot n = \\begin{pmatrix}v_x \u0026 v_y \u0026 v_x\\end{pmatrix}*\\begin{pmatrix}n_x\\\\n_y\\\\n_z\\end{pmatrix}=v * n^T=0$$\n\n$$v \\cdot n = v * n^T = v_x * n_x + v_y * n_y + v_z * n_z$$\n\nWe can also write:\n\n$$v * n^T = v * M * M^{-1} * n^T = v * I * n^T$$\n\nwhere M is a matrix we want to transform P with and I is the identity matrix. We know that the multiplication of a matrix with its inverse gives the identity matrix, so in essence, technically, the term M−1∗M we added in the middle of the term $v∗nT$ does nothing. However, lets see what we can do by re-arranging and re-writing the terms:\n\n$$v * n^T = (v*M) * (n*M^{-1T})^T$$\n\nFirst we can notice that the first term on the left, $v∗M$, is nothing else than the vector v′ which is the vector v transformed by the matrix M. We said before that transforming vectors with the matrix doesn't work for normals but it does work for vectors lying in the plane tangent to P. In other words:\n\n$$v' = v * M$$\n\nThe second term on the right, has been re-arranged. We moved the matrix M−1\n\nto the right of nT. This is technically possible only if we transpose the matrix itself which is why we wrote M−1T. Remember that A×B=BT×A. Finally we can write:\n\n$$v * n^T =v' * n'^T$$\n\nThis equality has to be true because the dot product between v and n should be same after the two vectors have been transformed (the dot product is invariant under linear transformation). Thus, if (n∗M−1T)T=n′T, then n′=n∗M−1T.\n\n[_arrow_back_Previous Chapter](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/creating-an-orientation-matrix-or-local-coordinate-system)\n\nChapter 12 of 13\n\n[Next Chapter](https://www.scratchapixel.com/code.php?id=22\u0026origin=/lessons/mathematics-physics-for-computer-graphics/geometry)","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/Transforming-Points-and-Vectors-Scratchpixel":{"title":"{{title}}","content":"\n# Transforming Points\n\n## Transforming Points\n\nWe have introduced almost all we need to know to now write the code that will transform points using matrices. However even though translation seems to be the easiest linear operator that can be applied to point, we haven't mentioned it often in the previous chapter. Because to get the translation working with the theory of matrix multiplication, we need to make a change to the point structure that might confuse you slightly.\n\nAs we mentioned in the last two chapters a matrix-matrix multiplication can only work if the two matrices involved have a compatible size. That is if they have the size m x p and p x n. Let's keep that in mind. Let's start from a 3x3 identity matrix. We know that a point multiplied by this matrix have its coordinates unchanged. Let's see what changes we need to bring to that matrix to handle translation. Translation on a point is nothing more than adding a number to each of its coordinates (these numbers can be positive or negative). For instance if we want to move the point (1, 1, 1) to the coordinate (2, 3, 4) we need to add the values 1, 2 and 3 respectively to each of the points' x, y and z coordinates. It is very simple. Note that from now on, we will keep looking at points and vectors as matrix of size 1x3.\n\n$$\\begin{array}{l}\nP'.x = P.x + Tx\\\\\nP'.y = P.y + Ty\\\\\nP'.z = P.z + Tz\\end{array}$$\n\nNow let's get back to the code that transforms a point using a matrix:\n\n$$\\begin{array}{l}\nP'.x = P.x * M_{00} + P.y * M_{10} + P.z * M_{20}\\\\\nP'.y = P.x * M_{01} + P.y * M_{11} + P.z * M_{21}\\\\\nP'.z = P.x * M_{02} + P.y * M_{12} + P.z * M_{22}\\end{array}$$\n\nWhat do we need to get the rotation matrix extended so that it handles translation as well? We would need to be able to have a fourth term to the right that would encode the translation. Something like this:\n\n$$\\begin{array}{l}\nP'.x = P.x * M_{00} + P.y * M_{10} + P.z * M_{20} + T_X\\\\\nP'.y = P.x * M_{01} + P.y * M_{11} + P.z * M_{21} + T_Y\\\\\nP'.z = P.x * M_{02} + P.y * M_{12} + P.z * M_{22} + T_Z\n\\end{array}$$\n\nNow remember that we want to come up with a matrix that encodes scale, rotation and translation. So somehow, we need to get Tx, Ty, Tz to fit within the code of the point-matrix multiplication (and store these thee values somewhere in the matrix). Look at the first line for now. Note that to compute x', we only use the coefficients of the matrix first column. If the column had four coefficients instead of three, then Tx would be M30. The same reasoning can be done with Ty and Tz. We would then get:\n\n$$\\begin{array}{l}\nP'.x = P.x * M_{00} + P.y * M_{10} + P.z * M_{20} + T_X\\\\\nP'.y = P.x * M_{01} + P.y * M_{11} + P.z * M_{21} + T_Y\\\\\nP'.z = P.x * M_{02} + P.y * M_{12} + P.z * M_{22} + T_Z\n\\end{array}$$\n\nHowever this is assuming that our matrix now has the size 4x3 and not 3x3 anymore. This is alright. We said that matrices could have any size. However we know that matrix multiplication can only be valid if their sizes are compatible. But we now try to multiply a point as a 1x3 matrix with a 4x3 matrix and theory tells us that this not possible. What shall we do? The solution is simple. We will add one additional column to the point to turn it into a 1x4 matrix and set the fourth coefficient of this point to 1. Our point now looks like this (x, y, z, 1). In computer graphics, it is a called a **homogeneous point** (or a point with **homogeneous coordinates**). With such a point we can easily encode translation in our matrix. See how it magically falls in place in the following code:\n\n$$\\begin{array}{l}\nP'.x = P.x * M_{00} + P.y * M_{10} + P.z * M_{20} + M_{30}\\\\\nP'.y = P.x * M_{01} + P.y * M_{11} + P.z * M_{21} + M_{31}\\\\\nP'.z = P.x * M_{02} + P.y * M_{12} + P.z * M_{22} + M_{32}\\end{array}$$\n\nThis is the theory. In order to encode translation, scale and rotation in a matrix we need to deal with points that have homogeneous coordinates. But because the fourth value is always 1 we never really explicitly define it in the code. We only define x, y, z and assume that there is a fourth value. The point-matrix code now looks like this:\n\n$$\\begin{array}{l}\nP'.x = P.x * M_{00} + P.y * M_{10} + P.z * M_{20} + M_{30}\\\\\nP'.y = P.x * M_{01} + P.y * M_{11} + P.z * M_{21} + M_{31}\\\\\nP'.z = P.x * M_{02} + P.y * M_{12} + P.z * M_{22} + M_{32}\\end{array}$$\n\nOur matrix is a now a 4x3 matrix. So you may wonder, how do we go from a 4x3 matrix to our final 4x4 matrix which is the form that is the most commonly used in CG? The fourth columns plays a role in perspective projection and for some other type of transformations that are not very common (such as the shear transformation), but generally it is simply set to (0, 0, 0, 1). What happens though when the coefficient of this column have different values than the default (we said it's uncommon but it happens some times)? Before we can answer this question, we first need to learn a few more things about homogenous points.\n\n## The Trick About Homogeneous Points\n\nPresenting a point as an homegeneous point is necessary to allow point-multiplication by [4x4] matrices however, in the code, this is only done implicitely, since, as we have explained, w is always 1. Our Point C++ class will not define the point type with four floats but only with three (x, y and z). Technically, if we were to make a multiplication of an homogeneous point by a [4x4] matrix, the w coordinate of the transformed point would be obtained by multiplying the point's coordinates by the coefficients of the matrix fourth column. However as we mentioned before, this column is almost always set to (0, 0, 0, 1). In that case, the value of w' (the w coordinate of the transformed point) should be 1 (w'=x*0+y*0+z*0+w(=1)*1=1) and the resulting transformed x', y' and z' coordinates can be used directly. But as we also mentionned briefly, this fourth column is not always set to (0, 0, 0, 1) particularly when you deal with projection matrices (matrices that project points to the screen). In these special cases, the result for w' can be different than 1 (which is intentional) but for this point to be usable as a Cartesian point, we need to normalize w' back to 1 by dividing it by itself which requires to divide the other coordinates (x', y' and z') by w' as well. In pseudo code it gives something like that:\n\n\n```cpp\nP'.x = P.x * M00 + P.y * M10 + P.z * M20 + M30;  \nP'.y = P.x * M01 + P.y * M11 + P.z * M21 + M31;  \nP'.z = P.x * M02 + P.y * M12 + P.z * M22 + M32;  \nw' = P.x * M03 + P.y * M13 + P.z * M23 + M33;  \n**if** (w' != 1 \u0026\u0026 w' != 0) {  \n\tP'.x /= w', P'.y /= w', P'.z /= w';  \n}  \n```\nAs you can see we don't need to declare a w coordinate in the Point's type. We can just compute a value for w' on the fly as we assume implicitely that the point we are transforming is a Cartesian point which you can see as a homogeneous point whose w coordinate is not declared explicitly (because it's always equal to 1). However, if the matrix we are multiplying the point with is a projection matrix for instance, the result of w' might be different than 1. In this particular case, we need to normalize all the coordinates of P' to set it back to 1. Once this is done, we get a point which we can use in our Cartesian coordinate system again.\n\nAll you need to remember is that generally, you will never have to care about homogeneous coordinates, excepted when points are multiplied by a perspective projection matrix. However, you will actually probably not come across this issue if you work on a ray tracer, as this special type of matrix is not used in ray tracing. If you still struggle to understand what this w coordinate is, and what it is used for, check the lesson on Perspective and Orthographic Projection Matrix in the 3D Basic Rendering section. You will learn how to project 3D points onto the image plane, using perspective projection. The concept of homogeneous point should then make more sense.\n\nWhen it comes to implement this function in C++ there are usually two schools to deal with this problem. Some developers like the code for point-matrix multiplication to always compute a value for w' and divide the coordinates of the transformed points by the value of w' if it is different than 1. However, this is only useful when we multiply points by projection matrices which is not that often (particularly in raytracers). It might end up that in 99% of cases, computing w' and checking if it is different than 1 is a waste of CPU time. One might ignore w and w' all together and always assume the point-matrix multiplication code will be used with matrices whose fourth column is always set to (0, 0, 0, 1). When dealing with the special case of projection matrices, you could come up with another specific function that will compute w' and divide x' y' and z' by w's value. You can chose between a generic solution but not completely optimised and a more optimised solution which requires though two functions instead of one. For the sake of clarity, we will provide here an implementation for the first solution:\n\n```cpp\nvoid multVecMatrix(**const** Vec3\u003cT\u003e \u0026src, Vec3\u003cT\u003e \u0026dst) **const**  \n{  \n\tdst.x = src.x * m[0][0] + src.y * m[1][0] + src.z * m[2][0] + m[3][0];  \n\tdst.y = src.x * m[0][1] + src.y * m[1][1] + src.z * m[2][1] + m[3][1];  \n\tdst.z = src.x * m[0][2] + src.y * m[1][2] + src.z * m[2][2] + m[3][2];  \n\tT w = src.x * m[0][3] + src.y * m[1][3] + src.z * m[2][3] + m[3][3];  \n\t**if** (w != 1 \u0026\u0026 w != 0) {  \n\tdst.x = x / w;  \n\tdst.y = y / w;  \n\tdst.z = z / w;  \n}  \n}  \n```\n## Transforming Vectors\n\nVectors somehow are simpler to transform than points. Vectors, as we said in the preamble of this lesson, represent direction whereas points represent position in space. As such **vectors do not need to be translated** because their position is in fact meaningless. With vectors we are only interested in the direction in which they point and eventually their length which is sometimes an information we need to solve geometric or shading problems. Vectors can be transformed like we transformed point but we can remove the part of the code that is responsible for the translation bit. The code used to transform vectors looks like this (compare it with the code to transform points).\n\n\n```cpp\nV'.x = V.x * M00 + V.y * M10 + V.z * M20;  \nV'.y = V.x * M01 + V.y * M11 + V.z * M21;  \nV'.z = V.x * M02 + V.y * M12 + V.z * M22;  \n```\nHere is the code that transforms vectors:\n\n\n```cpp\nvoid multDirMatrix(**const** Vec3\u003cT\u003e \u0026src, Vec3\u003cT\u003e \u0026dst) **const**  \n{  \n\tdst.x = src.x * m[0][0] + src.y * m[1][0] + src.z * m[2][0];  \n\tdst.y = src.x * m[0][1] + src.y * m[1][1] + src.z * m[2][1];  \n\tdst.z = src.x * m[0][2] + src.y * m[1][2] + src.z * m[2][2];  \n}  \n```\n## Transforming Normals\n\nAs strange as it sounds, you might think that normals are just like vectors and can be transformed using the same code. In fact it is not that simple and we will explained why in the chapter on [Transforming Normals](https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/transforming-points-and-vectors#).\n\n## Conclusion\n\nIn this chapter we have learned why we use [4x4] rather than [3x3] matrices. The coefficients c30\n\nc31 and c32\n\nhold the translation values. Now that the matrix has size [4x4] we need to extend the size of the point by adding an extra coordinate. We can do this by implicitly treating points as Homegenous points but to continue using them in a Cartesian coordinate system (as Cartesian points) we need to be sure that w, this fourth coordinate is always set to 1. Most of the time the matrices we use to transform a point will have their fourth column set to (0, 0, 0, 1) and with these matrices, the value of w' should always be 1. However in special cases (projection matrix, shear transform) the value of w' might be different than 1 in which case you will need to normalize it (we divided w' by itself) which requires to also divide the other transformed coordinates x', y' and z' by w'.\n\nMatrices are not the only method to \"encode\" or store transformations. You can also for instance represent a rotation using a method proposed initially by Euler. The idea is to define a rotation in this case as a vector and an angle representing a rotation around that vector. You can also use a technique developed by [Benjamin Olinde Rodrigues](https://en.wikipedia.org/wiki/Olinde_Rodrigues). Given an axis r^\n\n, an angle θ and a point p, the rotation is given by the following equation:\n\n$R(r^,θ,p)=pcosθ+(r^×p)sinθ+r^(r^⋅p)(1−cosθ)$.\n\nWhile uncommon, both techniques are used to solve problems in computer graphics from time to time. Rotations in computer graphics are also commonly done using **quaternions**. Matrices themselves have certain limitations especially when it comes to rotation by an angle greater than 360 degrees. This can lead to a problem known as the [gimbal lock](https://en.wikipedia.org/wiki/Gimbal_lock). Matrices are also hard to interpolate which is often needed in rendering to compute the motion blur of objects. For this particular reason, quaternions are generally preferred though they are considered to be generally harder to understand. A lesson is devoted to the topic of quaternions alone [link].","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/Sources/Scratchpixel/row-major-vs-column-major-vector-scratchpixel":{"title":"{{title}}","content":"\n# matrix math\n\nEarlier in this lesson, we have explained that vectors (or points) can be written down as [1x3] matrices (one row, three columns). Note however that we could have also written them down as [3x1] matrices (three rows, one column). Technically, these two ways of expressing points and vectors as matrices are perfectly valid and choosing one mode or the other is just a matter of convention.\n\nVector written as [1x3] matrix:$$V=\\begin{bmatrix}x \u0026 y \u0026 z\\end{bmatrix}$$\n\nVector written as [3x1] matrix: $$V=\\begin{bmatrix}x\\\\y\\\\z\\end{bmatrix}$$\n\nIn the first example ([1x3] matrix) we have expressed our vector or point in what we call the **row-major order**: the vector (or point) is written as a row of three numbers. In the second example, we say that that points or vectors are written in **column-major order**: we write the three coordinates of the vector or point vertically, as a column.\n\nRemember that we express points and vectors as matrices to multiply them by [3x3] transformation matrices (for the sake of simplicity we will work with [3x3] rather than [4x4] matrices). We have also learned that we can only multiply matrices when the number of columns from the left matrix and the number of rows from the right matrix are the same. In other words the matrices [m x p] and [p x n] can be multiplied with each other but the matrices [p x m] and [p x n] can't. Note that if we write a vector as a [1x3] matrix we can multiply it by a [3x3] matrix (assuming this [3x3] matrix is on the right inside of the multiplication), but if we write this vector as a [3x1] matrix then we can't multiply it by a [3x3] matrix. This is illustrated in the following examples. The inner dimensions (3 and 3) of the matrices involved in the multiplication are the same (in green) so this multiplication is valid (and the result is a transformed point written in the form of a [1x3] matrix):\n\n$$[1 \\times \\color{\\green}{3}]*[\\color{\\green}{3} \\times 3] = \\begin{bmatrix}x \u0026 y \u0026 z\\end{bmatrix} * \\begin{bmatrix}\nc_{00}\u0026c_{01}\u0026{c_{02}}\\\\\nc_{10}\u0026c_{11}\u0026{c_{12}}\\\\\nc_{20}\u0026c_{21}\u0026{c_{22}}\\\\\n\\end{bmatrix} =\\begin{bmatrix}x'\u0026y'\u0026z'\\end{bmatrix}$$\n\nThe inner dimensions (1 and 3) of the matrices involved in the multiplication are not the same (in red) so this multiplication is not possible:\n\n$$3 \\times \\color{\\red}{1}]*[\\color{\\red}{3} \\times 3] \\rightarrow \\begin{bmatrix}x\\\\ y\\\\z\\end{bmatrix} * \\begin{bmatrix} c_{00}\u0026c_{01}\u0026{c_{02}}\\\\ c_{10}\u0026c_{11}\u0026{c_{12}}\\\\ c_{20}\u0026c_{21}\u0026{c_{22}}\\\\ \\end{bmatrix}$$\n\nSo what do we do? The solution to this problem is not to multiply the vector or the point by the matrix, but the matrix M by the vector V. In other words, we move the point or vector to the right inside of the multiplication:\n\n[$$[{3} \\times \\color{\\green}{3}]*[\\color{\\green}{3} \\times {1}] \\rightarrow \\begin{bmatrix} c_{00}\u0026c_{01}\u0026{c_{02}}\\\\ c_{10}\u0026c_{11}\u0026{c_{12}}\\\\ c_{20}\u0026c_{21}\u0026{c_{22}}\\\\ \\end{bmatrix} * \\begin{bmatrix}x\\\\y\\\\z\\end{bmatrix} = \\begin{bmatrix}x'\\\\y'\\\\z'\\end{bmatrix}$$\n\nNote that the result of this operation is a transformed point written in the form of a [3x1] matrix. So we get a point to start with and we finish with a transformed point which is what we want. Problem solved. To summarize, when by convention we decide to express vectors or points in row-major order ([1x3]), we need to put the point on the left side of the multiplication and the [3x3] on the right inside of the multiplication sign. This is called in mathematics, a **left** or **pre-multiplication**. If you decide to write the vectors in column-major order instead ([3x1]), the [3x3] matrix needs to be on the left side of the multiplication and the vector or point on the right side. This is called a **right** or **post-multiplication**.\n\n\nwe need to be careful about how these terms are actually used. For instance Maya documentation says \"the matrices are post-multiplied in Maya. For example, to transform a point P from object-space to world-space (P') you would need to post-multiply by the worldMatrix. (P' = P x WM)\", which is confusing because it's actually a pre-multiplication but they are speaking about the position of the matrix with respect to the point in this particular case. That's actually an incorrect use of the terminology. It should have been written that in Maya, points and vectors are expressed as row-major vectors and that they are therefore pre-multiplied (meaning the point or vector appears before the matrix in the multiplication).\n\n\nThe following table summarizes the differences between the two conventions (where P, V and M respectively stands for Point, Vector and Matrix).\n\nRow-major order\n\n$$P/V=\\begin{bmatrix}x \u0026 y \u0026 z\\end{bmatrix}$$\n\nLeft or pre-multiplication\n\n$P/V * M$\n\nColumn-major order\n\n$$P/V=\\begin{bmatrix}x \\\\ y \\\\ z\\end{bmatrix}$$\n\nRight or post-multiplication\n\n$M * P/V$\n\nNow that we have learned about these two conventions you might ask \"isn't that just about writing things on paper?\". We know how to compute the product of two matrices A and B: multiply each coefficient within A's current row by the associated elements within B's current column and sum up the result. Lets apply this formula using the two conventions and lets compare the results:\n\n### Row-major order\n\n$${ \\begin{bmatrix}x \u0026 y \u0026 z\\end{bmatrix} * \\begin{bmatrix}\na \u0026 b \u0026 c \\\\\nd \u0026 e \u0026 f \\\\\ng \u0026 h \u0026 i\n\\end{bmatrix} }$$\n\n$${ \\begin{array}{l}x' = x * a + y * d + z * g\\\\y' = x * b + y * e + z * h\\\\z' = x * c + y * f + z * i\\end{array} }$$\n\n### Column-major order\n\n$${ \\begin{bmatrix} \na \u0026 b \u0026 c \\\\\nd \u0026 e \u0026 f \\\\\ng \u0026 h \u0026 i\n \\end{bmatrix} * \\begin{bmatrix}x\\\\y\\\\z\\end{bmatrix} }$$\n\n$${\\begin{array}{l}x' = a * x + b * y + c * z\\\\y' = d * x + e * y + f * z\\\\z' = g * x + h * y + i * z\\end{array} }$$\n\nMultiplying a point or a vector by a matrix should give us the same result whether we use row- or column-major order. If you use a 3D application to rotate a point by a certain angle around the z-axis, you expect the point the be in certain position after the rotation no matter what internal convention the developer used to represent points and vectors. However as you can see from looking at the table above, multiplying a row-major and column-major point (or vector) by the same matrix clearly wouldn't give us the same result. To get back on our feet, we would actually need to **transpose** the [3x3] matrix used in the column-major multiplication to be sure that x', y' and z' are the same (if you need to remember what the transpose of a matrix is, check the chapter on [Matrix Operations](http://localhost/lessons/mathematics-physics-for-computer-graphics/geometry/matrix-operations)). Here is what we get:\n\n### Row-major order\n\n$${ \\begin{bmatrix}x \u0026 y \u0026 z\\end{bmatrix} * \\begin{bmatrix}\na \u0026 b \u0026 c \\\\\nd \u0026 e \u0026 f \\\\\ng \u0026 h \u0026 i\n\\end{bmatrix} }$$\n\n$${\\begin{array}{l}x' = x * a + y * d + z * g\\\\y' = x * b + y * e + z * h\\\\z' = x * c + y * f + z * i\\end{array} }$$\n\n### Column-major order\n\n$${ \\begin{bmatrix} \na \u0026 d \u0026 g \\\\\nb \u0026 e \u0026 h \\\\\nc \u0026 f \u0026 i\n\\end{bmatrix} * \\begin{bmatrix}x\\\\y\\\\z\\end{bmatrix} }$$\n\n$${\\begin{array}{l}x' = a * x + d * y + g * z\\\\y' = b * x + e * y + h * z\\\\z' = c * x + f * y + i * z\\end{array} }$$\n\nIn conclusion, going from row-major order to column-major order not only involves to swap the point or vector and the matrix in the multiplication but also to transpose the [3x3] matrix, to guarantee that both conventions give the same result (and vice versa).\n\nFrom these observations, we can see that any series of transformations applied to a point or a vector when a row-major convention is used can be written in sequential order (or reading order). Imagine for instance that you want to translate point P with matrix T then rotate it around the z-axis with Rz then around the y-axis with Ry. You can write:\n\n$P′=P∗T∗Rz∗Ry$\n\nIf you were to use a column-major notation you would need to call the transform in reverse order (which one might find counter-intuitive):\n\n$P′=Ry∗Rz∗T∗P$\n\nSo you may think, \"there must be a reason to prefer one system to another\". In fact, both conventions are correct and give us the same result, but for some technical reasons, Maths and Physics texts generally treat vectors as column vectors.\n\nOrder of transformation when we use colum-major matrices is more similar in mathematics to the way we write function evaluation and composition.\n\nThe row-major matrix convention however makes matrices easier to teach which is the reason we use it for Scratchapixel (as well as Maya, DirectX. They are also defined as the standard in the RenderMan specifications). However some 3D APIs such as OpenGL, use a column-major convention.\n\n## Implication in Coding: Does it Impact Performance?\n\nThere is another potentially very important aspect to take into consideration if you need to choose between row-major and column-major, but this has nothing to do really with the conventions themselves and how practical one is over the other. It has more to do with the computer and the way it works. Remember that we will be dealing with [4x4] matrices. Typically the implementation of a matrix in C++ looks like this:\n\n```cpp\n**class** Matrix44  \n{  \n\t...  \n\t**float** m[4][4];  \n};  \n```\nAs you can see the 16 coefficients of the [4x4] matrix are stored in a two-dimensional array of floats (or doubles depending on the precision you need. Our C++ Matrix class is a template). Which means that in memory the 16 coefficients will be laid out in the following manner: c00, c01, c02, c03, c10, c11, c12, c13, c20, c21, c22, c23, c30, c31, c32, c33. In other words, they are laid out contiguously in memory. Now lets see how these coefficients are accessed in a vector-matrix multiplication where vectors are written in row-major order:\n\n\n\n```cpp\n// row-major order  \nx' = x * c00 + y * c10 + z * c20  \ny' = x * c01 + y * c11 + z * c21  \nz' = x * c02 + y * c12 + z * c22  \n```\n\nAs you can see the elements of the matrix for x' are not access sequentially. In other words to compute x' we need the 1st, 5th and 9th float of the matrix 16 floats array. To compute y' we need to access the 2nd, 6th and 10th float of this array. And finally for z' we need the 3rd, 7th and 11th float from the array. In the world of computing, accessing elements from an array in a non-sequential order, is not necessarily a good thing. It actually potentially degrades the cache performance of the CPU. We won't go into too much details here, but lets just say that the closest memory that the CPU can access to is called a cache. This cache is very fast to access to but can only store a very limited number of data. When the CPU needs to access some data, it first check if it exists in the cache. If it does the CPU access this data right away (cache hit), but it doesn't (cache miss), it first needs to create an entry in the cache for it, then copy to this location the data from the main memory. This process is obviously more time consuming than when the data already exists in the cache so ideally we want to avoid cache misses as much as possible. Additionally to copying the particular data from main memory, the CPU also copies a chunk of the data that lives right next to it (for instance the next 24 bytes), because hardware engineers figured that if your code needed to access an element of an array for instance, it was likely to access the elements following it soon after. Indeed, in programs, we often loop over elements of an array in sequential order and this assumption is therefore likely to be true. Applied to our matrix problem, accessing the coefficients of the matrix in non sequential order can therefore be a problem. Assuming the CPU loads the requested float in the cache plus the 3 floats next to it, our current implementation might lead to many cache misses, since the coefficients used to compute x' y' and z' are 5 floats apart in the array. On the other hand, if you use a column-major order notation, computing x' for instance require to access the 1st, 2nd and 3rd elements of the matrix.\n\n \n```cpp\n// column-major order  \nx' = c00 * x + c01 * y + c02 * z  \ny' = c10 * x + c11 * y + c12 * z  \nz' = c20 * x + c21 * y + c22 * z  \n```\n\t\nThe coefficients are accessed in sequential order which also means that we make a good use of the CPU cache mechanism (only 3 cache misses instead of 9 in our example). In conclusion we can say that from a programming point of view, implementing our point- or vector-matrix multiplication using a colum-major order convention might be better, performance wise, than the version using the row-major order convention. Practically though, we haven't been able to demonstrate that this was actually the case (when you compile your program using the optimisation flags -O, -O2 or -O3, the compiler can do the work for you by optimising loops over multi-dimensionals arrays) and we have been successfully using the row-major order version without any lose of performance compared to a version of the same code using a column-major order implementation.\n\n```cpp\n\ntemplate\u003ctypename T\u003e  \n**class** Vec3  \n{  \n\t**public**:  \n\tVec3(T xx, T yy, T zz) : x(xx), y(yy), z(zz) {}  \n\tT x, y, z, w;  \n};  \n  \ntemplate\u003ctypename T\u003e  \n**class** Matrix44  \n{  \n\t**public**:  \n\tT m[4][4];  \n\tVec3\u003cT\u003e multVecMatrix(**const** Vec3\u003cT\u003e \u0026v)  \n\t{  \n\t#ifdef ROWMAJOR  \n\t**return** Vec3\u003cT\u003e(  \n\tv.x * m[0][0] + v.y * m[1][0] + v.z * m[2][0],  \n\tv.x * m[0][1] + v.y * m[1][1] + v.z * m[2][1],  \n\tv.x * m[0][2] + v.y * m[1][2] + v.z * m[2][2]);  \n\t#else  \n\t**return** Vec3\u003cT\u003e(  \n\tv.x * m[0][0] + v.y * m[0][1] + v.z * m[0][2],  \n\tv.x * m[1][0] + v.y * m[1][1] + v.z * m[1][2],  \n\tv.x * m[2][0] + v.y * m[2][1] + v.z * m[2][2]);  \n\t#endif  \n}  \n};  \n\n\t#include \u003ccmath\u003e  \n\t#include \u003ccstdlib\u003e  \n\t#include \u003ccstdio\u003e  \n\t#include \u003cctime\u003e  \n\n\t#define MAX_ITER 10e8  \n\n\t**int** main(**int** argc, **char** **argv)  \n{  \n\tclock_t start = clock();  \n\tVec3\u003cfloat\u003e v(1, 2, 3);  \n\tMatrix44\u003cfloat\u003e M;  \n\t**float** *tmp = \u0026M.m[0][0];  \n\t**for** (**int** i = 0; i \u003c 16; i++) *(tmp + i) = drand48();  \n\t**for** (**int** i = 0; i \u003c MAX_ITER; ++i) {  \n\tVec3\u003cfloat\u003e vt = M.multVecMatrix(v);  \n}  \n\tfprintf(stderr, \"Clock time %f\\n\", (clock() - start) / float(CLOCKS_PER_SEC));  \n\t**return** 0;  \n}  \n```\n\n## Row-major and Column-Major Order in Computing\n\nFor the sake of completeness, lets just mention as well, that terms row-major and column-major order can also be used in **computing** to describe the way elements of multidimensional arrays are laid out in memory. In row-major order, the elements of a multi-dimensional array are laid out one after the other, from the left to right, top to bottom. This is the method used by C/C++. For example the matrix:\n\n$$M = \\begin{bmatrix}1\u00262\u00263\\\\4\u00265\u00266\\end{bmatrix}$$\n\ncould be written in C/C++ as:\n\n```cpp\n**float** m[2][3]={{1, 2, 3}, {4, 5, 6}};  \n```\nand the elements of this array would be laid out contiguously in linear memory as:\n\n\n```\n1 2 3 4 5 6  \n```\nIn column-major order, which is used by languages such as FORTRAN and MATLAB, elements of the matrix are stored in memory from top to bottom, left to right. Using the same matrix example, the elements of the matrix would be stored (and accessed) in memory in the following way:\n\n```matlab\n1 4 2 5 3 6  \n```\n\nKnowing how the elements of a matrix are laid out in memory is important especially when you try to access them using pointer offset and for loop optimisation (we have explained previously in this chapter that it could affect the CPU cache performance). However since we will only be considering C/C++ as our programming language, column-major ordering (applied to computing) is of no great interest to us. We are only mentioning what the terms mean in computing, so that you are aware that they might describe two different things depending on the context in which they are used. You should be careful to not mix them up. In the context of mathematics, they describe whether you treat vectors (or points) as rows of coordinates or as columns and the second, and in the context of computing, they describe the way a certain programming language stores and accesses elements of multi-dimensional array (which matrices are) in memory.\n\nOpenGL is an interesting case in that regard. When GL was initially created, the developers chose the row-major vector convention. Developers who extended OpenGL though thought they should go back to to column-major vector which they did. However for compatibility reasons, they didn't want to change the code for the point-matrix multiplication and decided instead to change the order in which the coefficients of the matrix were stored in memory. In other words OpenGL stores the coefficients in column-major order which means that the translation coefficients m03, m13 and m23 from a matrix using column-major vector have indices 13, 14, 15 in the float array as would the translation coefficients m30, m31 and m32 from a matrix using row-major vector.\n\n## Summary\n\nThe differences between the two conventions are summarised in the following table:\n\n### Row-major vector (Mathematics)\n$$P/V=\\begin{bmatrix}x \u0026 y \u0026 z\\end{bmatrix}$$\n\n\nPre-multiplication $vM$\n\nCall order and the order the transforms are applied is the same: \"take P, transform by T, transform by Rz, transform by Ry\" is written as $P′=P∗T∗Rz∗Ry$\n\nAPI: Direct X, Maya\n\nThe rows of the matrix represent the bases (or axes) of a coordinate system (red: x-axis, green: y-axis, blue:z-axis)\n\n$${\\begin{bmatrix} \\color{red}{c_{00}}\u0026 \\color{red}{c_{01}}\u0026\\color{red}{c_{02}}\u00260\\\\ \\color{green}{c_{10}}\u0026 \\color{green}{c_{11}}\u0026\\color{green}{c_{12}}\u00260\\\\ \\color{blue}{c_{20}}\u0026 \\color{blue}{c_{21}}\u0026\\color{blue}{c_{22}}\u00260\\\\0\u00260\u00260\u00261 \\end{bmatrix} }$$\n\nThe translation values are stored in the c30, c31 and c32 elements.\n\n$${\\begin{bmatrix}\n1\u00260\u00260\u00260\\\\\n0\u00261\u00260\u00260\\\\\n0\u00260\u00261\u00260\\\\\nTx\u0026Ty\u0026Tz\u00261\\end{bmatrix} }$$\n\n\nTranspose the matrix to use it as a column-major ordered matrix\n\n\n### Column-major vector (Mathematics)\n\n\n\n$$P/V=\\begin{bmatrix}x \\\\ y \\\\ z\\end{bmatrix}$$\n\n\n\nPost-multiplication $Mv$\n\n\n\nCall order is the reverse of the order the transforms are applied: \"take P, transform by T, transform by Rz, transform by Ry\" is written as P′=Ry∗Rz∗T∗P\n\n\n\nAPI: OpenGL, PBRT, Blender\n\n\n\nThe columns of the matrix represent the bases (or axes) of a coordinate system (red: x-axis, green: y-axis, blue:z-axis)\n\n$${ \\begin{bmatrix} \\color{red}{c_{00}}\u0026 \\color{green}{c_{01}}\u0026\\color{blue}{c_{02}}\u00260\\\\ \\color{red}{c_{10}}\u0026 \\color{green}{c_{11}}\u0026\\color{blue}{c_{12}}\u00260\\\\ \\color{red}{c_{20}}\u0026 \\color{green}{c_{21}}\u0026\\color{blue}{c_{22}}\u00260\\\\0\u00260\u00260\u00261\\end{bmatrix} }$$\n\n\n\nThe translation values are stored in the c03, c13 and c23 elements.\n\n$${\\begin{bmatrix}\n1\u00260\u00260\u0026Tx\\\\\n0\u00261\u00260\u0026Ty\\\\\n0\u00260\u00261\u0026Tz\\\\\n0\u00260\u00260\u00261\\end{bmatrix} }$$\n\n\nTranspose the matrix to use it as a row-major ordered matrix\n\n### Row-major matrix (Computing)\nAPI: Direct X, Maya, PBRT\n\n### Column-major matrix (Computing)\nAPI: OpenGL\n\n---\n\nA reader posted a [question on Stackoverflow](http://stackoverflow.com/questions/17784791/4x4-matrix-pre-multiplication-vs-post-multiplication) suggesting the table above was confusing. The topic is confusing and despite our best attempt to shed some light on the matter, many people still get confused about it. We thought our answer on Stackoverflow could hopefully bring another insight on the question.\n\nYou have the theory (what you do in mathematics with a pen and paper) and what you do with your implementation (C++). These are two different problems.\n\nMathematics: you can use two notations, either column or row major. With row major vector, on paper, you need to write the vector-matrix multiplication vM where v is the row vector (1x4) and M your 4x4 matrix. Why? Because you can mathematically only write [1x4]*[4x4], and not the other way around. Similarly if you use column, then the vector needs to be written down vertically, or in notation [4x1] (4 rows, 1 column). Thus, the multiplication with a matrix can only be written as follows: [4x4][4x1]. Note that the matrix is put in front of the vector: Mv. The first notation is called a left or pre-multiplication (because the vector is on the left side of the product) and the second (Mv) is called a right or post-multiplication (because the vector is on the right side of the product). As you see the terms derive from whether the vector is on the left side (in front of, or \"pre\") or on the right side (after, or \"post\") of the matrix.\n\nNow, if you need to transform a vector (or a point) then you need to pay attention to the order of multiplication, when you write them down on paper. If you want to translate something with matrix T and then rotate with R and then scale with S, then in a column major world, you need to to write v' = S * R * T * v. In a row major world you need to write v' = v * T * R * S.\n\nThat's for the theory. Let's call that the **row/column vector convention**.\n\nComputer: then comes the point when you decide to implement this in C++ say. The good thing about this is that C++ doesn't impose you anything about anything. You can map the values of your matrix's coefficients in memory the way you want, and you can write the code to perform a matrix multiplication by another matrix the way you want. Similarly how you access the coefficients for a vector-matrix multiplication is completely up to you. You need to be make a clear distinction between how you map your coefficients in memory and what conventions you need to use from a mathematical point of you view to represent your vectors. These are two independent problems. Let's call this part the **row/column-major layout**.\n\nFor instance you can declare a matrix class as an array of say 16 contiguous floats. That's fine. Where coefficients m14, m24, m34 represent the translation part of the matrix (Tx, Ty, Tz), so you assume your \"convention\" is row-major even though you are told to use OpenGL matrix convention which is said to be column-major. Here the possible confusion comes from the fact that the mapping of the coefficients in memory is different from the mental representation you are making yourself of a \"column-major\" matrix. You code \"row\" but you were said to use (from a mathematical point of view) \"column\", hence your difficulty to make sense of whether you do things right or wrong.\n\nWhat's important is to see a matrix as a representation of a coordinate system defined by three axes, and a translation. Where and how you store this data in memory is completely up to you. Assuming the three vectors representing the three axes of the coordinate system are named AX(x,y,z), AY(x,y,z), AZ(x,y,z), and the translation vector is denoted by (Tx, Ty, Tz), then mathematically if you use column vector you have:\n\n$$M = \\begin{bmatrix} AXx \u0026 AYx \u0026  AZx \u0026 Tx\\\\ AXy \u0026 AYy \u0026 AZy \u0026 Ty \\\\ AXz \u0026 AYz \u0026  AZz \u0026 Tz \\\\ 0 \u0026 0 \u0026 1 \u0026 1\\end{bmatrix}$$\n\nThe axes of the coordinates system are written vertically. Now if you have if you use row-major:\n\n$$M = \\begin{bmatrix} AXx \u0026 AXy \u0026  AXz \u0026 0\\\\ AYx \u0026 AYy \u0026 AYz \u0026 0 \\\\ AZx \u0026 AZy \u0026  AZz \u0026 0 \\\\ Tx \u0026 Ty \u0026 Tz \u0026 1\\end{bmatrix}$$\n\nThe axes of the coordinate system are written horizontally. So the problem now when it comes to computer world, is how to your store these coefficients in memory. You can as well do:\n\n```cpp\n**float** m[16] = {  \nAXx, AXy, AXz, 0,  \nAYx, AYy, AYz, 0,  \nAZx, AZy, AZz, 0,  \nTx, Ty, Tz, 1};  \n```\nDoes it tell you though which convention you use? No. You can also write:\n\n\n```\n**float** m[16] = {  \nAXx, AXy, AXz, Tx,  \nAYx, AYy, AYz, Ty,  \nAZx, AZy, AZz, Tz,  \n0, 0, 0, 1};  \n```\nor:\n```cpp\n**float** m[16] = {  \nAXx, AYx, AZx, Tx,  \nAXy, AYy, AZy, Ty,  \nAXz, AYz, AZz, Tz,  \n0, 0, 0, 1};  \n```\nAgain, that doesn't give you a particular indication of which \"mathematical\" convention you use. You are just storing 16 coefficients in memory in different ways and that's perfectly fine as long as you know what that way is, so that you can access them appropriately later on. Now keep in mind that a vector multiplied by a matrix should give you the same vector whether you use a row- or column- mathematical notation. Thus what's important really is that you multiply the (x,y,z) coordinates of your vector by the right coefficients from the matrix, which requires the knowledge of how \"you\" have decided to store the matrix coefficient in memory:\n\n```cpp\nVector3 vecMatMult (\n\tVector3 v,  \n\t**float** AXx, **float** AXy, **float** AXz, **float** Tx,  \n\t**float** AYx, **float** AYy, **float** AYz, **float** Ty,  \n\t**float** AZz, **float** AZy, **float** AZz, **float** Tz\n)  \n{  \n\t**return** Vector3(  \n\tv.x * AXx + v.y * AYx + v.z * AZx + Tx,  \n\tv.x * AXy + v.y * AYy + v.z * AZy + Ty,  \n\tv.x * AXz + v.y * AZz + v.z * AZz + Tz  \n}  \n```\nWe wrote this function to underline the fact that no matter which convention you use, the resulting of the vector * matrix multiplication is just a multiplication and an addition between the vector's input coordinates and the coordinate system's axis coordinates AX, AY and AZ (regardless of the notation you use, and regardless of the way you store them in memory). If you use:\n\n\n```cpp\n**float** m[16] = {  \n\tAXx, AXy, AXz, 0,  \n\tAYx, AYy, AYz, 0,  \n\tAZx, AZy, AZz, 0,  \n\tTx, Ty, Tz, 1\n};  \n```\nYou need to call:\n\n```\nvecMatMult(v, m[0], m[1], m[2], m[12], m[4], m[5], m[6], m[13], ...  \n```\nIf you use:\n```cpp\n**float** m[16] = {  \n\tAXx, AYx, AZx, Tx,  \n\tAXy, AYy, AZy, Ty,  \n\tAXz, AYz, AZz, Tz,  \n\t0, 0, 0, 1\n};  \n```\nYou need to call:\n```cpp\nMatMult(v, m[0], m[4], m[8], m[3], m[1], m[5], m[9], m[10], ...  \n```\nDoes that tell you which convention you use? No. You just need to call the right coefficients in the right places when you do a vec * mat multiplication. And that's all there is to it, as disconcerting as it may seem. Now things are slightly different when it comes to mat * mat multiplication. You can assume that the order in which you multiply the matrices is not the same. So R * S * T is not the same as T * S * R. The order indeed matters. Now again if you use \"row major\" then mathematically you need to write:\n\n```cpp\nmt11 = ml11 * mr11 + ml12 * mr21 + ml13 * mr31 + ml14 * mr41  \n```\nwhere ml is the left hand matrix and mr the right hand one: mt = ml * mr. However note that we haven't been using brackets [] for the access indices because we don't want to suggest we are accessing elements stored in a 1D array here. We are just talking about the coefficients of matrices as written on paper. If you want to write this in C++, then it all depends on how you have stored your coefficients in memory as suggested above.","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/assignments/3D-Assignments":{"title":"3D-Assignments","content":"\n# Assignments\n","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/assignments/Edge-Flow-and-Artifacts":{"title":"Edge Flow and Artifacts Assignment","content":"\n#todo \n- [x] Outline each exercise\n- [x] explain the addons that will be used\n- [x] Create criteria for each exercise\n- [x] create short training videos for tools and procedures\n\n\n\n## Exercises\n--\n### Topology\n1. from 4 different planes, create 1-2, 1-3, 1-4, 1-6 polygon strips\n2. redirect edge flow on a grid in 3 different ways\n3. create a hole in flat grid\n4. create a smooth tapering bevel with subd in mind\n\n### Fixing Meshes\n1. Fix non manifold geometry\n2. Fix hidden faces\n3. Fix overlapping geo\n4. Correct Bevel errors\n\n---\n## Criteria\n\n\n| Points Possible | Criteria |\n| --------------- | -------- |\n| +1              | 1.       |\n| +5              | 2.       |\n| +3              | 3.       |\n| +1              | 4.       |\n\n---\n## Videos\n- [x] \n\n---\n\n## Resources\n[[notes/General/CG-Fundimentals/resources/Topology Resources|Topology Resources]]\n","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/assignments/Grease-Pencil-Exercise":{"title":"Grease Pencil Exercise","content":"\n# What to Turn in\n- your completed blend file\n- A quick OBS screen-capture with you talking about your assignment.\n\n---\n# Objectives\n\nDownload the Blend file -\u003e [Blend File](https://github.com/benshurts/CG-Knowledge-Garden/blob/main/3D-Modeling/blender/assignments/grease-pencil/grease-pencil-example.blend)\nWatch the main video! -\u003e https://youtu.be/lyupZ87uB7w\n\n\n\n## Exercises\n1. Draw a sphere with 3 circles using the view-plane\n2. Create Fill layer and fill the shape with a fill\n3. Set up a mask between two layers\n4. Draw on object\n5. Set up Grease-pencil Outline\n6. Set up Color-Attribute mode\n7. Do a quick doodle\n\n\n\n---\n# Other Resources\n\n[Grease Pencil #1: Basics of Interface | Blender 2.82 | Tutorial - YouTube](https://www.youtube.com/watch?v=w3O-t_dkoBU)\n[Grease Pencil New Mask Features | Blender Grease Pencil - YouTube](https://www.youtube.com/watch?v=lI0V-0UuhmE)\n[Blender Quick Tip: Exploring the Grease Pencil color palette - YouTube](https://www.youtube.com/watch?v=4VpvaSbh8KA)\n[Blender Quick Tip: Create and Import Custom GP Brushes - YouTube](https://www.youtube.com/watch?v=6lk9Y2s6bQw)\n[Blender Quick Tip: Create and Import Custom GP Brushes - YouTube](https://www.youtube.com/watch?v=6lk9Y2s6bQw)\n[Blender 2D/3D for beginners, drawing and animating with greasepencil (blender 2.8) - Part 1/2 - YouTube](https://www.youtube.com/watch?v=c57qq2nE3B0)\n[Grease pencil beginner tutorial | TOTORO | Blender 3.2 - YouTube](https://www.youtube.com/watch?v=SpFwrQOpQ0M)\n[Basic Blender Toon / Cel Shader Tutorial 2D Grease Pencil + 3D Modelling - YouTube](https://www.youtube.com/watch?v=hBztmFHkNQo)","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/assignments/Shading-and-Rendering-Exercise":{"title":"Shading and Rendering Exercise","content":"\n# Shading and Rendering Exercise\nTo complete this assignment correctly I want two things:\n1. Your blend file.\n2. An OBS screen capture with you talking about your work uploaded to youtube or vimeo and a link in the comments.\n3. your 3 rendered images\n\n---\n## Objectives\n\n\u003e[!IMPORTANT] If you do not watch the video I made you will probably not do things correctly\n\n1. Watch the videos in the *how to complete* section below\n2. create 3 unique materials per shaderball\n3. Render 9 images, 3 per shaderball\n4. Test 3 different HDRI enviornments for each render\n\n\n\n\n---\n## How to Complete\n\nDownload the Blend file -\u003e [Blend File](https://github.com/benshurts/CG-Knowledge-Garden/blob/main/3D-Modeling/blender/assignments/rendering/rendering-shading-exercise.blend)\n\nWatch my video -\u003e [Blender Shading and Rendering Exercise - YouTube](https://www.youtube.com/watch?v=ANWXuNR_W0w)\n\n1. Enable the first shaderball\n2. Switch to material preview mode\n3. Select all objects in collection\n4. Clear out existing material or create a new one\n5. Use cntrl+l to link material to all other objects\n6. Edit material\n7. Test your final render by switching to rendered mode\n8. Turn off rendered mode\n9. Hit f12 or click the render image button\n10. Save the final rendered image\n11. Repeat 2 more times for this shaderball\n12. Repeat for the remaining two shaderballs\n\n\n\n\n\n---\n## Important Workflows!\n\n\u003e[!IMPORTANT] These are things that I mention in my video. WATCH THE VIDEO!\n\n### Link Data\nYou can copy data to many other objects. In this assignment you will likely want to copy material assignments.\n1. Select multiple objects. \n\t1. Notice the difference in the outline colors. A lighter outline indicates the active selection. This is object you are going to copy *from*\n2. Press cntrl+L -\u003e a menu will pop up\n3. Click on *Link Materials*\n\n### Select all Objects in Collection\nCollections are not groups. For that reason they may work a little different than expected. In order to quickly select everything in a collection do the following:\n1. In your outliner find the collection where you want to select all of the objects.\n2. Right click on that collection\n3. Select *Select Objects*\n\n### Recursively Toggle View in Collection\nAgain, collections are not groups and the default behavior is not recursive. There is an easy fix though.\n\n\u003e[!IMPORTANT] In this assignment you MUST do this or you will not be able to complete it correctly!\n\nIn order to toggle *Render Visibility* in all children of an object or collection hold down *SHIFT* and click on the render icon in the outliner.\nThis works for the other toggles in the outliner as well.\n\n### Node Wrangler\nYou should have the *Node Wrangler*  addon enabled. This can really help with node based workflows in Blender. \nGo to *edit* / *preferences* / *addons* and find *Node Wrangler* and enable it.\n\n### Rendering and Saving Images\nIn order to do a final render you need to press *F12* or navigate to the *Render* menu and click *Render Image*\n\n\n### View Through Camera\nTo see what your camera sees in the viewport you need to click *0* on your numpad or the little camera button under the compass in the upper right of the 3D Viewport.\n\n\n---\n## Other Resources\n\n[Poly Haven](https://polyhaven.com/)\n\ngo to Textures and HDRIs\n[ArchiveCG](https://www.archivecg.com/library)\n\n\n### Other Relevant Videos\n\n[All 80+ Blender material nodes explained in under 30 minutes - YouTube](https://www.youtube.com/watch?v=cQ0qtcSymDI)\n[Explaining PBR Texture Maps - YouTube](https://www.youtube.com/watch?v=ZZf2X2ftXnE)\n[PBR for IDIOTS - YouTube](https://www.youtube.com/watch?v=vQcXLu49z28)\n[Specular vs Metalness Workflows for PBR Shading in Blender - YouTube](https://www.youtube.com/watch?v=mrNMpqdNchY)\n[I Learned Photorealism so You Don't Have To (Blender Tips) - YouTube](https://www.youtube.com/watch?v=tC-DGbvU5lo)\n\n### Extended Learning\nSome related content and material if you want to dig in more.\n\n[Capture and Create your own Custom 3D Materials | FULL WORKFLOW - YouTube](https://www.youtube.com/watch?v=rGBet4SZaXg)\n[My Favorite Shading trick for photorealistic Materials in Blender 3.0 - YouTube](https://www.youtube.com/watch?v=GATq1rIeC6Y)\n[Surface Imperfections - Handmade and Custom for 3D | FULL WORKFLOW - YouTube](https://www.youtube.com/watch?v=oWos9wUUlbg)\n[How do 3D Artists Achieve Cinematic Renders? | Workflow Explained! - YouTube](https://www.youtube.com/watch?v=mIFsCaR-XTI)\n[How I Create Cinematic CG Environments | FULL BREAKDOWN - YouTube](https://www.youtube.com/watch?v=Tc1stc-SYzA)\n[How to Make Cinematic Renders with Blender? - YouTube](https://www.youtube.com/watch?v=mjBofvCt-N0)\n[The Secret Ingredient to Photorealism - YouTube](https://www.youtube.com/watch?v=m9AT7H4GGrA)\n[Understanding Color - YouTube](https://www.youtube.com/watch?v=Qj1FK8n7WgY)\n\n#### Specific Follow-along tutorials\n[Easy Weathered Gold in Blender 2.90 (Blender Tutorial) - YouTube](https://www.youtube.com/watch?v=OMSAYRflDzw)\n[Make a Photo-realistic Concrete Material with Cracks in Blender 2.82 - YouTube](https://www.youtube.com/watch?v=8Odon-JrQ7o)\n[Make Procedural Scratches in Blender 2.82 - YouTube](https://www.youtube.com/watch?v=1iBEwV0BgCY)\n[Blender- Surface Imperfections Tutorial (Procedural Shading) - YouTube](https://www.youtube.com/watch?v=67tWv6Hp_w0)\n[Blender Ultimate Hologram Tutorial - YouTube](https://www.youtube.com/watch?v=eOGOBUMKUow)\n[Blender Holograms - YouTube](https://www.youtube.com/watch?v=hJ9lBl6wI6k)\n[Intro to Shading - Blender 2.80 Fundamentals - YouTube](https://www.youtube.com/watch?v=RRilLLyyn1Y)\n[Nodes 4 Noobs | Lvl 1 | Beginners Guide to Nodes | Blender 2.8 - YouTube](https://www.youtube.com/watch?v=moKFSMJwpmE)\n[Simple Toon Shader in Blender Eevee- YouTube](https://www.youtube.com/watch?v=qs4QUGKm6XU)\n[Blender 2.8 PBR Texturing for Beginners - YouTube](https://www.youtube.com/watch?v=XI-pZshRp8g)\n[Blender Hand Drawn Shader Tutorial! - YouTube](https://www.youtube.com/watch?v=YDHGm1W0A-c)\n\n","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/assignments/Texturing/Blender-Texturing-Exercise":{"title":"Blender Texturing Exercise","content":"\n# What to Submit\n1. An OBS recording and voice over of what you've done\n2. A screenshot or render of the following\n\t1. The first object painted\n\t2. The second object painted\n\t3. The object in substance painted or materials set up\n\n\n---\n# Objectives\n1. Download the Blend file -\u003e \n2. Watch the overview video -\u003e\n3. Complete the exercises.\n4. Learn the basics of texture setups and texture painting in Blender and Substance Painter.\n\n## Exercises\n1. Blender Texturing\n\t1. Set up a color texture and paint on it and save it\n\t2. Set up a mask texture and paint a mask with two shaders\n\t3. Set up a trim sheet\n\t4. Set up a UDIM texture and paint on it\n\t5. Prepare Model with vertex colors (ID Maps) for use in Substance Painter\n2. Substance Painter\n\t1. Import fbx model from Blender with UDIMs\n\t2. make sure all settings are correct for UDIMs\n\t3. Bake all maps\n\t\t1. make sure to bake ID maps as vertex colors!\n\t4. Set up Color Masks on folders\n\t5. Set up basic materials\n\n\n\n---\n# Extended Learning\n\n## Blender\n[Texture Painting - Quick Start Guide - Blender - YouTube](https://www.youtube.com/watch?v=WjS_zNQNVlw)\n[Texture Painting in Blender for Beginners (Tutorial) - YouTube](https://www.youtube.com/watch?v=4d4N8d4ki2Y)\n[3 Different Quick Effective TEXTURING TECHNIQUES - Hunting Knife - Blender 2.8 - YouTube](https://www.youtube.com/watch?v=2Wlc5PXo6pE)\n[Learning The Basics of 3D Handpainted Textures - YouTube](https://www.youtube.com/watch?v=Ekru3VMnR7k)\n[Arcane Tutorial Part 2 : Deep Dive Into the Arcane Look and Camera Projections (Blender 3.0 / EEVEE) - YouTube](https://www.youtube.com/watch?v=gG7ZoP3fd1w\u0026t=815s)\n[Texture Painting In Blender - YouTube](https://www.youtube.com/watch?v=HUdxpSXei2Y)\n[Blender 2.8 Tutorial : Texture Painting with Stencil \u0026 Mask - YouTube](https://www.youtube.com/watch?v=ktFY3pcU1lo)\n[Blender 2.8 Texture Painting Tutorial: Stencil and Alpha Mask - YouTube](https://www.youtube.com/watch?v=VnfTSXWF21A)\n[Blender 2.8 Texture extraction projection painting (part 1) - YouTube](https://www.youtube.com/watch?v=gz4qV5_zuMo)\n[Better Edge Masks in Blender - Procedural Texturing - YouTube](https://www.youtube.com/watch?v=Aa8gf1pwb4E)\n[Texturing for Beginners: Top 14 Ways to Mix Textures and Shaders (in Blender) - YouTube](https://www.youtube.com/watch?v=liNGmdXsfbs)\n[Lighting and Baking Workflow: Blender Tutorial - YouTube](https://www.youtube.com/watch?v=XGnDu_NsTss)\n\n## Substance\n[Introduction to Substance Painter - Ultimate Beginners Guide - YouTube](https://www.youtube.com/watch?v=RQ-hRk0WHJ8)\n[Substance Painter 2021 Getting Started - Part 01 - Materials \u0026 masking - YouTube](https://www.youtube.com/watch?v=_j27AS0VQOw)\n[What You Get Wrong About Smart Materials in Substance Painter - YouTube](https://www.youtube.com/watch?v=xppOU2y10Cs)\n[Texture Maps Explained - Essential for All Texture Artists - YouTube](https://www.youtube.com/watch?v=ZOHNRlrd1Ak)\n[Your First Material in Substance Alchemist - YouTube](https://www.youtube.com/watch?v=qe5Ni3msvz4)\n[Mastering Stylized PBR Texturing Using Substance Painter - YouTube](https://www.youtube.com/watch?v=H8ioxopCT0E)\n[The Ultimate Guide to Substance for Beginners - Painter/Designer/Alchemist EXPLAINED - YouTube](https://www.youtube.com/watch?v=KMXpmsmZy38)\n[Substance Painter for Beginners Tutorial - YouTube](https://www.youtube.com/watch?v=s2MOx1Iteik)\n\n\n## Shading\n[You’re Texturing Wrong. (Do THIS Instead!) - YouTube](https://www.youtube.com/watch?v=TspmCxSpJS4)\n[WTF are... NORMAL MAPS? - YouTube](https://www.youtube.com/watch?v=p-hA5KsY_Yg)\n[Shader Fundamentals - Normal Mapping - YouTube](https://www.youtube.com/watch?v=6_-NNKc4lrk)\n\n\n## Other\n[All 54 Modifiers in Blender Explained in 10 Minutes - YouTube](https://www.youtube.com/watch?v=idcFMhoSdIc)\n[My 3D Workflow in 30 Minutes - Lighting and Rendering Tips (and More) - YouTube](https://www.youtube.com/watch?v=xrvsDB_VhqY)\n[HDR Lighting in Blender: Look Development (5/7) - YouTube](https://www.youtube.com/watch?v=QPaHGm-vrAc)\n[Distribution of Shapes Theory for Better Renders - YouTube](https://www.youtube.com/watch?v=93RuFpX5k8o)\n[22 Tips for Blender You'll Actually Try (#3) - YouTube](https://www.youtube.com/watch?v=3YteVJAvoYY)\n","lastmodified":"2023-01-14T00:13:42.959046695Z","tags":null},"/notes/3D-Modeling/blender/assignments/UV-assignment":{"title":"","content":"# UV assignment\nIn this assignment you will do several exercises to help you understand some of the basics of UV mapping.\n\nWatch the videos, especially the assignment explanation video to help you complete the assignment.\n\n---\n\n### Exercises\n1. Unwrap operation on simple meshes\n\t1. Practice the cut tool\n\t2. Practice the sow tool\n\t3. straightening UVs\n\t4. pinning UVs\n\t5. unwrapping variable width tubes\n\n### Requirements\n- texel density should be uniform across the unwrapped meshes.\n- Follow the instructions per model\n- \n\n\nhttps://youtu.be/wzCCNpDMV8c - UV overview blender\n\nhttps://youtu.be/-O6swRxH71A - assignment overview\n\nhttps://youtu.be/p1wdgv9YHM8 - texel density\n\nhttps://youtu.be/QkYqcCc-LfQ - straighten UVs\n\nhttps://youtu.be/Z_-SsI4_YWQ - cylinders ","lastmodified":"2023-01-14T00:13:42.97504698Z","tags":null},"/notes/3D-Modeling/blender/assignments/blender-assignment":{"title":"","content":"This assignment is intended to help you learn and practice using the basics of blender.\n\n\n\n\n\n\n\n\n---\n\n### Videos\n\n1. Blender UI and navigation\n\t1. UI\n\t2. object mode\n2. Blender basic modeling tools\n\t1. edge loop\n\t2. extrude\n\t3. bevel\n\t4. selection modes\n\t\t1. selecting edge loops\n\t\t2. selecting face loops\n\t\t3. shortest path\n\t\t4. selection brushes\n\t\t5. select similar\n\t\t6. checker selection\n\t\t7. expand/contract selection\n\t\t8. select linked\n\t\t9. ","lastmodified":"2023-01-14T00:13:43.019047768Z","tags":null},"/notes/3D-Modeling/blender/assignments/topology/Topology-Assignment-Instructions":{"title":"","content":"# Topology Exercises\nIn this assignment you will do several exercises to help you understand some common mesh problems and how to fix them, as well as some techniques to help you solve some tough problems when you are modeling.\n\n---\nTo do this you will need to follow the following steps:\n1. Watch the video explanation of this assignment.\n\t1. If you need to, watch the other videos as well.\n2. Download the zip file with the blend file and open it up in your blender.\n3. Make sure you install the Mesh-Check addon and enable it.\n4. Make sure your viewport settings are set to view textures in the viewport or you will not see some of the guides in the file.\n5. In the Outliner, use the checkboxes to enable each exercise and complete it. \n\t1. Make sure you follow the steps in each outliner collection\n\t2. You will need to use and be familiar with the following tools:\n\t\t1. Knife Tool\n\t\t2. Edge Loop Tool\n\t\t3. Deleting and dissolving geo\n\t\t4. Use the mesh-check addon to inspect meshes for problems\n\t\t5. Use the merge tools, including merge by distance to fix some mesh problems.\n\t3. Perform the exercise on the indicated meshes in each exercise.\n\t4. Save the blend file.\n\t5. Upload the blend file.\n\t6. No need to record a video this time\n\t\t1. You can if you want to though\n\t7. Please write in the comments in canvas some thoughts you had\n\t\t1. One thing you learned.\n\t\t2. One thing you feel you need more practice with.\n\t\t3. One thing you want more information on.\n\t8. And reach out in the teams help channel or message me if you are having any issues.\n\n---\n### Criteria\n\nPoints: 20\neach exercise is worth 2 points.\n\nEach exercise has the following criteria\n\n1. You must complete the exercise yourself using the indicated tools.\n2. The meshes must be completed in the blend file you submit, so make sure you save the file and upload it canvas.\n\n---\n\nDo your best!\n\n\n\n---\nVideos\n\nhttps://youtu.be/4pOyCHr8WIo - bevel\nhttps://youtu.be/hLciEyyU1qs - knife tool\nhttps://youtu.be/QR5QNWgeEUU - mesh cleanup tools\nhttps://youtu.be/6QJ5DU61WSk - assignment overview\nhttps://youtu.be/vJw3MRds03I - selection tools\nhttps://youtu.be/tsVs3zg8iwI - demonstrations","lastmodified":"2023-01-14T00:13:43.739060662Z","tags":null},"/notes/3D-Modeling/slides/3d-modeling-fundimentals-slides":{"title":"","content":"\n\n### 3D fundimentals\n\n---\n## Topics\n- What is 3D in software?\n- Why Should we care about it?\n- Types of 3D data creation and manipulation\n- 3D Packages\n- Film vs Games vs other\n- goals for this course\n- assignment\n\n---\n## What is 3D in software?\n3D software at it's core manipulates and creates 3D data.\n\n--\n## History of 3D in computing\n1960s-Today\n--\n### Sketchpad\nWritten by Ivan Suthland in 1963 for his PhD and is considered the ancestor of modern 3D computing especially of CAD.\n\n\u003e First program that we know of the utilize a complete graphical user interface (GUI)\n\n\u003csplit even\u003e\n![[attachments/sketchpadscreen.png]]\n![[attachments/usingsketchpad.png|300]]\n\u003c/split\u003e\n\n[Sketchpad - wiki](https://en.wikipedia.org/wiki/Sketchpad)\n--\n### 1970s\n## Pixar, Lucasfilm and ILM\n- John Lasseter\n- Ed Catmul\n\n--\n\nUtah Teapot\n\nhttps://www.dim13.org/teapot\n\n![[notes/attachments/utahteapot.png]]\n\nwas constructed painstakingly by manipulating bezier curves and spreadsheets\n\n--\n### 1980s\n- personal computing boom\n- CAD exploded\n\t- 1983 AutoCAD launched\n\n![[notes/attachments/Pasted image 20220824104626.png]]\n\n--\n- Blender launched 1989 by Tom Roosendaal\n\t- https://www.blender.org/about/history/\n- PRISMS\n\t- a collection of C programs running on UNIX mainframes computers at Omnibus in 1985-1987\n\t- would later be Houdini\n\n--\n### 1990s\n- Modernization\n- blender's popularity spiked\n- \n\n--\n### Houdini history\n- PRISMS first release in 1998\n- https://www.fxguide.com/fxfeatured/side-effects-software-25-years-on/\n\n![[notes/attachments/Pasted image 20220824110107.png|500]]\n\n--\n\u003ciframe width=\"1154\" height=\"649\" src=\"https://www.youtube.com/embed/ULk6pL4MRS0\" title=\"Houdini Software\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003e\u003c/iframe\u003e\n\n--\n### History of Maya\nMaya was originally a next gen animation system based on the code from '[the Advanced Visualizer](https://en.wikipedia.org/wiki/The_Advanced_Visualizer)', '[Power Animator](https://en.wikipedia.org/wiki/PowerAnimator)', and 'Alias Sketch'\n\n\u003e Disney Collaborated closely in the early development\n\nhttps://www.titancomputers.com/The-Story-of-Maya-s/947.htm\nhttps://inspirationtuts.com/what-is-maya-history/\n--\n[CGI history](https://www.youtube.com/watch?v=XyGfxCxnZW0)\n\u003ciframe width=\"1154\" height=\"649\" src=\"https://www.youtube.com/embed/XyGfxCxnZW0\" title=\"Early CGI Was Horrifying\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003e\u003c/iframe\u003e\n--\n### Other Resources\n[Turings Cathedral](https://www.goodreads.com/book/show/12625589-turing-s-cathedral) - History of Computing\n\n\n---\n## 3D Data\ncomputers interpret data\nDigital 3D isn't real, that data could be interpreted in any number of ways. In our case we will interpret is like 3D data.\n\n\u003e 3D software visualizes the 3D data for us\n\n\n--\n### Types of 3D data\n- Polygons\n- Voxels\n- Curves/Nurbs\n- SDFs\n- Other\n--\n### Polygons\nare typically made up of \n- Points\n- Edges\n- Faces\n![[notes/attachments/geo-spreadsheet.png]]\n--\n### Voxels\nare 3D grid coordinates that hold relevant 3D data\n\n![[notes/attachments/Pasted image 20220824111204.png|300]]\n\n--\n### Curves/Nurbs\ncurves are technically mathmatical functions that interpolate through any medium.\n\u003e Gradients are technically curves mathematically\n\n![[notes/attachments/Pasted image 20220824111954.png|500]]\n\n--\n### Nurbs\nnurbs are 3D surfaces defined by curve algorithms\n\n![[notes/attachments/Pasted image 20220824112220.png]]\n\n---\n### Coordinate Systems\n\n\n\n---\n### Manipulating 3D data\n(Also known as 3D modeling)\n\n--\n#### Types of Modeling\n- Poly Modeling\n\t- Box Modeling\n\t- Boolean\n\t- Mesh Creation\n\t- Subd\n\t- Sculpting\n\n--\n### Topology\n\n\n\n\n---\n# Model this\nGo Kart Mechanical Brake Caliper\n\n![gokart-part](notes/attachments/gokart-part.png)\n--\n\n## Criteria\nI want to see how well you can do this\n- everything a single mesh except for the nuts bolts and screws and other obvious separate pieces\n- doesn't have to be perfect, just do your best\n\t- don't spend too long on this\n- you can use kitbashed screws and bolts if you want. Or exclude the screws and bolts\n- I will be looking for generally nice topology\n\n\n","lastmodified":"2023-01-14T00:13:43.755060949Z","tags":null},"/notes/3D-Modeling/slides/Lesson-Notes":{"title":"","content":"# 3D Fundimentals Notes\n---\nImportant topics to cover\n\n- What is 3D in software?\n\t- history\n\t- 3d data\n\t\t- polygons\n\t\t- voxels\n\t\t- curves/nurbs\n\t\t- SDFs\n\t\t- Other\n\t- coordinate systems\n\t\t- what are they\n\t\t- why do we need them\n\t\t- projection\n\t\t- tranlation\n\t- manipulation and creation\n\t\t- modeling\n\t\t- data creation\n\t\t- data transformation\n\t\t- how software works with this data\n- Why Should we care about it?\n\t- it's fun and cool\n\t- jobs\n\t- science\n\t- entertainment\n- Types of 3D data creation and manipulation\n\t- poly modeling\n\t\t- box modeling\n\t\t- mesh building\n\t\t- subd\n\t\t- boolean\n\t\t- procedural\n\t- sculpting\n\t\t- voxel\n\t\t- poly\n\t\t- curve/nurbs\n\t- 3D scanning\n\t- Voxels\n\t- Curves/Nurbs\n\t\t- CAD\n\t\t\t- Boolean\n\t\t\t- precision\n\t- SDFs\n\t- Experimental/Bleeding edge\n\t- Surfacing\n- 3D Packages\n- Film vs Games vs other\n- goals for this course\n- assignment\n\n\n\n\n---\n# Model this\nGo Kart Mechanical Brake Caliper\n--\n- I want to see how well you can do this\n## Criteria\n\n\n- everything a single mesh except for the nuts bolts and screws and other obvious separate pieces\n- doesn't have to be perfect, just do your best\n\t- don't spend too long on this\n- you can use kitbashed screws and bolts if you want. Or exclude the screws and bolts\n- I will be looking for generally nice topology\n\n\n![Pasted image 20220824085607](notes/attachments/gokart-part.png)","lastmodified":"2023-01-14T00:13:43.755060949Z","tags":null},"/notes/3D-Modeling/slides/Syllabus":{"title":"syllabus","content":"\n\n## Course Overview\nIntroduction to 3D modeling and surfacing will give students and in-depth look at modeling, surfacing, lighting, and rendering for animated shorts and games.\nStudents will learn to use Maya, Blender, Houdini, Harmony, and selected compositing tools. Students will also learn the basics of project management and the tools behind that like version control and file management.\n\n---\n\n### Course Objectives\n- Increase 3D technical skills\n\t- Learn the basics of using blender\n\t- Learn basics of Maya\n\t- Learn some basics of Houdini\n- Learn the basics of pipelines\n- Learn file management\n- Create portfolio worthy projects\n- Be more useful in a team environment\n\n\n#### Learn the following...\n- learn basic techniques of 3D modeling\n- learn the basics of 3D in 2D productions\n- learn the basics of the film and animation pipeline\n\n\n#### You will be able to...\n- Create 3D assets\n- surface 3D assets\n- light 3D assets\n- render 3D assets\n- use production tools\n\n\n#### You will create...\n- 3D props for an animated film\n- surface those props\n- light those props\n- render those props\n- composite a rendered image\n\n---\n\n### Course Expectations\n\n\n**Increase technical skills**\nStudents will increase their technical skills and knowledge in 3D and be able to solve more complex problems.\n\n**Learn the basics of pipeline**\nStudents will learn the basics of film pipelines, and some game pipeline. This will help them in working with an end in mind, and aide them in being productive team members.\n\n**Learn file management**\nStudents will learn the importance of file management. They will learn some useful conventions. This will help them be productive team members and help them be more efficient and productive in their personal projects.\n\n**Expectations**  \nStudents are expected to work a minimum of six hours a week on their objectives for the course. They are supposed to plan and execute these objectives regularly.\n\nALL work submitted by the student create work solely by them (except for group projects). Use of any outside work will result in a failing grade.\n\nThe course will be broken down into a series of outcomes; each outcome will have some modules that will help the students work through the class. Each module will contain:\n\nStudents are expected to participate in the online classes, and pay attention to the teams channel.\n\nInformation about the outcomes  \nDemonstration Video(s)  \nProjects and Milestones  \n\n---\n\n**Course Materials**\n- Blender\n- Maya (student edition)\n- Houdini (apprentice addition)\n- github or gitlab account\n- sketchfab account\n- Toonboom harmony\n- davinci resolve\n\n---\n\n### Quizzes and Exams\n\nStudents are expected to work. Supposed to be sect-motivated, and to follow through. You are to be creative; you are must be problem-solvers.\n\n### Grading Criteria\n\nInstructors and peers will grade using a rubric provided in course outcomes.\n\nIn part — projects will be graded objectively by measurable advancement, without bias or opinion — this will include the technical aspects and concepts of the project and a demonstration of the toolset or software.\n\nAssignments are graded based on completion. Grading is relevant to industry standards, which define the quality of the work submitted as determined by the course instructor. The assessment will include the elements and concepts of design, use of problem-solving skills, and craftsmanship.\n\nThere is a high expectation of academic integrity on all course assignments and activities. Plagiarism, cheating, and fabrication or falsification of projects will not be tolerated and will have severe consequences. The penalty for any offense will result in a failing grade for the course, as well as a formal report to the Department Chair and Student Affairs. If you have questions, please read the University's \"Student Rights and Responsibilities\" policy.\n\n### Attendance\n\nRegular attendance is essential to success in the class. Students can expect the following:\n\nInstructors will take roll. Participation may count toward a quarter of students grade. Students may receive a failing grade if they miss more than three times. Read UVUs policies on attendance for more information\n\n### Policies\n\nReminder: work must be 100% original, and made by the student for the class. Any other assignments will result in a failing grade.\n\nThere is no extra credit offered in this course. Students can resubmit with instructors’ approval or request.\n\nBe sure to always backup your files on a regular basis. Unfinished or lost projects due to data loss, or mismanagement will not be accepted.\n\nIt is essential that students understand that university policy dictates ownership of intellectual property developed in the context of a school course. The University owns Such products and not the students, faculty, or staff involved in instruction, coordination, support, and production of these intellectual property assets.\n\nIf you, as a student majoring in Digital Media, wish to market your capstone project (or any other title developed while you are a student), there is a process established through UVU’s Office of Technology Commercialization. You must conform to the rules, policies, and process outlined by this university department. Discussions on the part of this process will be in class.\n\nFYI: This is not a policy developed and written here at UVU. This standard is for all educational institutions in the State of Utah, as part of their regional accreditation, which is a component of the national system. In other words, every accredited college or university in the country, public or private, conforms to this policy.\n\nAll other policies of the University can found at UVU.edu.","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/3D-Modeling/slides/lesson-2":{"title":"","content":"### Modeling Techniques\n\n\n---\n### Extrusion\n- What is it\n- different ways to use it\n- common problems\n\n--\nExtrusion created geometry from a source component and connects the new geo to the source geo\n\n--\nIt's a good way to expand the shape especially in the beginning phases of your model\n- along normal\n\n--\n#### Common problems\n- Laminate faces\n- edge poles\n- can be limiting in the shapes you can make\n- scaling\n\n---\n### Mirroring\n\n--\nWhat is mirroring in CG?\n\n--\n- a copy and matrix transform of target 3D data\n\n--\nWhen might it be useful?\n\n---\n#### Bevel\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/3D-Modeling/slides/lesson-2-notes":{"title":"lesson 2","content":"\n# 3D Modeling\n- A lot of people don't know how to do screen capture\n- exporting problems\n\t- scale\n\t- subd\n\t- knowing how to export\n- modeling issues\n\t- laminate faces\n\t- duplicate verts\n\t- bevel issues\n\t\t- not excluding flat faces\n\t- normals/shading issues\n- UVs\n\t- most people didn't touch\n- model resolution\n\t- film - high res\n- Didn't receive many assignments\n\t- don't want to assign points to things like this\n\t\t- might have to\n- Hardware survey\n- workflows\n\t- prep\n\t- design\n\t- modeling\n\t- cleanup\n\t- end in mind workflow\n- Attitudes are important\n\t- each modeling project is a puzzle\n\t- every project should be an opportunity to improve and learn from the last one\n\t- ask for help\n\t\t- it only hurts you if you don't\n- \n\n---\n# Updates\n- Mondays\n\t- I will try and be at the school\n- talked with Rodayne\n\t- some thoughts on this class\n\t\t- the first time this class has been taught in the context of 2D and animation\n\t\t- we will talk about shading\n\t\t\t- toon shading\n\t\t- compositing\n\t\t- harmony\n\t\t\t- 3D integration\n\t\t- film pipelines in general\n- Canvas and teams\n\t- teams app\n\t- please check teams more often\n\t\t- that is where I will put announcements\n- Figuring out office hours\n\n---\n# Knowledge Management\n- I am building a repo\n- You should put some thought into a knowledge management system you can use\n\t- there is way too much to always remember\n\t- it will speed you up so you don't have google something you've already recorded\n\n---\n# Assignments\n\n## Exercises\n- Edge-flow redirection\n\n\n\n\n\n\n# Assignment Ideas\n- fixing mesh\n\t- shading issues\n\t- laminate faces\n\t- diagnosing mesh problems\n\t- \n\n\n\n\n\n---\n# Todo\n- houdini grading tool\n- ","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/3D-Modeling/slides/lesson-3":{"title":"","content":"# Lesson 3\n---\n\n#### Agenda\n- Syllabus updates\n- course moving forward\n\t- assignments\n\t- excercizes\n\t- quizes\n- explain confusion and lack of direction\n\t- it will change going forward\n- questions\n- lesson 3\n\t- specific modeling techniques\n\t\t- edge flow\n\t\t- booleans\n\t\t- correcting mistakes\n\t- assignment\n\t\t- correcting mistake\n\t\t- model a piece of a prop\n\n---\n### Accommodation\n- Please let me know so that I don't miss it\n- I worked at the autism center \n- I have ADHD and dyscalculia and probably autism\n\n---\n### How to screen record\n- OBS\n- setting up sources\n- please get a camera and microphone!\n\n\n---\n### Additional Thoughts\n- Keep working hard\n- Don't compare yourself to your peers too much\n\t- Instead stay focused on what people are doing in industry\n\n---\n### Project Management\n- File structure\n- naming conventions\n- turning assignments in\n\t- follow instructions\n\t- the instructions are there for a reason\n\t\t- there are a lot of you\n- version control\n\t- git\n\t- other\n- pipelines\n\t- pipeline tools\n\t- https://prism-pipeline.com/\n\t- deadline - renderfarm tool\n\t- shotgun - industry standard pipeline tool https://www.shotgridsoftware.com/\n\t- https://www.ftrack.com/en/\n\t- https://nim-labs.com/\n\t- https://www.toonboom.com/products/producer\n\t- https://www.cg-wire.com/\n\t- custom tooling\n\t\t- python\n\t\t- lua\n\t\t- shell scripting\n\n\u003ego over git\n\n---\n### Documentation\n- know where it is\n- read it!\n\n---\n\n### Blender fundamentals\n\n\u003e Why blender can help you be faster and more efficient than Maya for 3D modeling\n\n- UI\n\t- viewport\n\t\t- n-panel\n\t- outliner\n\t- properties window\n\t- stats\n\t\t- ![](notes/attachments/Pasted%20image%2020220831100703.png)\n\t\t- ![](notes/attachments/Pasted%20image%2020220831100741.png)\n- navigation\n\t- orbiting view\n\t- ortho/perspective\n\t- local view\n\t- focus\n\t\t- middle click\n\t\t- period\n- modeling\n\t- gizmos\n\t- object mode\n\t- edit mode\n\t\t- mesh components\n\t\t- tools\n\t\t- modifiers!\n\t\t\t- methodology\n\t\t\t- proceduralism\n\t- sculpt mode\n\t- paint mode\n- Shorcuts!\n\t- importance!\n\t\t- speed\n\t\t- efficiency\n\t- repeat last action\n\n\n---\n### Topology\n\n\u003e Can be important for surfacing\n\n- Localizing topology\n- avoid unnecessary topology\n\n\n![](notes/attachments/Pasted%20image%2020220831100126.png)\n![](notes/attachments/Pasted%20image%2020220831100155.png)\n\n### Cleaning up ngons and triangles\nThis can be important for edge flow and deformations\n\n![](notes/attachments/Pasted%20image%2020220831101411.png)\n\n### Edge Flow\neven distribution of edges\n\n- remove dead edges\n- Use matcaps\n- edges should add to the form of your object\n\n### Holding Edges and faceloops\n- holding edges\n\t- especially for subd\n\t- bevels\n\t\t- in maya press 3\n- check your faceloops\n- don't rely on subd for your form\n\n### Caveats\n- ngons and tris can be ok for certain situations\n\t- they should usually be deliberate and exceptions\n\n### Practice\n- retopo\n\t- start with edge and face loops first\n\n### Workflows\n1. reference\n2. curve guides\n3. blockout\n4. edge flow\n5. retopo\n6. detail\n\n---\n\n### Homework\n\n- modeling exercises\n\t- take a single polygon and start with one face and end with 4\n\t- create bevel and chamfer with holding edges for a subd workflow\n\t- fixing bad mesh\n- create a simple prop\n\t- I will give you some images of a simple prop\n\t- I want a good attempt.\n\t- think of this as a sketchbook","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Davinci-resolve/Davinci-Resolve-Hub":{"title":"Davinci Resolve Hub","content":"\n[[notes/Davinci resolve/Fusion/Fusion 360 Hub]]\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Davinci-resolve/Fusion/Fusion-360-Hub":{"title":"Fusion 360 Hub","content":"\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Deadline/Deadline-Hub":{"title":"Deadline Hub","content":"\n[[notes/Deadline/Deadline Notes]]\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Deadline/Deadline-Notes":{"title":"Deadline Notes","content":"\n# Deadline\n\nrender farm manager\n\nmachine =\u003e tc-render1\n\n\n\n# repository\n- a separate machine\n- stores configuration\n- sends files to other machines\n\n\nhttps://www.youtube.com/watch?v=v083eMXSwXw\nhttps://timvanhelsdingen.com/vfx-folderstructure/\n\n$JOB is important for using the render farm\n\nmake deadline work with a different houdini version\n\ncustom deadline entry for houdini\nhoudini plugin and env vars on each machine\n\n\n---\n- Render farm\n\t- Amazon account\n\t- Update deadline\n\t- https://docs.thinkboxsoftware.com/products/deadline/10.1/1_User%20Manual/manual/app-houdini.html#app-houdini-integrated-submission-script-label\n\t\t- Houdini integrated submission script setup\n\t\t- HQueue??\n\t\t- https://www.awsthinkbox.com/blog/common-render-farm-errors common errors\n\t\t- how to start workers??\n\t\t- startup machines if they are off??\n\t\t- Hserver?\n\t\t- update blender\n\t\t- set up client machines for job submission\n\t\t- ACES color management\n\t\t- local houdini env file needs deadline path\n\t\t- Any way to remote in from linux?\n\t\t\n```\nHOUDINI_MENU_PATH = \"$HOUDINI_MENU_PATH;c:/Users/\u003cuser\u003e/AppData/Deadline10/submitters/HoudiniSubmitter;\u0026\"\n```\n\nhttps://www.youtube.com/watch?v=v083eMXSwXw\n\n\n---\n\n! Apparently nothing should have changed licensing-wise if we have floating licenses?\n\n! Push for redshift !\n\n---\n## Upgrading The Farm\n\nhttps://www.awsthinkbox.com/blog/deadline-auto-upgrade-system\n\n\n\n---\n\nhttps://www.youtube.com/watch?v=v083eMXSwXw\n\nIT Tasks\n- [x] install Houdini 18.5 on TC-render\n- [x] update blender on all machines\n- [x] ACES on all machines\n- [x] Fusion/Davinci resolve installed\n- [ ] Houdini env file entry for deadline plugin\n\n\n\nhttps://forums.thinkboxsoftware.com/t/houdini-17-support/24131 \n\n\n\n- tried to remote start worker and got this error   \n\nA connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. 161.28.108.139:53041\n\n---\n\n# Important things to explain to teachers\n\n- Deadline will help with VFX and simulations\n- We can use Deadline with Harmony\n\n---\n\n# Server items\n\n- How to install to all machines\n- How to uninstall to all machines\n- How to add/remove files to all machines\n- How to edit files across all machines\n- How to change env vars on all machines\n\n---\nSccm configuration manager\n\n\n- ! Renderman licenses? \n\n\n---\n\nhttps://www.sidefx.com/forum/topic/78777/\n\nRend3r! database password\n\npbRg79t4ZeHx secret password -\u003e user = admin\n\n@NO1pN3s\nhttps://youtu.be/KkfQOSX8wd4\n\n---\n\n```\n  \n\nThe configured Client Certificate ('C:\\DeadlineDatabase10\\certs\\Deadline10Client.pfx') does not exist.\n\nat Deadline.Configuration.RepositoryConnectionSettings.d(a dgj, String dgk, String dgl, X509Certificate2\u0026 dgm)\n\nat Deadline.Configuration.RepositoryConnectionSettings.b(X509Certificate2\u0026 dgh)\n\nat Deadline.StorageDB.RepositoryConnect.RepositoryStorageManager.ConnectToRepository(RepositoryConnectionSettings connSettings, Boolean skipVersionCheck, DataControllerUpdateClient updateClient, HttpClient httpClient)\n\nat Deadline.Controllers.DataController.ConnectToRepository(RepositoryConnectionSettings connectionSettings)\n\nat Deadline.Controllers.DataController.SetupConnectionSettings(RepositoryConnectionSettings connSettings)\n\nat Deadline.Controllers.DataController.Initialize(RepositoryConnectionSettings connSettings)\n\nat Deadline.Controllers.DataController..ctor(RepositoryConnectionSettings connSettings)\n\nat Deadline.Applications.DeadlineApplicationManager.CreateDataController(RepositoryConnectionSettings connSettings)\n\nat Deadline.Applications.DeadlineApplicationManager.Connect(RepositoryConnectionSettings connSettings, Boolean updateScriptManager)\n\nat Deadline.Monitor.MonitorManager.Connect(RepositoryConnectionSettings connectionSettings, Boolean updateScriptManager)\n```","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Excalidraw/Drawing-2022-08-12-07.02.13.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n# Text Elements\n%%\n# Drawing\n```json\n{\n\t\"type\": \"excalidraw\",\n\t\"version\": 2,\n\t\"source\": \"https://excalidraw.com\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"version\": 46,\n\t\t\t\"versionNonce\": 1958915900,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"9oHd2tuq6h5s18c08KBSM\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0,\n\t\t\t\"y\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 555666948,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1660312941286,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"pressures\": [\n\t\t\t\t0.54473876953125,\n\t\t\t\t0.55987548828125,\n\t\t\t\t0.56964111328125,\n\t\t\t\t0.61895751953125,\n\t\t\t\t0.6653594970703125,\n\t\t\t\t0.6951446533203125,\n\t\t\t\t0.7239532470703125,\n\t\t\t\t0.750457763671875,\n\t\t\t\t0.779266357421875,\n\t\t\t\t0.800750732421875,\n\t\t\t\t0.811981201171875,\n\t\t\t\t0.814910888671875,\n\t\t\t\t0.818328857421875,\n\t\t\t\t0.822235107421875,\n\t\t\t\t0.829559326171875,\n\t\t\t\t0.834442138671875,\n\t\t\t\t0.837860107421875,\n\t\t\t\t0.840789794921875,\n\t\t\t\t0.841278076171875,\n\t\t\t\t0.842254638671875,\n\t\t\t\t0.843231201171875,\n\t\t\t\t0.844696044921875,\n\t\t\t\t0.849090576171875,\n\t\t\t\t0.868621826171875,\n\t\t\t\t0.8940277099609375,\n\t\t\t\t0.9091644287109375,\n\t\t\t\t0.9179534912109375,\n\t\t\t\t0.9238128662109375,\n\t\t\t\t0.9262542724609375,\n\t\t\t\t0.9277191162109375,\n\t\t\t\t0.9282073974609375,\n\t\t\t\t0.9291839599609375,\n\t\t\t\t0.9291839599609375,\n\t\t\t\t0.9282073974609375,\n\t\t\t\t0.9247894287109375,\n\t\t\t\t0.9150238037109375,\n\t\t\t\t0.9072113037109375,\n\t\t\t\t0.9033050537109375,\n\t\t\t\t0.8906097412109375,\n\t\t\t\t0.859832763671875,\n\t\t\t\t0.776336669921875,\n\t\t\t\t0.62188720703125,\n\t\t\t\t0.366851806640625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"version\": 52,\n\t\t\t\"versionNonce\": 1178999868,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"36MJS2JkacoQkgmfUQYzK\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0,\n\t\t\t\"y\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 829420164,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1660312942162,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"pressures\": [\n\t\t\t\t0.6511993408203125,\n\t\t\t\t0.6511993408203125,\n\t\t\t\t0.6551055908203125,\n\t\t\t\t0.6736602783203125,\n\t\t\t\t0.7307891845703125,\n\t\t\t\t0.812957763671875,\n\t\t\t\t0.8867034912109375,\n\t\t\t\t0.9252777099609375,\n\t\t\t\t0.9487152099609375,\n\t\t\t\t0.9653167724609375,\n\t\t\t\t0.9843597412109375,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t1,\n\t\t\t\t0.9868011474609375,\n\t\t\t\t0.9643402099609375,\n\t\t\t\t0.9286956787109375,\n\t\t\t\t0.847137451171875,\n\t\t\t\t0.6966094970703125,\n\t\t\t\t0.4869842529296875,\n\t\t\t\t0.1401519775390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"diamond\",\n\t\t\t\"version\": 130,\n\t\t\t\"versionNonce\": 2096773739,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"021dW8ABe896uS5G8Gq7r\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": -58,\n\t\t\t\"y\": -64.5,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 1038472580,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1660312983948,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"version\": 45,\n\t\t\t\"versionNonce\": 166817084,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"IMPTeUW5eCK7UqzXU712N\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0,\n\t\t\t\"y\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 1802584636,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1660312954147,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"pressures\": [\n\t\t\t\t0.54522705078125,\n\t\t\t\t0.55352783203125,\n\t\t\t\t0.55352783203125,\n\t\t\t\t0.60284423828125,\n\t\t\t\t0.6736602783203125,\n\t\t\t\t0.7239532470703125,\n\t\t\t\t0.771453857421875,\n\t\t\t\t0.802703857421875,\n\t\t\t\t0.826629638671875,\n\t\t\t\t0.851043701171875,\n\t\t\t\t0.873992919921875,\n\t\t\t\t0.8915863037109375,\n\t\t\t\t0.8989105224609375,\n\t\t\t\t0.9033050537109375,\n\t\t\t\t0.9081878662109375,\n\t\t\t\t0.9120941162109375,\n\t\t\t\t0.9179534912109375,\n\t\t\t\t0.9228363037109375,\n\t\t\t\t0.9282073974609375,\n\t\t\t\t0.9379730224609375,\n\t\t\t\t0.9379730224609375,\n\t\t\t\t0.9404144287109375,\n\t\t\t\t0.9413909912109375,\n\t\t\t\t0.9418792724609375,\n\t\t\t\t0.9418792724609375,\n\t\t\t\t0.9418792724609375,\n\t\t\t\t0.9418792724609375,\n\t\t\t\t0.9418792724609375,\n\t\t\t\t0.9428558349609375,\n\t\t\t\t0.9457855224609375,\n\t\t\t\t0.9457855224609375,\n\t\t\t\t0.9472503662109375,\n\t\t\t\t0.9482269287109375,\n\t\t\t\t0.9482269287109375,\n\t\t\t\t0.9492034912109375,\n\t\t\t\t0.9496917724609375,\n\t\t\t\t0.9496917724609375,\n\t\t\t\t0.9404144287109375,\n\t\t\t\t0.9008636474609375,\n\t\t\t\t0.6472930908203125,\n\t\t\t\t0.6472930908203125,\n\t\t\t\t0.3863983154296875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"version\": 97,\n\t\t\t\"versionNonce\": 1005949572,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"9ib_AUUfs8C4jvTMYqnhS\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0,\n\t\t\t\"y\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 846998148,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1660312966985,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"pressures\": [\n\t\t\t\t0.56085205078125,\n\t\t\t\t0.56085205078125,\n\t\t\t\t0.56866455078125,\n\t\t\t\t0.59210205078125,\n\t\t\t\t0.7049102783203125,\n\t\t\t\t0.757781982421875,\n\t\t\t\t0.793914794921875,\n\t\t\t\t0.817840576171875,\n\t\t\t\t0.837860107421875,\n\t\t\t\t0.855926513671875,\n\t\t\t\t0.874969482421875,\n\t\t\t\t0.8871917724609375,\n\t\t\t\t0.8993988037109375,\n\t\t\t\t0.9101409912109375,\n\t\t\t\t0.9189300537109375,\n\t\t\t\t0.9257659912109375,\n\t\t\t\t0.9282073974609375,\n\t\t\t\t0.9321136474609375,\n\t\t\t\t0.9369964599609375,\n\t\t\t\t0.9404144287109375,\n\t\t\t\t0.9418792724609375,\n\t\t\t\t0.9423675537109375,\n\t\t\t\t0.9443206787109375,\n\t\t\t\t0.9462738037109375,\n\t\t\t\t0.9482269287109375,\n\t\t\t\t0.9492034912109375,\n\t\t\t\t0.9496917724609375,\n\t\t\t\t0.9496917724609375,\n\t\t\t\t0.9501800537109375,\n\t\t\t\t0.9511566162109375,\n\t\t\t\t0.9511566162109375,\n\t\t\t\t0.9511566162109375,\n\t\t\t\t0.9511566162109375,\n\t\t\t\t0.9511566162109375,\n\t\t\t\t0.9511566162109375,\n\t\t\t\t0.9511566162109375,\n\t\t\t\t0.9511566162109375,\n\t\t\t\t0.9501800537109375,\n\t\t\t\t0.9487152099609375,\n\t\t\t\t0.9487152099609375,\n\t\t\t\t0.9467620849609375,\n\t\t\t\t0.9462738037109375,\n\t\t\t\t0.9438323974609375,\n\t\t\t\t0.9433441162109375,\n\t\t\t\t0.9428558349609375,\n\t\t\t\t0.9428558349609375,\n\t\t\t\t0.9428558349609375,\n\t\t\t\t0.9423675537109375,\n\t\t\t\t0.9399261474609375,\n\t\t\t\t0.9389495849609375,\n\t\t\t\t0.9365081787109375,\n\t\t\t\t0.9345550537109375,\n\t\t\t\t0.9330902099609375,\n\t\t\t\t0.9321136474609375,\n\t\t\t\t0.9321136474609375,\n\t\t\t\t0.9311370849609375,\n\t\t\t\t0.9301605224609375,\n\t\t\t\t0.9301605224609375,\n\t\t\t\t0.9272308349609375,\n\t\t\t\t0.9267425537109375,\n\t\t\t\t0.9233245849609375,\n\t\t\t\t0.9233245849609375,\n\t\t\t\t0.9223480224609375,\n\t\t\t\t0.9233245849609375,\n\t\t\t\t0.9233245849609375,\n\t\t\t\t0.9208831787109375,\n\t\t\t\t0.9203948974609375,\n\t\t\t\t0.9194183349609375,\n\t\t\t\t0.9179534912109375,\n\t\t\t\t0.9174652099609375,\n\t\t\t\t0.9169769287109375,\n\t\t\t\t0.9169769287109375,\n\t\t\t\t0.9169769287109375,\n\t\t\t\t0.9169769287109375,\n\t\t\t\t0.9169769287109375,\n\t\t\t\t0.9169769287109375,\n\t\t\t\t0.9169769287109375,\n\t\t\t\t0.9164886474609375,\n\t\t\t\t0.9164886474609375,\n\t\t\t\t0.9164886474609375,\n\t\t\t\t0.9164886474609375,\n\t\t\t\t0.9164886474609375,\n\t\t\t\t0.9160003662109375,\n\t\t\t\t0.9160003662109375,\n\t\t\t\t0.9155120849609375,\n\t\t\t\t0.9125823974609375,\n\t\t\t\t0.9111175537109375,\n\t\t\t\t0.9101409912109375,\n\t\t\t\t0.9106292724609375,\n\t\t\t\t0.9101409912109375,\n\t\t\t\t0.8862152099609375,\n\t\t\t\t0.793914794921875,\n\t\t\t\t0.6385040283203125,\n\t\t\t\t0.3995819091796875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"version\": 11,\n\t\t\t\"versionNonce\": 1476751932,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"CmtxHuHu9RB56vRX0S7u0\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0,\n\t\t\t\"y\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 1439025084,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1660312968012,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"pressures\": [\n\t\t\t\t0.54962158203125,\n\t\t\t\t0.58770751953125,\n\t\t\t\t0.6428985595703125,\n\t\t\t\t0.7156524658203125,\n\t\t\t\t0.7259063720703125,\n\t\t\t\t0.7259063720703125,\n\t\t\t\t0.56622314453125,\n\t\t\t\t0.07421875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"version\": 6,\n\t\t\t\"versionNonce\": 1576356796,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"9GnBJSDYcA30m2gglDg58\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0,\n\t\t\t\"y\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 720297860,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1660312968189,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"pressures\": [\n\t\t\t\t0.59844970703125,\n\t\t\t\t0.59844970703125,\n\t\t\t\t0.4337615966796875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"version\": 9,\n\t\t\t\"versionNonce\": 340933636,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"X3rDRgB4dWiCEQNo10rgr\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0,\n\t\t\t\"y\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 530800132,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1660312968367,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"pressures\": [\n\t\t\t\t0.1445465087890625,\n\t\t\t\t0.1445465087890625,\n\t\t\t\t0.6463165283203125,\n\t\t\t\t0.6463165283203125,\n\t\t\t\t0.55108642578125,\n\t\t\t\t0.357574462890625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"version\": 9,\n\t\t\t\"versionNonce\": 1923577916,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"hN7CsI-zsPJlqdfhD21uB\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0,\n\t\t\t\"y\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 1040348732,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1660312968570,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"pressures\": [\n\t\t\t\t0.6394805908203125,\n\t\t\t\t0.6697540283203125,\n\t\t\t\t0.6800079345703125,\n\t\t\t\t0.6800079345703125,\n\t\t\t\t0.58721923828125,\n\t\t\t\t0.3771209716796875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"version\": 21,\n\t\t\t\"versionNonce\": 1562305668,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"id\": \"1YhuE2wTE8VpjjD3KKZ-U\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"angle\": 0,\n\t\t\t\"x\": 0,\n\t\t\t\"y\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"width\": 0,\n\t\t\t\"height\": 0,\n\t\t\t\"seed\": 131611012,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"boundElements\": [],\n\t\t\t\"updated\": 1660312969020,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\tnull,\n\t\t\t\t\tnull\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"lastCommittedPoint\": null,\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"pressures\": [\n\t\t\t\t0.4591522216796875,\n\t\t\t\t0.4947967529296875,\n\t\t\t\t0.56329345703125,\n\t\t\t\t0.6258087158203125,\n\t\t\t\t0.6638946533203125,\n\t\t\t\t0.6936798095703125,\n\t\t\t\t0.7156524658203125,\n\t\t\t\t0.7386016845703125,\n\t\t\t\t0.765594482421875,\n\t\t\t\t0.791961669921875,\n\t\t\t\t0.803680419921875,\n\t\t\t\t0.807586669921875,\n\t\t\t\t0.807586669921875,\n\t\t\t\t0.787078857421875,\n\t\t\t\t0.7215118408203125,\n\t\t\t\t0.6287384033203125,\n\t\t\t\t0.2006988525390625,\n\t\t\t\t0.2006988525390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"6XZRBMTuw19DV-gFo2nE-\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 27.5,\n\t\t\t\"y\": -193,\n\t\t\t\"width\": 112.5,\n\t\t\t\"height\": 106.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 313341381,\n\t\t\t\"version\": 67,\n\t\t\t\"versionNonce\": 4022565,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312985794,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3.5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8.5,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-11,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-13,\n\t\t\t\t\t18\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-13.5,\n\t\t\t\t\t25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-13,\n\t\t\t\t\t33\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10.5,\n\t\t\t\t\t39.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7,\n\t\t\t\t\t44\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2,\n\t\t\t\t\t46\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t45.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t44.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t41.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26.5,\n\t\t\t\t\t36\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33.5,\n\t\t\t\t\t32.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t46.5,\n\t\t\t\t\t26\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t52.5,\n\t\t\t\t\t24\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t57.5,\n\t\t\t\t\t23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t62.5,\n\t\t\t\t\t24.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t65,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t66.5,\n\t\t\t\t\t30\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t67,\n\t\t\t\t\t34\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t66.5,\n\t\t\t\t\t39\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t65,\n\t\t\t\t\t44\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t62,\n\t\t\t\t\t49\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t58.5,\n\t\t\t\t\t54.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t54,\n\t\t\t\t\t60\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t49,\n\t\t\t\t\t65\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44,\n\t\t\t\t\t69.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35,\n\t\t\t\t\t74.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t32,\n\t\t\t\t\t76\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25,\n\t\t\t\t\t78\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14,\n\t\t\t\t\t79.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t80\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t80\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10,\n\t\t\t\t\t80.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-17,\n\t\t\t\t\t80.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-23.5,\n\t\t\t\t\t81\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-32,\n\t\t\t\t\t81.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-36.5,\n\t\t\t\t\t82\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-38.5,\n\t\t\t\t\t82.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-43,\n\t\t\t\t\t84.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-44.5,\n\t\t\t\t\t86.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-45.5,\n\t\t\t\t\t90\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-44.5,\n\t\t\t\t\t93.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-43,\n\t\t\t\t\t97\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-39.5,\n\t\t\t\t\t100.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-35,\n\t\t\t\t\t103\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-30.5,\n\t\t\t\t\t104.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-26,\n\t\t\t\t\t106\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21.5,\n\t\t\t\t\t106.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-17.5,\n\t\t\t\t\t106\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-11,\n\t\t\t\t\t104\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6.5,\n\t\t\t\t\t102.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t100.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t99\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t98.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t98\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t98\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t99\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t99.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t99.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.51348876953125,\n\t\t\t\t0.54034423828125,\n\t\t\t\t0.56329345703125,\n\t\t\t\t0.61993408203125,\n\t\t\t\t0.6780548095703125,\n\t\t\t\t0.7200469970703125,\n\t\t\t\t0.764129638671875,\n\t\t\t\t0.791473388671875,\n\t\t\t\t0.807098388671875,\n\t\t\t\t0.814910888671875,\n\t\t\t\t0.818328857421875,\n\t\t\t\t0.819793701171875,\n\t\t\t\t0.825164794921875,\n\t\t\t\t0.833953857421875,\n\t\t\t\t0.842254638671875,\n\t\t\t\t0.845672607421875,\n\t\t\t\t0.849090576171875,\n\t\t\t\t0.850555419921875,\n\t\t\t\t0.851531982421875,\n\t\t\t\t0.852020263671875,\n\t\t\t\t0.852020263671875,\n\t\t\t\t0.854461669921875,\n\t\t\t\t0.862762451171875,\n\t\t\t\t0.871551513671875,\n\t\t\t\t0.8764495849609375,\n\t\t\t\t0.8774261474609375,\n\t\t\t\t0.8793792724609375,\n\t\t\t\t0.8803558349609375,\n\t\t\t\t0.8803558349609375,\n\t\t\t\t0.8813323974609375,\n\t\t\t\t0.8818206787109375,\n\t\t\t\t0.8818206787109375,\n\t\t\t\t0.8823089599609375,\n\t\t\t\t0.8823089599609375,\n\t\t\t\t0.8827972412109375,\n\t\t\t\t0.8827972412109375,\n\t\t\t\t0.8827972412109375,\n\t\t\t\t0.8827972412109375,\n\t\t\t\t0.8823089599609375,\n\t\t\t\t0.8803558349609375,\n\t\t\t\t0.8793792724609375,\n\t\t\t\t0.8793792724609375,\n\t\t\t\t0.8779144287109375,\n\t\t\t\t0.874969482421875,\n\t\t\t\t0.874969482421875,\n\t\t\t\t0.874481201171875,\n\t\t\t\t0.874481201171875,\n\t\t\t\t0.874969482421875,\n\t\t\t\t0.8754730224609375,\n\t\t\t\t0.8754730224609375,\n\t\t\t\t0.8759613037109375,\n\t\t\t\t0.8754730224609375,\n\t\t\t\t0.8754730224609375,\n\t\t\t\t0.873504638671875,\n\t\t\t\t0.868621826171875,\n\t\t\t\t0.858367919921875,\n\t\t\t\t0.843231201171875,\n\t\t\t\t0.815887451171875,\n\t\t\t\t0.792938232421875,\n\t\t\t\t0.772430419921875,\n\t\t\t\t0.753875732421875,\n\t\t\t\t0.7078399658203125,\n\t\t\t\t0.61846923828125,\n\t\t\t\t0.330230712890625,\n\t\t\t\t0.330230712890625,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t1,\n\t\t\t\t99.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"yTBCvf1IZjm1djGq3cYuh\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 51,\n\t\t\t\"y\": -81.5,\n\t\t\t\"width\": 56.5,\n\t\t\t\"height\": 37,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 899706795,\n\t\t\t\"version\": 48,\n\t\t\t\"versionNonce\": 489603621,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312986643,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.5,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14.5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20.5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.5,\n\t\t\t\t\t18.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.5,\n\t\t\t\t\t20\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t20\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18,\n\t\t\t\t\t19.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20.5,\n\t\t\t\t\t18\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.5,\n\t\t\t\t\t14.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30.5,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30.5,\n\t\t\t\t\t19\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30,\n\t\t\t\t\t22.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29.5,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29.5,\n\t\t\t\t\t27.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30.5,\n\t\t\t\t\t29.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t31.5,\n\t\t\t\t\t29.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33.5,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36,\n\t\t\t\t\t28\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42.5,\n\t\t\t\t\t26\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t45.5,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t49,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t50,\n\t\t\t\t\t30\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53,\n\t\t\t\t\t33.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t54.5,\n\t\t\t\t\t35.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t56,\n\t\t\t\t\t37\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t56,\n\t\t\t\t\t37\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.2089996337890625,\n\t\t\t\t0.4435272216796875,\n\t\t\t\t0.50714111328125,\n\t\t\t\t0.56817626953125,\n\t\t\t\t0.61309814453125,\n\t\t\t\t0.6424102783203125,\n\t\t\t\t0.6541290283203125,\n\t\t\t\t0.6570587158203125,\n\t\t\t\t0.6570587158203125,\n\t\t\t\t0.6560821533203125,\n\t\t\t\t0.6526641845703125,\n\t\t\t\t0.6487579345703125,\n\t\t\t\t0.6472930908203125,\n\t\t\t\t0.6468048095703125,\n\t\t\t\t0.6468048095703125,\n\t\t\t\t0.6487579345703125,\n\t\t\t\t0.6648712158203125,\n\t\t\t\t0.6785430908203125,\n\t\t\t\t0.6970977783203125,\n\t\t\t\t0.7229766845703125,\n\t\t\t\t0.754852294921875,\n\t\t\t\t0.754852294921875,\n\t\t\t\t0.754852294921875,\n\t\t\t\t0.7342071533203125,\n\t\t\t\t0.7254180908203125,\n\t\t\t\t0.7200469970703125,\n\t\t\t\t0.7195587158203125,\n\t\t\t\t0.7171173095703125,\n\t\t\t\t0.7171173095703125,\n\t\t\t\t0.7180938720703125,\n\t\t\t\t0.7210235595703125,\n\t\t\t\t0.7229766845703125,\n\t\t\t\t0.7303009033203125,\n\t\t\t\t0.7312774658203125,\n\t\t\t\t0.7312774658203125,\n\t\t\t\t0.7278594970703125,\n\t\t\t\t0.7200469970703125,\n\t\t\t\t0.7053985595703125,\n\t\t\t\t0.6927032470703125,\n\t\t\t\t0.6795196533203125,\n\t\t\t\t0.6619415283203125,\n\t\t\t\t0.6370391845703125,\n\t\t\t\t0.6370391845703125,\n\t\t\t\t0.4532928466796875,\n\t\t\t\t0.11474609375,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t56,\n\t\t\t\t37\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"I06JT1xVyni-3f_f0lD_7\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 70.5,\n\t\t\t\"y\": -31,\n\t\t\t\"width\": 92.5,\n\t\t\t\"height\": 110,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 598843051,\n\t\t\t\"version\": 80,\n\t\t\t\"versionNonce\": 986691877,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312988042,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.5,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7.5,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6.5,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3.5,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t13\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t19\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t20.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t24\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t24.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t27.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t29.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t35\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t38\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t41.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t44.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t47.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t49.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t51\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t53\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14.5,\n\t\t\t\t\t54\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17.5,\n\t\t\t\t\t55.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19.5,\n\t\t\t\t\t56.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21,\n\t\t\t\t\t58\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t59\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23,\n\t\t\t\t\t60\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24,\n\t\t\t\t\t60.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26,\n\t\t\t\t\t60.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29,\n\t\t\t\t\t59\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35,\n\t\t\t\t\t56\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39.5,\n\t\t\t\t\t54.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44,\n\t\t\t\t\t53.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t48,\n\t\t\t\t\t53\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t51,\n\t\t\t\t\t53.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53.5,\n\t\t\t\t\t54\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t56,\n\t\t\t\t\t55\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t58,\n\t\t\t\t\t55\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t60,\n\t\t\t\t\t54.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t62.5,\n\t\t\t\t\t53.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t65,\n\t\t\t\t\t51\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t69,\n\t\t\t\t\t46\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t71.5,\n\t\t\t\t\t41.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t74,\n\t\t\t\t\t36\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t76,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t77,\n\t\t\t\t\t21\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t77.5,\n\t\t\t\t\t14\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t78,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t78,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t77.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t76.5,\n\t\t\t\t\t-4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t76,\n\t\t\t\t\t-8.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t75.5,\n\t\t\t\t\t-15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t76.5,\n\t\t\t\t\t-23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t78,\n\t\t\t\t\t-33\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t81,\n\t\t\t\t\t-42.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t84.5,\n\t\t\t\t\t-49.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t84.5,\n\t\t\t\t\t-49.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.346343994140625,\n\t\t\t\t0.3771209716796875,\n\t\t\t\t0.3785858154296875,\n\t\t\t\t0.3873748779296875,\n\t\t\t\t0.4235076904296875,\n\t\t\t\t0.4503631591796875,\n\t\t\t\t0.4850311279296875,\n\t\t\t\t0.50714111328125,\n\t\t\t\t0.51983642578125,\n\t\t\t\t0.51983642578125,\n\t\t\t\t0.51934814453125,\n\t\t\t\t0.51788330078125,\n\t\t\t\t0.51739501953125,\n\t\t\t\t0.51690673828125,\n\t\t\t\t0.51300048828125,\n\t\t\t\t0.50860595703125,\n\t\t\t\t0.50030517578125,\n\t\t\t\t0.4821014404296875,\n\t\t\t\t0.4777069091796875,\n\t\t\t\t0.4777069091796875,\n\t\t\t\t0.4796600341796875,\n\t\t\t\t0.4816131591796875,\n\t\t\t\t0.4845428466796875,\n\t\t\t\t0.4938201904296875,\n\t\t\t\t0.51007080078125,\n\t\t\t\t0.51007080078125,\n\t\t\t\t0.50860595703125,\n\t\t\t\t0.4996795654296875,\n\t\t\t\t0.4908905029296875,\n\t\t\t\t0.4908905029296875,\n\t\t\t\t0.4869842529296875,\n\t\t\t\t0.4781951904296875,\n\t\t\t\t0.4845428466796875,\n\t\t\t\t0.50421142578125,\n\t\t\t\t0.53546142578125,\n\t\t\t\t0.57208251953125,\n\t\t\t\t0.61212158203125,\n\t\t\t\t0.62286376953125,\n\t\t\t\t0.62335205078125,\n\t\t\t\t0.62335205078125,\n\t\t\t\t0.62237548828125,\n\t\t\t\t0.62042236328125,\n\t\t\t\t0.61553955078125,\n\t\t\t\t0.61163330078125,\n\t\t\t\t0.60919189453125,\n\t\t\t\t0.60919189453125,\n\t\t\t\t0.61016845703125,\n\t\t\t\t0.61065673828125,\n\t\t\t\t0.61114501953125,\n\t\t\t\t0.61505126953125,\n\t\t\t\t0.61505126953125,\n\t\t\t\t0.61114501953125,\n\t\t\t\t0.60772705078125,\n\t\t\t\t0.60772705078125,\n\t\t\t\t0.60772705078125,\n\t\t\t\t0.60919189453125,\n\t\t\t\t0.61163330078125,\n\t\t\t\t0.62139892578125,\n\t\t\t\t0.6360626220703125,\n\t\t\t\t0.6477813720703125,\n\t\t\t\t0.6511993408203125,\n\t\t\t\t0.6536407470703125,\n\t\t\t\t0.6546173095703125,\n\t\t\t\t0.6546173095703125,\n\t\t\t\t0.6555938720703125,\n\t\t\t\t0.6560821533203125,\n\t\t\t\t0.6565704345703125,\n\t\t\t\t0.6609649658203125,\n\t\t\t\t0.7156524658203125,\n\t\t\t\t0.7156524658203125,\n\t\t\t\t0.7415313720703125,\n\t\t\t\t0.766082763671875,\n\t\t\t\t0.766082763671875,\n\t\t\t\t0.764129638671875,\n\t\t\t\t0.7205352783203125,\n\t\t\t\t0.59991455078125,\n\t\t\t\t0.360992431640625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t84.5,\n\t\t\t\t-49.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"Wf0NNg2kiEumI3xBgpFtD\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -197.5,\n\t\t\t\"y\": -7,\n\t\t\t\"width\": 14.5,\n\t\t\t\"height\": 56.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1711249323,\n\t\t\t\"version\": 17,\n\t\t\t\"versionNonce\": 1534917803,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312991657,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t14.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14.5,\n\t\t\t\t\t33\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14,\n\t\t\t\t\t42\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t49\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t54\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t56\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t55.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t55.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.3790740966796875,\n\t\t\t\t0.3854217529296875,\n\t\t\t\t0.4449920654296875,\n\t\t\t\t0.4713592529296875,\n\t\t\t\t0.58526611328125,\n\t\t\t\t0.58526611328125,\n\t\t\t\t0.6853790283203125,\n\t\t\t\t0.7000274658203125,\n\t\t\t\t0.7039337158203125,\n\t\t\t\t0.7058868408203125,\n\t\t\t\t0.7058868408203125,\n\t\t\t\t0.6995391845703125,\n\t\t\t\t0.61700439453125,\n\t\t\t\t0.4073944091796875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t6.5,\n\t\t\t\t55.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"uG2lJwOCtBRHEjqDojqPN\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -216,\n\t\t\t\"y\": 6,\n\t\t\t\"width\": 62,\n\t\t\t\"height\": 80.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1683928965,\n\t\t\t\"version\": 24,\n\t\t\t\"versionNonce\": 1582150699,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312992163,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t-5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t-9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t-14\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21,\n\t\t\t\t\t-18.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34,\n\t\t\t\t\t-23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42.5,\n\t\t\t\t\t-24.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t50,\n\t\t\t\t\t-23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t56.5,\n\t\t\t\t\t-19\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t61,\n\t\t\t\t\t-13\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t62,\n\t\t\t\t\t-5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t58.5,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t56,\n\t\t\t\t\t11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t46,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t37,\n\t\t\t\t\t34.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.5,\n\t\t\t\t\t43\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20.5,\n\t\t\t\t\t49.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t54\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t56\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t55.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t55.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.4571990966796875,\n\t\t\t\t0.4654998779296875,\n\t\t\t\t0.4694061279296875,\n\t\t\t\t0.52081298828125,\n\t\t\t\t0.58721923828125,\n\t\t\t\t0.6258087158203125,\n\t\t\t\t0.6468048095703125,\n\t\t\t\t0.6629180908203125,\n\t\t\t\t0.6717071533203125,\n\t\t\t\t0.6775665283203125,\n\t\t\t\t0.6834259033203125,\n\t\t\t\t0.6922149658203125,\n\t\t\t\t0.7005157470703125,\n\t\t\t\t0.758758544921875,\n\t\t\t\t0.758758544921875,\n\t\t\t\t0.775360107421875,\n\t\t\t\t0.775360107421875,\n\t\t\t\t0.768035888671875,\n\t\t\t\t0.7102813720703125,\n\t\t\t\t0.58087158203125,\n\t\t\t\t0.3756561279296875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t3.5,\n\t\t\t\t55.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"X2voCsbmPszYvxCEQUDyJ\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -149,\n\t\t\t\"y\": 17,\n\t\t\t\"width\": 18.5,\n\t\t\t\"height\": 29,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1035417605,\n\t\t\t\"version\": 22,\n\t\t\t\"versionNonce\": 1350960395,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312992812,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t13.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t-4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t-7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.5,\n\t\t\t\t\t-11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t-12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.5,\n\t\t\t\t\t-12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t-12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t-12\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.359527587890625,\n\t\t\t\t0.4259490966796875,\n\t\t\t\t0.4259490966796875,\n\t\t\t\t0.52667236328125,\n\t\t\t\t0.58966064453125,\n\t\t\t\t0.58966064453125,\n\t\t\t\t0.6419219970703125,\n\t\t\t\t0.6580352783203125,\n\t\t\t\t0.6653594970703125,\n\t\t\t\t0.6990509033203125,\n\t\t\t\t0.7005157470703125,\n\t\t\t\t0.7005157470703125,\n\t\t\t\t0.7000274658203125,\n\t\t\t\t0.6970977783203125,\n\t\t\t\t0.6922149658203125,\n\t\t\t\t0.6765899658203125,\n\t\t\t\t0.60430908203125,\n\t\t\t\t0.4762420654296875,\n\t\t\t\t0.274566650390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t18.5,\n\t\t\t\t-12\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"_qPIJW3-huKqzRtZPM9Nk\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -113.5,\n\t\t\t\"y\": 7.5,\n\t\t\t\"width\": 40,\n\t\t\t\"height\": 22.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1720771877,\n\t\t\t\"version\": 35,\n\t\t\t\"versionNonce\": 1562300037,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312993383,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10,\n\t\t\t\t\t3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-12.5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-16.5,\n\t\t\t\t\t13\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-16,\n\t\t\t\t\t14\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-14.5,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-12,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-9.5,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6.5,\n\t\t\t\t\t13.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t-3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t-3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.5,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19,\n\t\t\t\t\t11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23.5,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23.5,\n\t\t\t\t\t5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.331207275390625,\n\t\t\t\t0.4532928466796875,\n\t\t\t\t0.53009033203125,\n\t\t\t\t0.58673095703125,\n\t\t\t\t0.6287384033203125,\n\t\t\t\t0.6678009033203125,\n\t\t\t\t0.6980743408203125,\n\t\t\t\t0.7278594970703125,\n\t\t\t\t0.752899169921875,\n\t\t\t\t0.757781982421875,\n\t\t\t\t0.757781982421875,\n\t\t\t\t0.757781982421875,\n\t\t\t\t0.756805419921875,\n\t\t\t\t0.752410888671875,\n\t\t\t\t0.7332305908203125,\n\t\t\t\t0.7332305908203125,\n\t\t\t\t0.7224884033203125,\n\t\t\t\t0.7117462158203125,\n\t\t\t\t0.7117462158203125,\n\t\t\t\t0.7122344970703125,\n\t\t\t\t0.7156524658203125,\n\t\t\t\t0.7356719970703125,\n\t\t\t\t0.7459259033203125,\n\t\t\t\t0.756805419921875,\n\t\t\t\t0.763153076171875,\n\t\t\t\t0.767547607421875,\n\t\t\t\t0.767547607421875,\n\t\t\t\t0.766571044921875,\n\t\t\t\t0.7469024658203125,\n\t\t\t\t0.6912384033203125,\n\t\t\t\t0.59454345703125,\n\t\t\t\t0.4298553466796875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t23.5,\n\t\t\t\t5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"mwy5FARYUPSW_apoNr5jV\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -100,\n\t\t\t\"y\": -2.5,\n\t\t\t\"width\": 36,\n\t\t\t\"height\": 24.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 601819211,\n\t\t\t\"version\": 32,\n\t\t\t\"versionNonce\": 1022272645,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312994005,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t8.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17.5,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17.5,\n\t\t\t\t\t8.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26.5,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t31.5,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t32.5,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33.5,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35,\n\t\t\t\t\t-4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35,\n\t\t\t\t\t-7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35.5,\n\t\t\t\t\t-11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36,\n\t\t\t\t\t-13.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36,\n\t\t\t\t\t-14.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36,\n\t\t\t\t\t-14.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.4767303466796875,\n\t\t\t\t0.4767303466796875,\n\t\t\t\t0.52325439453125,\n\t\t\t\t0.59844970703125,\n\t\t\t\t0.6712188720703125,\n\t\t\t\t0.6712188720703125,\n\t\t\t\t0.6834259033203125,\n\t\t\t\t0.6956329345703125,\n\t\t\t\t0.7029571533203125,\n\t\t\t\t0.7122344970703125,\n\t\t\t\t0.7205352783203125,\n\t\t\t\t0.7205352783203125,\n\t\t\t\t0.7205352783203125,\n\t\t\t\t0.7195587158203125,\n\t\t\t\t0.7151641845703125,\n\t\t\t\t0.7151641845703125,\n\t\t\t\t0.7220001220703125,\n\t\t\t\t0.7337188720703125,\n\t\t\t\t0.7395782470703125,\n\t\t\t\t0.7439727783203125,\n\t\t\t\t0.7464141845703125,\n\t\t\t\t0.754852294921875,\n\t\t\t\t0.771942138671875,\n\t\t\t\t0.782196044921875,\n\t\t\t\t0.782196044921875,\n\t\t\t\t0.780731201171875,\n\t\t\t\t0.7283477783203125,\n\t\t\t\t0.4337615966796875,\n\t\t\t\t0.06640625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t36,\n\t\t\t\t-14.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"peic3pXTQdbEE03fiEYtv\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -55.5,\n\t\t\t\"y\": -17,\n\t\t\t\"width\": 8,\n\t\t\t\"height\": 10.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1243583051,\n\t\t\t\"version\": 12,\n\t\t\t\"versionNonce\": 1679604933,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312994249,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t8.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t10.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.3990936279296875,\n\t\t\t\t0.4386444091796875,\n\t\t\t\t0.52423095703125,\n\t\t\t\t0.59210205078125,\n\t\t\t\t0.62042236328125,\n\t\t\t\t0.62091064453125,\n\t\t\t\t0.62091064453125,\n\t\t\t\t0.53399658203125,\n\t\t\t\t0.369781494140625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t7,\n\t\t\t\t10.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"R4i1WANvJ-5BoPhr9yR9C\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -64.5,\n\t\t\t\"y\": -31.5,\n\t\t\t\"width\": 61,\n\t\t\t\"height\": 20.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 112074251,\n\t\t\t\"version\": 35,\n\t\t\t\"versionNonce\": 2034233003,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312994806,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.5,\n\t\t\t\t\t5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24.5,\n\t\t\t\t\t14.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26.5,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t27.5,\n\t\t\t\t\t18.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.5,\n\t\t\t\t\t19.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.5,\n\t\t\t\t\t20\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29,\n\t\t\t\t\t19.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29,\n\t\t\t\t\t18.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.5,\n\t\t\t\t\t16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.5,\n\t\t\t\t\t13\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.5,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29.5,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t31,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t37,\n\t\t\t\t\t5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41.5,\n\t\t\t\t\t8.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t49,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t51,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t54.5,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t59,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t61,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t61,\n\t\t\t\t\t4\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.54229736328125,\n\t\t\t\t0.53497314453125,\n\t\t\t\t0.53057861328125,\n\t\t\t\t0.4967498779296875,\n\t\t\t\t0.4225311279296875,\n\t\t\t\t0.343414306640625,\n\t\t\t\t0.305816650390625,\n\t\t\t\t0.305816650390625,\n\t\t\t\t0.366851806640625,\n\t\t\t\t0.4322967529296875,\n\t\t\t\t0.54327392578125,\n\t\t\t\t0.56280517578125,\n\t\t\t\t0.57354736328125,\n\t\t\t\t0.57891845703125,\n\t\t\t\t0.58184814453125,\n\t\t\t\t0.59552001953125,\n\t\t\t\t0.60186767578125,\n\t\t\t\t0.60235595703125,\n\t\t\t\t0.60284423828125,\n\t\t\t\t0.60284423828125,\n\t\t\t\t0.60333251953125,\n\t\t\t\t0.60675048828125,\n\t\t\t\t0.62481689453125,\n\t\t\t\t0.6609649658203125,\n\t\t\t\t0.6839141845703125,\n\t\t\t\t0.6917266845703125,\n\t\t\t\t0.6917266845703125,\n\t\t\t\t0.6643829345703125,\n\t\t\t\t0.4630584716796875,\n\t\t\t\t0.4630584716796875,\n\t\t\t\t0.3771209716796875,\n\t\t\t\t0.09423828125,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t61,\n\t\t\t\t4\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"_e0l-fz8um_ua7N4N3gyZ\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -2,\n\t\t\t\"y\": -38,\n\t\t\t\"width\": 28.5,\n\t\t\t\"height\": 60,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 771483013,\n\t\t\t\"version\": 33,\n\t\t\t\"versionNonce\": 624802693,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312995253,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-12,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-13,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-13,\n\t\t\t\t\t13.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-11,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6.5,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.5,\n\t\t\t\t\t13\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t17.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t33\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t40.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t50.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t53\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-11,\n\t\t\t\t\t58.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-18,\n\t\t\t\t\t59.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-20.5,\n\t\t\t\t\t59\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-20.5,\n\t\t\t\t\t59\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.255523681640625,\n\t\t\t\t0.51885986328125,\n\t\t\t\t0.61505126953125,\n\t\t\t\t0.6824493408203125,\n\t\t\t\t0.7351837158203125,\n\t\t\t\t0.784149169921875,\n\t\t\t\t0.806121826171875,\n\t\t\t\t0.809051513671875,\n\t\t\t\t0.809051513671875,\n\t\t\t\t0.803192138671875,\n\t\t\t\t0.787567138671875,\n\t\t\t\t0.784149169921875,\n\t\t\t\t0.781707763671875,\n\t\t\t\t0.774383544921875,\n\t\t\t\t0.766571044921875,\n\t\t\t\t0.764617919921875,\n\t\t\t\t0.762176513671875,\n\t\t\t\t0.762176513671875,\n\t\t\t\t0.788543701171875,\n\t\t\t\t0.794891357421875,\n\t\t\t\t0.798309326171875,\n\t\t\t\t0.798309326171875,\n\t\t\t\t0.799285888671875,\n\t\t\t\t0.799285888671875,\n\t\t\t\t0.800750732421875,\n\t\t\t\t0.803680419921875,\n\t\t\t\t0.809539794921875,\n\t\t\t\t0.809539794921875,\n\t\t\t\t0.769012451171875,\n\t\t\t\t0.58184814453125,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-20.5,\n\t\t\t\t59\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"DXOzvS0Q2l_8oGjTqpQVL\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -159,\n\t\t\t\"y\": 82.5,\n\t\t\t\"width\": 8,\n\t\t\t\"height\": 26.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 590441291,\n\t\t\t\"version\": 12,\n\t\t\t\"versionNonce\": 1374589893,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312996171,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t17\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t26\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t26.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.2417144775390625,\n\t\t\t\t0.60089111328125,\n\t\t\t\t0.6629180908203125,\n\t\t\t\t0.6795196533203125,\n\t\t\t\t0.6804962158203125,\n\t\t\t\t0.6804962158203125,\n\t\t\t\t0.6424102783203125,\n\t\t\t\t0.52276611328125,\n\t\t\t\t0.251617431640625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t1,\n\t\t\t\t26.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"I870C7ZSAkQ1CsLwE93sP\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -171.5,\n\t\t\t\"y\": 111.5,\n\t\t\t\"width\": 42.5,\n\t\t\t\"height\": 23.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 2026452747,\n\t\t\t\"version\": 14,\n\t\t\t\"versionNonce\": 28603237,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312996450,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t-2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t-5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t-6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t-9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t31.5,\n\t\t\t\t\t-14.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36.5,\n\t\t\t\t\t-18\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40.5,\n\t\t\t\t\t-20.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42.5,\n\t\t\t\t\t-23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42.5,\n\t\t\t\t\t-23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42.5,\n\t\t\t\t\t-23.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.4318084716796875,\n\t\t\t\t0.4518280029296875,\n\t\t\t\t0.50811767578125,\n\t\t\t\t0.56427001953125,\n\t\t\t\t0.61163330078125,\n\t\t\t\t0.6433868408203125,\n\t\t\t\t0.6570587158203125,\n\t\t\t\t0.6619415283203125,\n\t\t\t\t0.6619415283203125,\n\t\t\t\t0.62091064453125,\n\t\t\t\t0.4557342529296875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t42.5,\n\t\t\t\t-23.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"VWLoPMWSAUpGsGa3gMMh3\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -176.5,\n\t\t\t\"y\": 88.5,\n\t\t\t\"width\": 37.5,\n\t\t\t\"height\": 22.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 2022351211,\n\t\t\t\"version\": 12,\n\t\t\t\"versionNonce\": 246539173,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312996819,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t-3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t-6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22.5,\n\t\t\t\t\t-12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28,\n\t\t\t\t\t-15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t32.5,\n\t\t\t\t\t-19\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36,\n\t\t\t\t\t-21\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t37.5,\n\t\t\t\t\t-22.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t37.5,\n\t\t\t\t\t-22.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.4386444091796875,\n\t\t\t\t0.4825897216796875,\n\t\t\t\t0.56280517578125,\n\t\t\t\t0.6341094970703125,\n\t\t\t\t0.6804962158203125,\n\t\t\t\t0.7053985595703125,\n\t\t\t\t0.7053985595703125,\n\t\t\t\t0.61309814453125,\n\t\t\t\t0.300445556640625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t37.5,\n\t\t\t\t-22.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"BbByrpbxDg49ExkvzaTu7\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -125.5,\n\t\t\t\"y\": 80,\n\t\t\t\"width\": 30.5,\n\t\t\t\"height\": 21,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1485526315,\n\t\t\t\"version\": 27,\n\t\t\t\"versionNonce\": 1595047755,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312997506,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9,\n\t\t\t\t\t-3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11,\n\t\t\t\t\t-6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t-8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t-9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19,\n\t\t\t\t\t-9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t-9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25,\n\t\t\t\t\t-7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t27.5,\n\t\t\t\t\t-4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30.5,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30.5,\n\t\t\t\t\t4.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.4000701904296875,\n\t\t\t\t0.4708709716796875,\n\t\t\t\t0.53985595703125,\n\t\t\t\t0.60040283203125,\n\t\t\t\t0.6472930908203125,\n\t\t\t\t0.6717071533203125,\n\t\t\t\t0.6819610595703125,\n\t\t\t\t0.6844024658203125,\n\t\t\t\t0.6878204345703125,\n\t\t\t\t0.7044219970703125,\n\t\t\t\t0.7044219970703125,\n\t\t\t\t0.6975860595703125,\n\t\t\t\t0.6922149658203125,\n\t\t\t\t0.6897735595703125,\n\t\t\t\t0.6897735595703125,\n\t\t\t\t0.6907501220703125,\n\t\t\t\t0.6941680908203125,\n\t\t\t\t0.7029571533203125,\n\t\t\t\t0.7141876220703125,\n\t\t\t\t0.7283477783203125,\n\t\t\t\t0.7356719970703125,\n\t\t\t\t0.7356719970703125,\n\t\t\t\t0.7268829345703125,\n\t\t\t\t0.61993408203125,\n\t\t\t\t0.317047119140625,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t30.5,\n\t\t\t\t4.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"ZVIgkjujTfoykZv_gIADk\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -122.5,\n\t\t\t\"y\": 114.5,\n\t\t\t\"width\": 43,\n\t\t\t\"height\": 39,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 818949861,\n\t\t\t\"version\": 33,\n\t\t\t\"versionNonce\": 27477221,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312998296,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6.5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10.5,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-12.5,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-14,\n\t\t\t\t\t20\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-13,\n\t\t\t\t\t25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-11,\n\t\t\t\t\t30\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7,\n\t\t\t\t\t34\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t36.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t38.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.5,\n\t\t\t\t\t38.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t37.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20,\n\t\t\t\t\t34.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23.5,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23.5,\n\t\t\t\t\t23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t18\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8,\n\t\t\t\t\t3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-16.5,\n\t\t\t\t\t8.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-19,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-19.5,\n\t\t\t\t\t13\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-19.5,\n\t\t\t\t\t13\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.3849334716796875,\n\t\t\t\t0.4928436279296875,\n\t\t\t\t0.56915283203125,\n\t\t\t\t0.60479736328125,\n\t\t\t\t0.6404571533203125,\n\t\t\t\t0.6697540283203125,\n\t\t\t\t0.6897735595703125,\n\t\t\t\t0.7136993408203125,\n\t\t\t\t0.7498321533203125,\n\t\t\t\t0.787078857421875,\n\t\t\t\t0.810516357421875,\n\t\t\t\t0.819305419921875,\n\t\t\t\t0.821746826171875,\n\t\t\t\t0.823211669921875,\n\t\t\t\t0.823699951171875,\n\t\t\t\t0.823699951171875,\n\t\t\t\t0.823211669921875,\n\t\t\t\t0.822235107421875,\n\t\t\t\t0.822235107421875,\n\t\t\t\t0.821746826171875,\n\t\t\t\t0.820281982421875,\n\t\t\t\t0.819793701171875,\n\t\t\t\t0.819793701171875,\n\t\t\t\t0.818817138671875,\n\t\t\t\t0.817352294921875,\n\t\t\t\t0.812469482421875,\n\t\t\t\t0.779266357421875,\n\t\t\t\t0.7136993408203125,\n\t\t\t\t0.59747314453125,\n\t\t\t\t0.3824920654296875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-19.5,\n\t\t\t\t13\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"Sm0zHEmcg76rzSg-71-ps\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -102,\n\t\t\t\"y\": 104,\n\t\t\t\"width\": 42.5,\n\t\t\t\"height\": 38.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1355524075,\n\t\t\t\"version\": 38,\n\t\t\t\"versionNonce\": 1200138501,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312999246,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t13.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t18.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t24\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20.5,\n\t\t\t\t\t28\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t31\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22.5,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22.5,\n\t\t\t\t\t32.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22.5,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22.5,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22.5,\n\t\t\t\t\t22\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23.5,\n\t\t\t\t\t18\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26,\n\t\t\t\t\t14.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.5,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t31,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t37,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39.5,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42.5,\n\t\t\t\t\t20.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42.5,\n\t\t\t\t\t24.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41.5,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39.5,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36,\n\t\t\t\t\t35\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t32,\n\t\t\t\t\t37\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t27.5,\n\t\t\t\t\t38.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23,\n\t\t\t\t\t38\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t36\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17,\n\t\t\t\t\t34\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17,\n\t\t\t\t\t32\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.3981170654296875,\n\t\t\t\t0.4747772216796875,\n\t\t\t\t0.54278564453125,\n\t\t\t\t0.60772705078125,\n\t\t\t\t0.6531524658203125,\n\t\t\t\t0.6927032470703125,\n\t\t\t\t0.7166290283203125,\n\t\t\t\t0.7376251220703125,\n\t\t\t\t0.757781982421875,\n\t\t\t\t0.768035888671875,\n\t\t\t\t0.773406982421875,\n\t\t\t\t0.775848388671875,\n\t\t\t\t0.775848388671875,\n\t\t\t\t0.776824951171875,\n\t\t\t\t0.777313232421875,\n\t\t\t\t0.777313232421875,\n\t\t\t\t0.775848388671875,\n\t\t\t\t0.774383544921875,\n\t\t\t\t0.772430419921875,\n\t\t\t\t0.772430419921875,\n\t\t\t\t0.771453857421875,\n\t\t\t\t0.771453857421875,\n\t\t\t\t0.772918701171875,\n\t\t\t\t0.779266357421875,\n\t\t\t\t0.783660888671875,\n\t\t\t\t0.790496826171875,\n\t\t\t\t0.804656982421875,\n\t\t\t\t0.818817138671875,\n\t\t\t\t0.829559326171875,\n\t\t\t\t0.833465576171875,\n\t\t\t\t0.833465576171875,\n\t\t\t\t0.826629638671875,\n\t\t\t\t0.781219482421875,\n\t\t\t\t0.59014892578125,\n\t\t\t\t0.368316650390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t17,\n\t\t\t\t32\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"AoCAbFThHudHyzaSQRUoF\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -38.5,\n\t\t\t\"y\": 103,\n\t\t\t\"width\": 24.5,\n\t\t\t\"height\": 28.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1366693323,\n\t\t\t\"version\": 29,\n\t\t\t\"versionNonce\": 70878859,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660312999882,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10.5,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-13,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-13.5,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-12.5,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t19.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t27.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t27.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t25.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.4127655029296875,\n\t\t\t\t0.4547576904296875,\n\t\t\t\t0.52569580078125,\n\t\t\t\t0.59942626953125,\n\t\t\t\t0.6536407470703125,\n\t\t\t\t0.6975860595703125,\n\t\t\t\t0.7459259033203125,\n\t\t\t\t0.785614013671875,\n\t\t\t\t0.800262451171875,\n\t\t\t\t0.800262451171875,\n\t\t\t\t0.795867919921875,\n\t\t\t\t0.773895263671875,\n\t\t\t\t0.750457763671875,\n\t\t\t\t0.7439727783203125,\n\t\t\t\t0.7400665283203125,\n\t\t\t\t0.7376251220703125,\n\t\t\t\t0.7376251220703125,\n\t\t\t\t0.750946044921875,\n\t\t\t\t0.761199951171875,\n\t\t\t\t0.772918701171875,\n\t\t\t\t0.780242919921875,\n\t\t\t\t0.780242919921875,\n\t\t\t\t0.7425079345703125,\n\t\t\t\t0.6546173095703125,\n\t\t\t\t0.4728240966796875,\n\t\t\t\t0.2216949462890625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-0.5,\n\t\t\t\t25.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"BKrlqRk98mlmUvLgmM91O\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -13.5,\n\t\t\t\"y\": 108.5,\n\t\t\t\"width\": 6,\n\t\t\t\"height\": 8,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 451951525,\n\t\t\t\"version\": 11,\n\t\t\t\"versionNonce\": 1480414341,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313000160,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t8\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.4659881591796875,\n\t\t\t\t0.51202392578125,\n\t\t\t\t0.55401611328125,\n\t\t\t\t0.60821533203125,\n\t\t\t\t0.62188720703125,\n\t\t\t\t0.62188720703125,\n\t\t\t\t0.60626220703125,\n\t\t\t\t0.51007080078125,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t5.5,\n\t\t\t\t8\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"mktjUaEUvNzUmTvkZ-Qul\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -28,\n\t\t\t\"y\": 88.5,\n\t\t\t\"width\": 7,\n\t\t\t\"height\": 2,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1414783563,\n\t\t\t\"version\": 9,\n\t\t\t\"versionNonce\": 1107748043,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313000378,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t-2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t-2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t-2\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.61553955078125,\n\t\t\t\t0.6570587158203125,\n\t\t\t\t0.6570587158203125,\n\t\t\t\t0.6355743408203125,\n\t\t\t\t0.50762939453125,\n\t\t\t\t0.2104644775390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t7,\n\t\t\t\t-2\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"3rKWAfMoFAy5NkEqlBweN\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 6,\n\t\t\t\"y\": 74,\n\t\t\t\"width\": 26.5,\n\t\t\t\"height\": 33,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1910432101,\n\t\t\t\"version\": 30,\n\t\t\t\"versionNonce\": 2071931947,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313000978,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t19.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9,\n\t\t\t\t\t24\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t24\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t22.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t21.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t21\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.5,\n\t\t\t\t\t21.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7.5,\n\t\t\t\t\t23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8.5,\n\t\t\t\t\t26\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8.5,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7,\n\t\t\t\t\t31\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5,\n\t\t\t\t\t32.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t33\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t33\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t30\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t28\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18,\n\t\t\t\t\t23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18,\n\t\t\t\t\t23\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.360992431640625,\n\t\t\t\t0.54718017578125,\n\t\t\t\t0.6253204345703125,\n\t\t\t\t0.6731719970703125,\n\t\t\t\t0.7112579345703125,\n\t\t\t\t0.7322540283203125,\n\t\t\t\t0.7439727783203125,\n\t\t\t\t0.753387451171875,\n\t\t\t\t0.756805419921875,\n\t\t\t\t0.757293701171875,\n\t\t\t\t0.752410888671875,\n\t\t\t\t0.7342071533203125,\n\t\t\t\t0.7259063720703125,\n\t\t\t\t0.7210235595703125,\n\t\t\t\t0.7293243408203125,\n\t\t\t\t0.7293243408203125,\n\t\t\t\t0.775360107421875,\n\t\t\t\t0.794891357421875,\n\t\t\t\t0.813934326171875,\n\t\t\t\t0.822723388671875,\n\t\t\t\t0.824676513671875,\n\t\t\t\t0.824676513671875,\n\t\t\t\t0.820281982421875,\n\t\t\t\t0.777313232421875,\n\t\t\t\t0.6897735595703125,\n\t\t\t\t0.50225830078125,\n\t\t\t\t0.1489410400390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t18,\n\t\t\t\t23\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"V2RYxqf94QcZ7JwJlzChA\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 33,\n\t\t\t\"y\": 90,\n\t\t\t\"width\": 5,\n\t\t\t\"height\": 6.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1618558981,\n\t\t\t\"version\": 10,\n\t\t\t\"versionNonce\": 109523275,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313001181,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t5.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.52227783203125,\n\t\t\t\t0.6609649658203125,\n\t\t\t\t0.6800079345703125,\n\t\t\t\t0.6800079345703125,\n\t\t\t\t0.6253204345703125,\n\t\t\t\t0.4698944091796875,\n\t\t\t\t0.1757965087890625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t4,\n\t\t\t\t5.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"yYfoBRK7Goitw33WKWZxA\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 18.5,\n\t\t\t\"y\": 65.5,\n\t\t\t\"width\": 6,\n\t\t\t\"height\": 1,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1840749797,\n\t\t\t\"version\": 7,\n\t\t\t\"versionNonce\": 2011507461,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313001370,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t1\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.6365509033203125,\n\t\t\t\t0.6648712158203125,\n\t\t\t\t0.6321563720703125,\n\t\t\t\t0.6321563720703125,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t6,\n\t\t\t\t1\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"D1dxiBVmtnZzdRvL1LqxP\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 57.5,\n\t\t\t\"y\": 74,\n\t\t\t\"width\": 34.5,\n\t\t\t\"height\": 20.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1150989259,\n\t\t\t\"version\": 33,\n\t\t\t\"versionNonce\": 1750351307,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313002006,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-9,\n\t\t\t\t\t11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-9,\n\t\t\t\t\t13.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3.5,\n\t\t\t\t\t17\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t-3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t-3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t-2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21.5,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23.5,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25,\n\t\t\t\t\t5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25.5,\n\t\t\t\t\t4.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.2129058837890625,\n\t\t\t\t0.3863983154296875,\n\t\t\t\t0.4723358154296875,\n\t\t\t\t0.58038330078125,\n\t\t\t\t0.6975860595703125,\n\t\t\t\t0.7488555908203125,\n\t\t\t\t0.804656982421875,\n\t\t\t\t0.838836669921875,\n\t\t\t\t0.847137451171875,\n\t\t\t\t0.847137451171875,\n\t\t\t\t0.845184326171875,\n\t\t\t\t0.837371826171875,\n\t\t\t\t0.816864013671875,\n\t\t\t\t0.796844482421875,\n\t\t\t\t0.767059326171875,\n\t\t\t\t0.7342071533203125,\n\t\t\t\t0.7141876220703125,\n\t\t\t\t0.7044219970703125,\n\t\t\t\t0.7044219970703125,\n\t\t\t\t0.7078399658203125,\n\t\t\t\t0.7303009033203125,\n\t\t\t\t0.814910888671875,\n\t\t\t\t0.836395263671875,\n\t\t\t\t0.861297607421875,\n\t\t\t\t0.863739013671875,\n\t\t\t\t0.863739013671875,\n\t\t\t\t0.850067138671875,\n\t\t\t\t0.788543701171875,\n\t\t\t\t0.6746368408203125,\n\t\t\t\t0.4479217529296875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t25.5,\n\t\t\t\t4.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"RJBWUsOKI3d7icwpDbazP\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 74.5,\n\t\t\t\"y\": 60.5,\n\t\t\t\"width\": 41,\n\t\t\t\"height\": 21,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 611293285,\n\t\t\t\"version\": 32,\n\t\t\t\"versionNonce\": 582600651,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313002541,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t8.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14.5,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.5,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19.5,\n\t\t\t\t\t-4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21.5,\n\t\t\t\t\t-6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23.5,\n\t\t\t\t\t-7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t27.5,\n\t\t\t\t\t-7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29,\n\t\t\t\t\t-7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t32,\n\t\t\t\t\t-5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t38.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40.5,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41,\n\t\t\t\t\t13\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41,\n\t\t\t\t\t13.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40,\n\t\t\t\t\t13\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40,\n\t\t\t\t\t13\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.046875,\n\t\t\t\t0.4503631591796875,\n\t\t\t\t0.4503631591796875,\n\t\t\t\t0.6360626220703125,\n\t\t\t\t0.6995391845703125,\n\t\t\t\t0.755340576171875,\n\t\t\t\t0.794403076171875,\n\t\t\t\t0.814910888671875,\n\t\t\t\t0.829559326171875,\n\t\t\t\t0.836395263671875,\n\t\t\t\t0.840301513671875,\n\t\t\t\t0.852020263671875,\n\t\t\t\t0.860321044921875,\n\t\t\t\t0.864227294921875,\n\t\t\t\t0.865203857421875,\n\t\t\t\t0.865203857421875,\n\t\t\t\t0.865203857421875,\n\t\t\t\t0.865203857421875,\n\t\t\t\t0.867645263671875,\n\t\t\t\t0.874481201171875,\n\t\t\t\t0.9028167724609375,\n\t\t\t\t0.9028167724609375,\n\t\t\t\t0.9252777099609375,\n\t\t\t\t0.9521331787109375,\n\t\t\t\t0.9521331787109375,\n\t\t\t\t0.9492034912109375,\n\t\t\t\t0.8906097412109375,\n\t\t\t\t0.7195587158203125,\n\t\t\t\t0.08984375,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t40,\n\t\t\t\t13\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"CYiDXSSOxUOWgh6FYZHb_\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -128,\n\t\t\t\"y\": -197.5,\n\t\t\t\"width\": 54,\n\t\t\t\"height\": 74,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1417653861,\n\t\t\t\"version\": 15,\n\t\t\t\"versionNonce\": 1714143749,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313004804,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-9,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-19.5,\n\t\t\t\t\t27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-29,\n\t\t\t\t\t38.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-38.5,\n\t\t\t\t\t50.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-47,\n\t\t\t\t\t61.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-52,\n\t\t\t\t\t69.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-54,\n\t\t\t\t\t73.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-52,\n\t\t\t\t\t74\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-49.5,\n\t\t\t\t\t72\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-49.5,\n\t\t\t\t\t72\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.4313201904296875,\n\t\t\t\t0.4689178466796875,\n\t\t\t\t0.55401611328125,\n\t\t\t\t0.6326446533203125,\n\t\t\t\t0.6839141845703125,\n\t\t\t\t0.751434326171875,\n\t\t\t\t0.768524169921875,\n\t\t\t\t0.770965576171875,\n\t\t\t\t0.770965576171875,\n\t\t\t\t0.7278594970703125,\n\t\t\t\t0.60870361328125,\n\t\t\t\t0.3981170654296875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-49.5,\n\t\t\t\t72\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"MwkA9eQGW5c7-9SJlWsWc\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -183,\n\t\t\t\"y\": -130,\n\t\t\t\"width\": 117.5,\n\t\t\t\"height\": 10.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 887950539,\n\t\t\t\"version\": 17,\n\t\t\t\"versionNonce\": 466309579,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313005378,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t50,\n\t\t\t\t\t3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t65.5,\n\t\t\t\t\t5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t82,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t97,\n\t\t\t\t\t8.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t109.5,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t117.5,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t117.5,\n\t\t\t\t\t9\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.325836181640625,\n\t\t\t\t0.336578369140625,\n\t\t\t\t0.3863983154296875,\n\t\t\t\t0.4757537841796875,\n\t\t\t\t0.52960205078125,\n\t\t\t\t0.52960205078125,\n\t\t\t\t0.6502227783203125,\n\t\t\t\t0.6844024658203125,\n\t\t\t\t0.7000274658203125,\n\t\t\t\t0.7088165283203125,\n\t\t\t\t0.7102813720703125,\n\t\t\t\t0.7102813720703125,\n\t\t\t\t0.6365509033203125,\n\t\t\t\t0.4098358154296875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t117.5,\n\t\t\t\t9\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"MXseGRLQdT2_sNY6BIMVz\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -120.5,\n\t\t\t\"y\": -197,\n\t\t\t\"width\": 40.5,\n\t\t\t\"height\": 79,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1453573221,\n\t\t\t\"version\": 16,\n\t\t\t\"versionNonce\": 1012176587,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313006128,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t17.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19.5,\n\t\t\t\t\t43.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25,\n\t\t\t\t\t54\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28,\n\t\t\t\t\t59\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35,\n\t\t\t\t\t70\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t38.5,\n\t\t\t\t\t75\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40,\n\t\t\t\t\t78\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39.5,\n\t\t\t\t\t79\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39.5,\n\t\t\t\t\t79\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.1435699462890625,\n\t\t\t\t0.4298553466796875,\n\t\t\t\t0.52911376953125,\n\t\t\t\t0.61553955078125,\n\t\t\t\t0.6780548095703125,\n\t\t\t\t0.7117462158203125,\n\t\t\t\t0.7381134033203125,\n\t\t\t\t0.7478790283203125,\n\t\t\t\t0.7478790283203125,\n\t\t\t\t0.7478790283203125,\n\t\t\t\t0.6809844970703125,\n\t\t\t\t0.55010986328125,\n\t\t\t\t0.295562744140625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t39.5,\n\t\t\t\t79\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"hC-ShjyiDsf7U8BgjA2q0\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -123.5,\n\t\t\t\"y\": -198.5,\n\t\t\t\"width\": 75.5,\n\t\t\t\"height\": 53,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1375555429,\n\t\t\t\"version\": 36,\n\t\t\t\"versionNonce\": 464038411,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313007348,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t-2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t-3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t-3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t-2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16.5,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22.5,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.5,\n\t\t\t\t\t16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t38.5,\n\t\t\t\t\t23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44,\n\t\t\t\t\t27.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t49.5,\n\t\t\t\t\t31.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t54.5,\n\t\t\t\t\t35\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t59,\n\t\t\t\t\t38.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t62.5,\n\t\t\t\t\t41.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t67,\n\t\t\t\t\t45\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t68.5,\n\t\t\t\t\t46\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t71,\n\t\t\t\t\t48\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t73,\n\t\t\t\t\t49\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t73.5,\n\t\t\t\t\t49.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t74,\n\t\t\t\t\t50\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t74,\n\t\t\t\t\t49.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t74,\n\t\t\t\t\t49\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t73.5,\n\t\t\t\t\t48.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t73,\n\t\t\t\t\t48\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t72.5,\n\t\t\t\t\t48\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t72.5,\n\t\t\t\t\t47.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t72,\n\t\t\t\t\t47.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t72,\n\t\t\t\t\t47.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.287750244140625,\n\t\t\t\t0.292633056640625,\n\t\t\t\t0.314605712890625,\n\t\t\t\t0.331695556640625,\n\t\t\t\t0.3766326904296875,\n\t\t\t\t0.4269256591796875,\n\t\t\t\t0.6428985595703125,\n\t\t\t\t0.6892852783203125,\n\t\t\t\t0.7293243408203125,\n\t\t\t\t0.763641357421875,\n\t\t\t\t0.788543701171875,\n\t\t\t\t0.809539794921875,\n\t\t\t\t0.825164794921875,\n\t\t\t\t0.833465576171875,\n\t\t\t\t0.837860107421875,\n\t\t\t\t0.839324951171875,\n\t\t\t\t0.842254638671875,\n\t\t\t\t0.850555419921875,\n\t\t\t\t0.855926513671875,\n\t\t\t\t0.859344482421875,\n\t\t\t\t0.861297607421875,\n\t\t\t\t0.862274169921875,\n\t\t\t\t0.862274169921875,\n\t\t\t\t0.862274169921875,\n\t\t\t\t0.862762451171875,\n\t\t\t\t0.862274169921875,\n\t\t\t\t0.861785888671875,\n\t\t\t\t0.835906982421875,\n\t\t\t\t0.812957763671875,\n\t\t\t\t0.775360107421875,\n\t\t\t\t0.6468048095703125,\n\t\t\t\t0.4000701904296875,\n\t\t\t\t0.2339019775390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t72,\n\t\t\t\t47.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"jhpNEdRW44SLViGBb_9aG\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -49.5,\n\t\t\t\"y\": -152.5,\n\t\t\t\"width\": 35.5,\n\t\t\t\"height\": 35.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1343688741,\n\t\t\t\"version\": 20,\n\t\t\t\"versionNonce\": 411543627,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313007818,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6.5,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-9.5,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-13,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-18.5,\n\t\t\t\t\t17.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-24.5,\n\t\t\t\t\t23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-30,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-33.5,\n\t\t\t\t\t33\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-35.5,\n\t\t\t\t\t35\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-35.5,\n\t\t\t\t\t35.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-35,\n\t\t\t\t\t35\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-34,\n\t\t\t\t\t34\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-32.5,\n\t\t\t\t\t31.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-32.5,\n\t\t\t\t\t31\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-32.5,\n\t\t\t\t\t31\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.3903045654296875,\n\t\t\t\t0.50518798828125,\n\t\t\t\t0.53399658203125,\n\t\t\t\t0.56085205078125,\n\t\t\t\t0.59747314453125,\n\t\t\t\t0.6756134033203125,\n\t\t\t\t0.7005157470703125,\n\t\t\t\t0.7112579345703125,\n\t\t\t\t0.7195587158203125,\n\t\t\t\t0.7337188720703125,\n\t\t\t\t0.769012451171875,\n\t\t\t\t0.777313232421875,\n\t\t\t\t0.777313232421875,\n\t\t\t\t0.767547607421875,\n\t\t\t\t0.6873321533203125,\n\t\t\t\t0.52960205078125,\n\t\t\t\t0.337554931640625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-32.5,\n\t\t\t\t31\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"csmgTv0Jju4ahuCOCP4Ya\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -76.5,\n\t\t\t\"y\": -122.5,\n\t\t\t\"width\": 22,\n\t\t\t\"height\": 28.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1398674917,\n\t\t\t\"version\": 15,\n\t\t\t\"versionNonce\": 439458181,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313008225,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t-4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t-7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t-10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t-15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15,\n\t\t\t\t\t-19.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19.5,\n\t\t\t\t\t-25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21.5,\n\t\t\t\t\t-27.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t-28\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t-28\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.1899566650390625,\n\t\t\t\t0.312164306640625,\n\t\t\t\t0.373199462890625,\n\t\t\t\t0.4181365966796875,\n\t\t\t\t0.4484100341796875,\n\t\t\t\t0.4777069091796875,\n\t\t\t\t0.51446533203125,\n\t\t\t\t0.55450439453125,\n\t\t\t\t0.59307861328125,\n\t\t\t\t0.59307861328125,\n\t\t\t\t0.4728240966796875,\n\t\t\t\t0.1455230712890625,\n\t\t\t\t0.1455230712890625,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t22,\n\t\t\t\t-28\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"McBJydfG4YFNj8kTPkVs1\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -166.5,\n\t\t\t\"y\": -152.5,\n\t\t\t\"width\": 24.5,\n\t\t\t\"height\": 32,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 242380107,\n\t\t\t\"version\": 13,\n\t\t\t\"versionNonce\": 333494539,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313009038,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t14\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t20.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23,\n\t\t\t\t\t31.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23.5,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24.5,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24.5,\n\t\t\t\t\t32\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.324859619140625,\n\t\t\t\t0.3961639404296875,\n\t\t\t\t0.4552459716796875,\n\t\t\t\t0.52520751953125,\n\t\t\t\t0.58477783203125,\n\t\t\t\t0.60382080078125,\n\t\t\t\t0.60382080078125,\n\t\t\t\t0.60382080078125,\n\t\t\t\t0.4488983154296875,\n\t\t\t\t0.4488983154296875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t24.5,\n\t\t\t\t32\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"AB_Ahw45cmnYQVeESj0CM\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -152.5,\n\t\t\t\"y\": -155.5,\n\t\t\t\"width\": 24.5,\n\t\t\t\"height\": 26,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 577466661,\n\t\t\t\"version\": 14,\n\t\t\t\"versionNonce\": 596140907,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313009357,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14.5,\n\t\t\t\t\t17\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17,\n\t\t\t\t\t19\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22.5,\n\t\t\t\t\t24.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24,\n\t\t\t\t\t25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24.5,\n\t\t\t\t\t26\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23.5,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t23.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.4318084716796875,\n\t\t\t\t0.4318084716796875,\n\t\t\t\t0.4821014404296875,\n\t\t\t\t0.54669189453125,\n\t\t\t\t0.58673095703125,\n\t\t\t\t0.59307861328125,\n\t\t\t\t0.59307861328125,\n\t\t\t\t0.4640350341796875,\n\t\t\t\t0.4161834716796875,\n\t\t\t\t0.331695556640625,\n\t\t\t\t0.0205078125,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t22,\n\t\t\t\t23.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"naSRkIaMkXnDp4HKikm5T\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -146.5,\n\t\t\t\"y\": -169.5,\n\t\t\t\"width\": 30.5,\n\t\t\t\"height\": 39.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 36838597,\n\t\t\t\"version\": 16,\n\t\t\t\"versionNonce\": 1856899179,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313009659,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25.5,\n\t\t\t\t\t34.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29,\n\t\t\t\t\t38\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30.5,\n\t\t\t\t\t39.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29.5,\n\t\t\t\t\t38.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t27.5,\n\t\t\t\t\t35.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25,\n\t\t\t\t\t32\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.294097900390625,\n\t\t\t\t0.4142303466796875,\n\t\t\t\t0.4142303466796875,\n\t\t\t\t0.4777069091796875,\n\t\t\t\t0.56085205078125,\n\t\t\t\t0.60821533203125,\n\t\t\t\t0.62481689453125,\n\t\t\t\t0.62481689453125,\n\t\t\t\t0.58868408203125,\n\t\t\t\t0.54425048828125,\n\t\t\t\t0.51495361328125,\n\t\t\t\t0.350250244140625,\n\t\t\t\t0.2465972900390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t25,\n\t\t\t\t32\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"kzWTV52VGiMWsjywJxkyR\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -136,\n\t\t\t\"y\": -177,\n\t\t\t\"width\": 35.5,\n\t\t\t\"height\": 43,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 560285637,\n\t\t\t\"version\": 18,\n\t\t\t\"versionNonce\": 1012647947,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313009965,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t20\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t31\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t27.5,\n\t\t\t\t\t37\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t32,\n\t\t\t\t\t41\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34.5,\n\t\t\t\t\t43\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35.5,\n\t\t\t\t\t43\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34.5,\n\t\t\t\t\t42.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33,\n\t\t\t\t\t40\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30,\n\t\t\t\t\t35.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26,\n\t\t\t\t\t30\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t24\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t24\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.354156494140625,\n\t\t\t\t0.4029998779296875,\n\t\t\t\t0.4855194091796875,\n\t\t\t\t0.62237548828125,\n\t\t\t\t0.6409454345703125,\n\t\t\t\t0.6409454345703125,\n\t\t\t\t0.6433868408203125,\n\t\t\t\t0.62286376953125,\n\t\t\t\t0.57550048828125,\n\t\t\t\t0.55792236328125,\n\t\t\t\t0.54083251953125,\n\t\t\t\t0.4747772216796875,\n\t\t\t\t0.4025115966796875,\n\t\t\t\t0.295074462890625,\n\t\t\t\t0.119140625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t22,\n\t\t\t\t24\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"mLuHKcSWAtYbPFQcchfCt\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -128,\n\t\t\t\"y\": -189.5,\n\t\t\t\"width\": 45,\n\t\t\t\"height\": 43.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 506253861,\n\t\t\t\"version\": 13,\n\t\t\t\"versionNonce\": 948187749,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313010170,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19,\n\t\t\t\t\t22\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26,\n\t\t\t\t\t30\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33,\n\t\t\t\t\t36.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40,\n\t\t\t\t\t41\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t45,\n\t\t\t\t\t43.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t45,\n\t\t\t\t\t43.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.297515869140625,\n\t\t\t\t0.297515869140625,\n\t\t\t\t0.346343994140625,\n\t\t\t\t0.4606170654296875,\n\t\t\t\t0.6570587158203125,\n\t\t\t\t0.6570587158203125,\n\t\t\t\t0.6809844970703125,\n\t\t\t\t0.6643829345703125,\n\t\t\t\t0.53692626953125,\n\t\t\t\t0.369781494140625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t45,\n\t\t\t\t43.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"VzFwFeQkyT613NcCxcDgk\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -235,\n\t\t\t\"y\": -99.5,\n\t\t\t\"width\": 61,\n\t\t\t\"height\": 37.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 651842155,\n\t\t\t\"version\": 63,\n\t\t\t\"versionNonce\": 1712723915,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313013472,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.5,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t21\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7.5,\n\t\t\t\t\t26\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8,\n\t\t\t\t\t29.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t29.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4,\n\t\t\t\t\t27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t18\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t13.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t19\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.5,\n\t\t\t\t\t24.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t31.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t34\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9,\n\t\t\t\t\t34\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.5,\n\t\t\t\t\t32.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19,\n\t\t\t\t\t19\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21.5,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23.5,\n\t\t\t\t\t13.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26,\n\t\t\t\t\t13.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25.5,\n\t\t\t\t\t19.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25,\n\t\t\t\t\t23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24.5,\n\t\t\t\t\t27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24,\n\t\t\t\t\t30\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24.5,\n\t\t\t\t\t31\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25,\n\t\t\t\t\t31\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t27.5,\n\t\t\t\t\t28\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.5,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t32.5,\n\t\t\t\t\t22\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34.5,\n\t\t\t\t\t20\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36.5,\n\t\t\t\t\t19.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t38,\n\t\t\t\t\t20.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39.5,\n\t\t\t\t\t24.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40,\n\t\t\t\t\t30.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41,\n\t\t\t\t\t35\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42,\n\t\t\t\t\t37\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t43,\n\t\t\t\t\t37.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44,\n\t\t\t\t\t36.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t45.5,\n\t\t\t\t\t35\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t47,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t48.5,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t51,\n\t\t\t\t\t25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t52.5,\n\t\t\t\t\t22\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53,\n\t\t\t\t\t19\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53,\n\t\t\t\t\t19\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.57891845703125,\n\t\t\t\t0.61895751953125,\n\t\t\t\t0.61895751953125,\n\t\t\t\t0.6746368408203125,\n\t\t\t\t0.7180938720703125,\n\t\t\t\t0.7454376220703125,\n\t\t\t\t0.763153076171875,\n\t\t\t\t0.770477294921875,\n\t\t\t\t0.780242919921875,\n\t\t\t\t0.789031982421875,\n\t\t\t\t0.784149169921875,\n\t\t\t\t0.779266357421875,\n\t\t\t\t0.777313232421875,\n\t\t\t\t0.776336669921875,\n\t\t\t\t0.776336669921875,\n\t\t\t\t0.777313232421875,\n\t\t\t\t0.778289794921875,\n\t\t\t\t0.780731201171875,\n\t\t\t\t0.789520263671875,\n\t\t\t\t0.801727294921875,\n\t\t\t\t0.806610107421875,\n\t\t\t\t0.812957763671875,\n\t\t\t\t0.823699951171875,\n\t\t\t\t0.832489013671875,\n\t\t\t\t0.848114013671875,\n\t\t\t\t0.850067138671875,\n\t\t\t\t0.850067138671875,\n\t\t\t\t0.841766357421875,\n\t\t\t\t0.833465576171875,\n\t\t\t\t0.831024169921875,\n\t\t\t\t0.828094482421875,\n\t\t\t\t0.829071044921875,\n\t\t\t\t0.829071044921875,\n\t\t\t\t0.829071044921875,\n\t\t\t\t0.835906982421875,\n\t\t\t\t0.842254638671875,\n\t\t\t\t0.845672607421875,\n\t\t\t\t0.854461669921875,\n\t\t\t\t0.861785888671875,\n\t\t\t\t0.864715576171875,\n\t\t\t\t0.864715576171875,\n\t\t\t\t0.861297607421875,\n\t\t\t\t0.856414794921875,\n\t\t\t\t0.848114013671875,\n\t\t\t\t0.842742919921875,\n\t\t\t\t0.842254638671875,\n\t\t\t\t0.840301513671875,\n\t\t\t\t0.840301513671875,\n\t\t\t\t0.846160888671875,\n\t\t\t\t0.846160888671875,\n\t\t\t\t0.850067138671875,\n\t\t\t\t0.856414794921875,\n\t\t\t\t0.856414794921875,\n\t\t\t\t0.855438232421875,\n\t\t\t\t0.854949951171875,\n\t\t\t\t0.850067138671875,\n\t\t\t\t0.837860107421875,\n\t\t\t\t0.796356201171875,\n\t\t\t\t0.6726837158203125,\n\t\t\t\t0.4113006591796875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t53,\n\t\t\t\t19\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"y8s06Op96nun3JXSxSt4u\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -166.5,\n\t\t\t\"y\": -86.5,\n\t\t\t\"width\": 57,\n\t\t\t\"height\": 29,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 30,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1070620261,\n\t\t\t\"version\": 53,\n\t\t\t\"versionNonce\": 1521953317,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313016350,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3.5,\n\t\t\t\t\t16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t21\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.5,\n\t\t\t\t\t21.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t21.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t19\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16.5,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19.5,\n\t\t\t\t\t3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18,\n\t\t\t\t\t18\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16.5,\n\t\t\t\t\t23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t17,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20.5,\n\t\t\t\t\t23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24.5,\n\t\t\t\t\t17\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26,\n\t\t\t\t\t14.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30.5,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36,\n\t\t\t\t\t7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36.5,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35.5,\n\t\t\t\t\t20\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34.5,\n\t\t\t\t\t24.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34.5,\n\t\t\t\t\t27.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35.5,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36.5,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t38,\n\t\t\t\t\t27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41.5,\n\t\t\t\t\t22\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44.5,\n\t\t\t\t\t19\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t47.5,\n\t\t\t\t\t17\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t50.5,\n\t\t\t\t\t16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t52.5,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53.5,\n\t\t\t\t\t16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t51,\n\t\t\t\t\t16.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t50,\n\t\t\t\t\t16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t50,\n\t\t\t\t\t16\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.52130126953125,\n\t\t\t\t0.58038330078125,\n\t\t\t\t0.6385040283203125,\n\t\t\t\t0.6863555908203125,\n\t\t\t\t0.7112579345703125,\n\t\t\t\t0.7351837158203125,\n\t\t\t\t0.761688232421875,\n\t\t\t\t0.799774169921875,\n\t\t\t\t0.799774169921875,\n\t\t\t\t0.799774169921875,\n\t\t\t\t0.799285888671875,\n\t\t\t\t0.799774169921875,\n\t\t\t\t0.799774169921875,\n\t\t\t\t0.799774169921875,\n\t\t\t\t0.800262451171875,\n\t\t\t\t0.800750732421875,\n\t\t\t\t0.802703857421875,\n\t\t\t\t0.817352294921875,\n\t\t\t\t0.827117919921875,\n\t\t\t\t0.832489013671875,\n\t\t\t\t0.840301513671875,\n\t\t\t\t0.852996826171875,\n\t\t\t\t0.869598388671875,\n\t\t\t\t0.873504638671875,\n\t\t\t\t0.873504638671875,\n\t\t\t\t0.863739013671875,\n\t\t\t\t0.846649169921875,\n\t\t\t\t0.826141357421875,\n\t\t\t\t0.826141357421875,\n\t\t\t\t0.825653076171875,\n\t\t\t\t0.825653076171875,\n\t\t\t\t0.828094482421875,\n\t\t\t\t0.841766357421875,\n\t\t\t\t0.854461669921875,\n\t\t\t\t0.863250732421875,\n\t\t\t\t0.8779144287109375,\n\t\t\t\t0.8906097412109375,\n\t\t\t\t0.9003753662109375,\n\t\t\t\t0.9003753662109375,\n\t\t\t\t0.8974456787109375,\n\t\t\t\t0.8930511474609375,\n\t\t\t\t0.8871917724609375,\n\t\t\t\t0.8871917724609375,\n\t\t\t\t0.8857269287109375,\n\t\t\t\t0.8837738037109375,\n\t\t\t\t0.874969482421875,\n\t\t\t\t0.851531982421875,\n\t\t\t\t0.6634063720703125,\n\t\t\t\t0.6634063720703125,\n\t\t\t\t0.4440155029296875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t50,\n\t\t\t\t16\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"oRuSHu_ejatbQvN_tdvsg\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -145.5,\n\t\t\t\"y\": -233,\n\t\t\t\"width\": 50,\n\t\t\t\"height\": 60.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 792966827,\n\t\t\t\"version\": 60,\n\t\t\t\"versionNonce\": 1108749157,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313023690,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4,\n\t\t\t\t\t3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-11,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-18,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-20,\n\t\t\t\t\t18\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-19.5,\n\t\t\t\t\t18.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-17,\n\t\t\t\t\t17\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-12,\n\t\t\t\t\t14.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14.5,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10,\n\t\t\t\t\t18.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-17.5,\n\t\t\t\t\t23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21.5,\n\t\t\t\t\t27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21.5,\n\t\t\t\t\t28\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-19,\n\t\t\t\t\t27.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15,\n\t\t\t\t\t26\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7,\n\t\t\t\t\t21\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t17\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16.5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21.5,\n\t\t\t\t\t3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20.5,\n\t\t\t\t\t4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t19.5,\n\t\t\t\t\t5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t18.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t24.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t30.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4,\n\t\t\t\t\t30.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t29.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t24.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t21\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t20\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t14,\n\t\t\t\t\t19.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t20.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t24\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5,\n\t\t\t\t\t36\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-14.5,\n\t\t\t\t\t44\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-22,\n\t\t\t\t\t51\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-28,\n\t\t\t\t\t58\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-28.5,\n\t\t\t\t\t59\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-27,\n\t\t\t\t\t59.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-24.5,\n\t\t\t\t\t58\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21,\n\t\t\t\t\t55.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-18,\n\t\t\t\t\t52.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-18,\n\t\t\t\t\t52.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.55450439453125,\n\t\t\t\t0.57598876953125,\n\t\t\t\t0.6297149658203125,\n\t\t\t\t0.6736602783203125,\n\t\t\t\t0.6975860595703125,\n\t\t\t\t0.7351837158203125,\n\t\t\t\t0.768035888671875,\n\t\t\t\t0.769500732421875,\n\t\t\t\t0.771453857421875,\n\t\t\t\t0.774383544921875,\n\t\t\t\t0.775360107421875,\n\t\t\t\t0.775360107421875,\n\t\t\t\t0.773406982421875,\n\t\t\t\t0.773406982421875,\n\t\t\t\t0.771942138671875,\n\t\t\t\t0.793914794921875,\n\t\t\t\t0.825164794921875,\n\t\t\t\t0.832000732421875,\n\t\t\t\t0.846649169921875,\n\t\t\t\t0.8862152099609375,\n\t\t\t\t0.9238128662109375,\n\t\t\t\t0.9282073974609375,\n\t\t\t\t0.9282073974609375,\n\t\t\t\t0.9277191162109375,\n\t\t\t\t0.9257659912109375,\n\t\t\t\t0.9208831787109375,\n\t\t\t\t0.9155120849609375,\n\t\t\t\t0.9111175537109375,\n\t\t\t\t0.9076995849609375,\n\t\t\t\t0.9076995849609375,\n\t\t\t\t0.9076995849609375,\n\t\t\t\t0.9076995849609375,\n\t\t\t\t0.9174652099609375,\n\t\t\t\t0.9174652099609375,\n\t\t\t\t0.9228363037109375,\n\t\t\t\t0.9233245849609375,\n\t\t\t\t0.9335784912109375,\n\t\t\t\t0.9360198974609375,\n\t\t\t\t0.9360198974609375,\n\t\t\t\t0.9321136474609375,\n\t\t\t\t0.9252777099609375,\n\t\t\t\t0.9076995849609375,\n\t\t\t\t0.8915863037109375,\n\t\t\t\t0.8867034912109375,\n\t\t\t\t0.8867034912109375,\n\t\t\t\t0.8886566162109375,\n\t\t\t\t0.8964691162109375,\n\t\t\t\t0.9008636474609375,\n\t\t\t\t0.9028167724609375,\n\t\t\t\t0.9037933349609375,\n\t\t\t\t0.9091644287109375,\n\t\t\t\t0.9301605224609375,\n\t\t\t\t0.9384613037109375,\n\t\t\t\t0.9384613037109375,\n\t\t\t\t0.850067138671875,\n\t\t\t\t0.6868438720703125,\n\t\t\t\t0.370269775390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-18,\n\t\t\t\t52.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"P7RIghP4bdreAuFjKUwzX\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 101,\n\t\t\t\"y\": -214,\n\t\t\t\"width\": 98.5,\n\t\t\t\"height\": 37.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 843082091,\n\t\t\t\"version\": 67,\n\t\t\t\"versionNonce\": 2054428683,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313025399,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.5,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7.5,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-11.5,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15.5,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-19,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21,\n\t\t\t\t\t17\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-20.5,\n\t\t\t\t\t17\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-17.5,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-13,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3.5,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8.5,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15.5,\n\t\t\t\t\t21\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-17,\n\t\t\t\t\t22.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-17.5,\n\t\t\t\t\t23.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-15,\n\t\t\t\t\t22.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10.5,\n\t\t\t\t\t19.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5,\n\t\t\t\t\t16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9,\n\t\t\t\t\t9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t14\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t18.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.5,\n\t\t\t\t\t24.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3.5,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.5,\n\t\t\t\t\t26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t22.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9,\n\t\t\t\t\t20\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t17.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t15.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15.5,\n\t\t\t\t\t18\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t21\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t30.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t31\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t30\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18,\n\t\t\t\t\t27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23,\n\t\t\t\t\t24\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28,\n\t\t\t\t\t21.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t31.5,\n\t\t\t\t\t20\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33.5,\n\t\t\t\t\t20.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33.5,\n\t\t\t\t\t22.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t33,\n\t\t\t\t\t24\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30.5,\n\t\t\t\t\t30\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29,\n\t\t\t\t\t33.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t29,\n\t\t\t\t\t36.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30,\n\t\t\t\t\t37.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35,\n\t\t\t\t\t37\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t38,\n\t\t\t\t\t35.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t50,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t60,\n\t\t\t\t\t23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t70.5,\n\t\t\t\t\t17.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t77.5,\n\t\t\t\t\t12.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t77.5,\n\t\t\t\t\t12.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.360504150390625,\n\t\t\t\t0.3912811279296875,\n\t\t\t\t0.4791717529296875,\n\t\t\t\t0.50079345703125,\n\t\t\t\t0.52716064453125,\n\t\t\t\t0.55157470703125,\n\t\t\t\t0.57305908203125,\n\t\t\t\t0.60137939453125,\n\t\t\t\t0.60333251953125,\n\t\t\t\t0.60333251953125,\n\t\t\t\t0.60089111328125,\n\t\t\t\t0.59552001953125,\n\t\t\t\t0.58624267578125,\n\t\t\t\t0.58331298828125,\n\t\t\t\t0.58331298828125,\n\t\t\t\t0.59307861328125,\n\t\t\t\t0.6258087158203125,\n\t\t\t\t0.6590118408203125,\n\t\t\t\t0.6736602783203125,\n\t\t\t\t0.6878204345703125,\n\t\t\t\t0.7425079345703125,\n\t\t\t\t0.7425079345703125,\n\t\t\t\t0.762664794921875,\n\t\t\t\t0.764129638671875,\n\t\t\t\t0.764129638671875,\n\t\t\t\t0.764617919921875,\n\t\t\t\t0.765594482421875,\n\t\t\t\t0.766082763671875,\n\t\t\t\t0.766082763671875,\n\t\t\t\t0.770965576171875,\n\t\t\t\t0.793914794921875,\n\t\t\t\t0.804168701171875,\n\t\t\t\t0.808563232421875,\n\t\t\t\t0.818328857421875,\n\t\t\t\t0.832000732421875,\n\t\t\t\t0.833465576171875,\n\t\t\t\t0.834930419921875,\n\t\t\t\t0.834930419921875,\n\t\t\t\t0.835906982421875,\n\t\t\t\t0.835906982421875,\n\t\t\t\t0.836395263671875,\n\t\t\t\t0.854949951171875,\n\t\t\t\t0.862274169921875,\n\t\t\t\t0.870574951171875,\n\t\t\t\t0.8857269287109375,\n\t\t\t\t0.8930511474609375,\n\t\t\t\t0.8930511474609375,\n\t\t\t\t0.8940277099609375,\n\t\t\t\t0.8945159912109375,\n\t\t\t\t0.8950042724609375,\n\t\t\t\t0.8954925537109375,\n\t\t\t\t0.8954925537109375,\n\t\t\t\t0.8954925537109375,\n\t\t\t\t0.8993988037109375,\n\t\t\t\t0.9047698974609375,\n\t\t\t\t0.9096527099609375,\n\t\t\t\t0.9223480224609375,\n\t\t\t\t0.9345550537109375,\n\t\t\t\t0.9345550537109375,\n\t\t\t\t0.9321136474609375,\n\t\t\t\t0.9321136474609375,\n\t\t\t\t0.835906982421875,\n\t\t\t\t0.6878204345703125,\n\t\t\t\t0.323394775390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t77.5,\n\t\t\t\t12.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"zBXzTXR4tSSa3VES0wIx2\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 214.5,\n\t\t\t\"y\": -228.5,\n\t\t\t\"width\": 79,\n\t\t\t\"height\": 72,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 679576101,\n\t\t\t\"version\": 50,\n\t\t\t\"versionNonce\": 2032078251,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313028644,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t18.5,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20.5,\n\t\t\t\t\t3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25.5,\n\t\t\t\t\t5.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t32.5,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36.5,\n\t\t\t\t\t13.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39,\n\t\t\t\t\t17.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41,\n\t\t\t\t\t22\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41.5,\n\t\t\t\t\t27.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t40.5,\n\t\t\t\t\t33\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t38,\n\t\t\t\t\t39\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34,\n\t\t\t\t\t44.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t28.5,\n\t\t\t\t\t50.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21.5,\n\t\t\t\t\t55.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t60.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t66\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6.5,\n\t\t\t\t\t69\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10.5,\n\t\t\t\t\t70.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21.5,\n\t\t\t\t\t72\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-28,\n\t\t\t\t\t71.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-33,\n\t\t\t\t\t70\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-36,\n\t\t\t\t\t66.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-37.5,\n\t\t\t\t\t63\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-37,\n\t\t\t\t\t58\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-33,\n\t\t\t\t\t50.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-28.5,\n\t\t\t\t\t45.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-25.5,\n\t\t\t\t\t43\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-16.5,\n\t\t\t\t\t36.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-11,\n\t\t\t\t\t33.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t31.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t30.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t30.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t31\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t33\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t35.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t39\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t44.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1.5,\n\t\t\t\t\t46.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7.5,\n\t\t\t\t\t50\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10.5,\n\t\t\t\t\t51\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-12.5,\n\t\t\t\t\t50.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-14,\n\t\t\t\t\t49\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-14.5,\n\t\t\t\t\t48\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-14.5,\n\t\t\t\t\t48\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.52569580078125,\n\t\t\t\t0.53887939453125,\n\t\t\t\t0.57940673828125,\n\t\t\t\t0.6399688720703125,\n\t\t\t\t0.6785430908203125,\n\t\t\t\t0.6966094970703125,\n\t\t\t\t0.757293701171875,\n\t\t\t\t0.757293701171875,\n\t\t\t\t0.790496826171875,\n\t\t\t\t0.827606201171875,\n\t\t\t\t0.845184326171875,\n\t\t\t\t0.864227294921875,\n\t\t\t\t0.8808441162109375,\n\t\t\t\t0.8871917724609375,\n\t\t\t\t0.8910980224609375,\n\t\t\t\t0.8989105224609375,\n\t\t\t\t0.9111175537109375,\n\t\t\t\t0.9179534912109375,\n\t\t\t\t0.9213714599609375,\n\t\t\t\t0.9233245849609375,\n\t\t\t\t0.9252777099609375,\n\t\t\t\t0.9262542724609375,\n\t\t\t\t0.9262542724609375,\n\t\t\t\t0.9267425537109375,\n\t\t\t\t0.9291839599609375,\n\t\t\t\t0.9291839599609375,\n\t\t\t\t0.9286956787109375,\n\t\t\t\t0.9286956787109375,\n\t\t\t\t0.9286956787109375,\n\t\t\t\t0.9286956787109375,\n\t\t\t\t0.9277191162109375,\n\t\t\t\t0.9277191162109375,\n\t\t\t\t0.9277191162109375,\n\t\t\t\t0.9277191162109375,\n\t\t\t\t0.9272308349609375,\n\t\t\t\t0.9272308349609375,\n\t\t\t\t0.9272308349609375,\n\t\t\t\t0.9272308349609375,\n\t\t\t\t0.9306488037109375,\n\t\t\t\t0.9335784912109375,\n\t\t\t\t0.9335784912109375,\n\t\t\t\t0.9340667724609375,\n\t\t\t\t0.9340667724609375,\n\t\t\t\t0.9316253662109375,\n\t\t\t\t0.872528076171875,\n\t\t\t\t0.6844024658203125,\n\t\t\t\t0.1919097900390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-14.5,\n\t\t\t\t48\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"sejFcpjPEmObV6m9ss4Bm\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 291,\n\t\t\t\"y\": -200.5,\n\t\t\t\"width\": 161.5,\n\t\t\t\"height\": 231,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1986147973,\n\t\t\t\"version\": 35,\n\t\t\t\"versionNonce\": 1440232421,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313033552,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2.5,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-4.5,\n\t\t\t\t\t12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-12.5,\n\t\t\t\t\t27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-18,\n\t\t\t\t\t36.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-25.5,\n\t\t\t\t\t47.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-35,\n\t\t\t\t\t58.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-46.5,\n\t\t\t\t\t70.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-59,\n\t\t\t\t\t82.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-80,\n\t\t\t\t\t100\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-94.5,\n\t\t\t\t\t111.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-109,\n\t\t\t\t\t124\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-123,\n\t\t\t\t\t136.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-135.5,\n\t\t\t\t\t149\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-146.5,\n\t\t\t\t\t161\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-155,\n\t\t\t\t\t171.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-160,\n\t\t\t\t\t181\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-161.5,\n\t\t\t\t\t188.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-160,\n\t\t\t\t\t195\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-156,\n\t\t\t\t\t201\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-149,\n\t\t\t\t\t208.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-143,\n\t\t\t\t\t213.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-137,\n\t\t\t\t\t218\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-132,\n\t\t\t\t\t222\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-127.5,\n\t\t\t\t\t225\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-123.5,\n\t\t\t\t\t228\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-120,\n\t\t\t\t\t230\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-116,\n\t\t\t\t\t231\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-115,\n\t\t\t\t\t231\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-114,\n\t\t\t\t\t230.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-114,\n\t\t\t\t\t230.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.51788330078125,\n\t\t\t\t0.54425048828125,\n\t\t\t\t0.60626220703125,\n\t\t\t\t0.6819610595703125,\n\t\t\t\t0.7322540283203125,\n\t\t\t\t0.773406982421875,\n\t\t\t\t0.805633544921875,\n\t\t\t\t0.835906982421875,\n\t\t\t\t0.851531982421875,\n\t\t\t\t0.861297607421875,\n\t\t\t\t0.873016357421875,\n\t\t\t\t0.8769378662109375,\n\t\t\t\t0.8901214599609375,\n\t\t\t\t0.8984222412109375,\n\t\t\t\t0.9003753662109375,\n\t\t\t\t0.9023284912109375,\n\t\t\t\t0.9091644287109375,\n\t\t\t\t0.9140472412109375,\n\t\t\t\t0.9164886474609375,\n\t\t\t\t0.9164886474609375,\n\t\t\t\t0.9150238037109375,\n\t\t\t\t0.9120941162109375,\n\t\t\t\t0.8891448974609375,\n\t\t\t\t0.846649169921875,\n\t\t\t\t0.809539794921875,\n\t\t\t\t0.771942138671875,\n\t\t\t\t0.7254180908203125,\n\t\t\t\t0.6839141845703125,\n\t\t\t\t0.6507110595703125,\n\t\t\t\t0.60919189453125,\n\t\t\t\t0.323883056640625,\n\t\t\t\t0.323883056640625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-114,\n\t\t\t\t230.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"p7IkHwrJjkGEac5iqZXV0\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -207,\n\t\t\t\"y\": -0.5,\n\t\t\t\"width\": 14.5,\n\t\t\t\"height\": 55,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 971057387,\n\t\t\t\"version\": 63,\n\t\t\t\"versionNonce\": 2115747403,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313043033,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-0.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9,\n\t\t\t\t\t9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t11.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t14\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.5,\n\t\t\t\t\t15\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.5,\n\t\t\t\t\t17\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11,\n\t\t\t\t\t19.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t21\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t22.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t24\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t25\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t26\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t27.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t29.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t30.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t32.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t33.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t34.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t35\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t36\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t36.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t38\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t38.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t39.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t40\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t40.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t41\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t42\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t42.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t43.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t44.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t46\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t47\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t47.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t48.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t49\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t50\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t50.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t51\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t52\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t52.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t53\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t53.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t54\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t53.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t52\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t50.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t49.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13.5,\n\t\t\t\t\t49.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.2192535400390625,\n\t\t\t\t0.295074462890625,\n\t\t\t\t0.330230712890625,\n\t\t\t\t0.369293212890625,\n\t\t\t\t0.58282470703125,\n\t\t\t\t0.58282470703125,\n\t\t\t\t0.6365509033203125,\n\t\t\t\t0.6511993408203125,\n\t\t\t\t0.6643829345703125,\n\t\t\t\t0.6765899658203125,\n\t\t\t\t0.6868438720703125,\n\t\t\t\t0.6975860595703125,\n\t\t\t\t0.7088165283203125,\n\t\t\t\t0.7200469970703125,\n\t\t\t\t0.7273712158203125,\n\t\t\t\t0.7346954345703125,\n\t\t\t\t0.7400665283203125,\n\t\t\t\t0.7459259033203125,\n\t\t\t\t0.7498321533203125,\n\t\t\t\t0.753875732421875,\n\t\t\t\t0.758270263671875,\n\t\t\t\t0.760223388671875,\n\t\t\t\t0.762176513671875,\n\t\t\t\t0.765594482421875,\n\t\t\t\t0.767547607421875,\n\t\t\t\t0.769500732421875,\n\t\t\t\t0.770965576171875,\n\t\t\t\t0.773406982421875,\n\t\t\t\t0.774871826171875,\n\t\t\t\t0.775360107421875,\n\t\t\t\t0.775848388671875,\n\t\t\t\t0.777313232421875,\n\t\t\t\t0.778778076171875,\n\t\t\t\t0.780242919921875,\n\t\t\t\t0.781219482421875,\n\t\t\t\t0.781707763671875,\n\t\t\t\t0.782196044921875,\n\t\t\t\t0.782684326171875,\n\t\t\t\t0.783172607421875,\n\t\t\t\t0.785125732421875,\n\t\t\t\t0.785614013671875,\n\t\t\t\t0.787078857421875,\n\t\t\t\t0.787567138671875,\n\t\t\t\t0.787567138671875,\n\t\t\t\t0.788543701171875,\n\t\t\t\t0.789031982421875,\n\t\t\t\t0.789520263671875,\n\t\t\t\t0.790496826171875,\n\t\t\t\t0.790496826171875,\n\t\t\t\t0.790985107421875,\n\t\t\t\t0.790496826171875,\n\t\t\t\t0.790985107421875,\n\t\t\t\t0.790985107421875,\n\t\t\t\t0.790985107421875,\n\t\t\t\t0.790496826171875,\n\t\t\t\t0.790496826171875,\n\t\t\t\t0.789520263671875,\n\t\t\t\t0.58966064453125,\n\t\t\t\t0.4508514404296875,\n\t\t\t\t0.2314605712890625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t13.5,\n\t\t\t\t49.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"qjPHATavoDx_qXaIXGzJU\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -205,\n\t\t\t\"y\": 4.5,\n\t\t\t\"width\": 12,\n\t\t\t\"height\": 12,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1363042277,\n\t\t\t\"version\": 14,\n\t\t\t\"versionNonce\": 2090455211,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313043616,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t-3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t-5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t-7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7.5,\n\t\t\t\t\t-9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t-11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.5,\n\t\t\t\t\t-12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t-12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t-12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t-12\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.3976287841796875,\n\t\t\t\t0.4650115966796875,\n\t\t\t\t0.50518798828125,\n\t\t\t\t0.53887939453125,\n\t\t\t\t0.57794189453125,\n\t\t\t\t0.60528564453125,\n\t\t\t\t0.62042236328125,\n\t\t\t\t0.6272735595703125,\n\t\t\t\t0.6277618408203125,\n\t\t\t\t0.51300048828125,\n\t\t\t\t0.279449462890625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t12,\n\t\t\t\t-12\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"R8phoc6JScgF3NFmYjY7L\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -197.5,\n\t\t\t\"y\": 10.5,\n\t\t\t\"width\": 10,\n\t\t\t\"height\": 11,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 254354309,\n\t\t\t\"version\": 12,\n\t\t\t\"versionNonce\": 1941836907,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313044036,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t-2.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t-3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t-5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t-7.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t-8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t-9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t-11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t-11\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.323394775390625,\n\t\t\t\t0.4908905029296875,\n\t\t\t\t0.53106689453125,\n\t\t\t\t0.55645751953125,\n\t\t\t\t0.56671142578125,\n\t\t\t\t0.57012939453125,\n\t\t\t\t0.57012939453125,\n\t\t\t\t0.55059814453125,\n\t\t\t\t0.4718475341796875,\n\t\t\t\t0.297027587890625,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t10,\n\t\t\t\t-11\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"6C21oasv2yzJBluboOSN3\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -196,\n\t\t\t\"y\": 21,\n\t\t\t\"width\": 11.5,\n\t\t\t\"height\": 11,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1043069893,\n\t\t\t\"version\": 12,\n\t\t\t\"versionNonce\": 290228267,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313044441,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t-2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t-3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t-5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t-8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t-8.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11,\n\t\t\t\t\t-10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t-11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t-11\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.343414306640625,\n\t\t\t\t0.3971405029296875,\n\t\t\t\t0.4357147216796875,\n\t\t\t\t0.4674530029296875,\n\t\t\t\t0.4947967529296875,\n\t\t\t\t0.51055908203125,\n\t\t\t\t0.51495361328125,\n\t\t\t\t0.51495361328125,\n\t\t\t\t0.4088592529296875,\n\t\t\t\t0.1787261962890625,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t11.5,\n\t\t\t\t-11\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"X_MzfU3V_-29RsMoutYpf\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -196.5,\n\t\t\t\"y\": 31,\n\t\t\t\"width\": 12.5,\n\t\t\t\"height\": 12,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1572840453,\n\t\t\t\"version\": 13,\n\t\t\t\"versionNonce\": 520625221,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313044810,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2.5,\n\t\t\t\t\t-2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t-3.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t-5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t-7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t-8.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9.5,\n\t\t\t\t\t-10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11,\n\t\t\t\t\t-11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t-12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12.5,\n\t\t\t\t\t-12\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.296539306640625,\n\t\t\t\t0.4166717529296875,\n\t\t\t\t0.4557342529296875,\n\t\t\t\t0.4987030029296875,\n\t\t\t\t0.53692626953125,\n\t\t\t\t0.55596923828125,\n\t\t\t\t0.55987548828125,\n\t\t\t\t0.55987548828125,\n\t\t\t\t0.51300048828125,\n\t\t\t\t0.4137420654296875,\n\t\t\t\t0.2202301025390625,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t12.5,\n\t\t\t\t-12\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"t88jFcMg7hg4xXcbRcwV7\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -195,\n\t\t\t\"y\": 41,\n\t\t\t\"width\": 9,\n\t\t\t\"height\": 9.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1246393995,\n\t\t\t\"version\": 11,\n\t\t\t\"versionNonce\": 1964507051,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313045168,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t-3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t-5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t-6.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t-8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9,\n\t\t\t\t\t-9\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9,\n\t\t\t\t\t-9.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t9,\n\t\t\t\t\t-9.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.353179931640625,\n\t\t\t\t0.355133056640625,\n\t\t\t\t0.3981170654296875,\n\t\t\t\t0.4381561279296875,\n\t\t\t\t0.4518280029296875,\n\t\t\t\t0.4518280029296875,\n\t\t\t\t0.4269256591796875,\n\t\t\t\t0.2221832275390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t9,\n\t\t\t\t-9.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"hD0pcxXoASCc73D4p5txs\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 131,\n\t\t\t\"y\": 82.5,\n\t\t\t\"width\": 32,\n\t\t\t\"height\": 77,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 136930437,\n\t\t\t\"version\": 20,\n\t\t\t\"versionNonce\": 127301099,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313047073,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0.5,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1.5,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3.5,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5.5,\n\t\t\t\t\t1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10.5,\n\t\t\t\t\t10.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t18.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t11.5,\n\t\t\t\t\t27.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8.5,\n\t\t\t\t\t42\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t52\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t61.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6.5,\n\t\t\t\t\t69\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-12,\n\t\t\t\t\t74\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-16,\n\t\t\t\t\t76\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-20,\n\t\t\t\t\t73.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-20,\n\t\t\t\t\t73.5\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.323883056640625,\n\t\t\t\t0.339996337890625,\n\t\t\t\t0.4474334716796875,\n\t\t\t\t0.4884490966796875,\n\t\t\t\t0.54180908203125,\n\t\t\t\t0.60382080078125,\n\t\t\t\t0.6643829345703125,\n\t\t\t\t0.6990509033203125,\n\t\t\t\t0.7141876220703125,\n\t\t\t\t0.7176055908203125,\n\t\t\t\t0.7190704345703125,\n\t\t\t\t0.7229766845703125,\n\t\t\t\t0.7263946533203125,\n\t\t\t\t0.7263946533203125,\n\t\t\t\t0.7190704345703125,\n\t\t\t\t0.6634063720703125,\n\t\t\t\t0.54376220703125,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-20,\n\t\t\t\t73.5\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"2ljj7ku82opHogvG18Zgc\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 102,\n\t\t\t\"y\": 118,\n\t\t\t\"width\": 105.5,\n\t\t\t\"height\": 120.5,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 0.5,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1000632901,\n\t\t\t\"version\": 53,\n\t\t\t\"versionNonce\": 1905927685,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1660313048078,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t-0.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-1.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t-4.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t-8.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t-14\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t25,\n\t\t\t\t\t-23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30,\n\t\t\t\t\t-26.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41.5,\n\t\t\t\t\t-33\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t61,\n\t\t\t\t\t-41.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t73.5,\n\t\t\t\t\t-44.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t84.5,\n\t\t\t\t\t-45.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t92.5,\n\t\t\t\t\t-44\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t97,\n\t\t\t\t\t-39.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t98,\n\t\t\t\t\t-33.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t96,\n\t\t\t\t\t-25.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t87.5,\n\t\t\t\t\t-12\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t83,\n\t\t\t\t\t-7\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t66,\n\t\t\t\t\t10\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t52.5,\n\t\t\t\t\t21.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39,\n\t\t\t\t\t32.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t27,\n\t\t\t\t\t41.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t16,\n\t\t\t\t\t48.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6.5,\n\t\t\t\t\t53.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t56.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5.5,\n\t\t\t\t\t57.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7.5,\n\t\t\t\t\t57\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-7,\n\t\t\t\t\t55.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2,\n\t\t\t\t\t49.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4.5,\n\t\t\t\t\t44\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t13,\n\t\t\t\t\t38.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21.5,\n\t\t\t\t\t33.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30,\n\t\t\t\t\t30\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t36.5,\n\t\t\t\t\t28.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41.5,\n\t\t\t\t\t29\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t43.5,\n\t\t\t\t\t38.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42,\n\t\t\t\t\t44.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39.5,\n\t\t\t\t\t50.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t38,\n\t\t\t\t\t57\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t37,\n\t\t\t\t\t63\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t37,\n\t\t\t\t\t68.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t38.5,\n\t\t\t\t\t72.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41.5,\n\t\t\t\t\t74.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t46,\n\t\t\t\t\t75\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t51,\n\t\t\t\t\t73.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t58.5,\n\t\t\t\t\t69\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t61,\n\t\t\t\t\t66.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t67,\n\t\t\t\t\t59\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t71.5,\n\t\t\t\t\t53.5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t73,\n\t\t\t\t\t51\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t73,\n\t\t\t\t\t51\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.332672119140625,\n\t\t\t\t0.4596405029296875,\n\t\t\t\t0.4596405029296875,\n\t\t\t\t0.4967498779296875,\n\t\t\t\t0.54132080078125,\n\t\t\t\t0.58868408203125,\n\t\t\t\t0.61114501953125,\n\t\t\t\t0.62188720703125,\n\t\t\t\t0.6345977783203125,\n\t\t\t\t0.6536407470703125,\n\t\t\t\t0.6726837158203125,\n\t\t\t\t0.6809844970703125,\n\t\t\t\t0.6853790283203125,\n\t\t\t\t0.6912384033203125,\n\t\t\t\t0.6966094970703125,\n\t\t\t\t0.7014923095703125,\n\t\t\t\t0.769012451171875,\n\t\t\t\t0.769012451171875,\n\t\t\t\t0.817352294921875,\n\t\t\t\t0.827117919921875,\n\t\t\t\t0.830535888671875,\n\t\t\t\t0.830535888671875,\n\t\t\t\t0.830535888671875,\n\t\t\t\t0.823699951171875,\n\t\t\t\t0.815887451171875,\n\t\t\t\t0.807586669921875,\n\t\t\t\t0.779266357421875,\n\t\t\t\t0.761688232421875,\n\t\t\t\t0.761199951171875,\n\t\t\t\t0.760223388671875,\n\t\t\t\t0.761199951171875,\n\t\t\t\t0.760711669921875,\n\t\t\t\t0.760711669921875,\n\t\t\t\t0.759246826171875,\n\t\t\t\t0.759246826171875,\n\t\t\t\t0.759246826171875,\n\t\t\t\t0.774383544921875,\n\t\t\t\t0.787567138671875,\n\t\t\t\t0.794403076171875,\n\t\t\t\t0.796844482421875,\n\t\t\t\t0.796844482421875,\n\t\t\t\t0.796844482421875,\n\t\t\t\t0.791961669921875,\n\t\t\t\t0.768524169921875,\n\t\t\t\t0.7259063720703125,\n\t\t\t\t0.6853790283203125,\n\t\t\t\t0.6345977783203125,\n\t\t\t\t0.55059814453125,\n\t\t\t\t0.4454803466796875,\n\t\t\t\t0.267730712890625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t73,\n\t\t\t\t51\n\t\t\t]\n\t\t}\n\t],\n\t\"appState\": {\n\t\t\"theme\": \"light\",\n\t\t\"viewBackgroundColor\": \"#ffffff\",\n\t\t\"currentItemStrokeColor\": \"#000000\",\n\t\t\"currentItemBackgroundColor\": \"transparent\",\n\t\t\"currentItemFillStyle\": \"hachure\",\n\t\t\"currentItemStrokeWidth\": 0.5,\n\t\t\"currentItemStrokeStyle\": \"solid\",\n\t\t\"currentItemRoughness\": 1,\n\t\t\"currentItemOpacity\": 100,\n\t\t\"currentItemFontFamily\": 1,\n\t\t\"currentItemFontSize\": 20,\n\t\t\"currentItemTextAlign\": \"left\",\n\t\t\"currentItemStrokeSharpness\": \"sharp\",\n\t\t\"currentItemStartArrowhead\": null,\n\t\t\"currentItemEndArrowhead\": \"arrow\",\n\t\t\"currentItemLinearStrokeSharpness\": \"round\",\n\t\t\"gridSize\": null,\n\t\t\"colorPalette\": {}\n\t},\n\t\"files\": {}\n}\n```\n%%","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Excalidraw/Drawing-2022-09-20-21.34.16.excalidraw":{"title":"","content":"==⚠  Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==\n\n\n# Text Elements\n%%\n# Drawing\n```json\n{\n\t\"type\": \"excalidraw\",\n\t\"version\": 2,\n\t\"source\": \"https://excalidraw.com\",\n\t\"elements\": [\n\t\t{\n\t\t\t\"id\": \"BlEg2vHT8OlJMS7jn7MJY\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -132.5,\n\t\t\t\"y\": -421.5,\n\t\t\t\"width\": 306,\n\t\t\t\"height\": 191,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 960652671,\n\t\t\t\"version\": 52,\n\t\t\t\"versionNonce\": 525610193,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1663731260260,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t-2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5,\n\t\t\t\t\t-2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-8,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21,\n\t\t\t\t\t13\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-46,\n\t\t\t\t\t36\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-64,\n\t\t\t\t\t55\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-85,\n\t\t\t\t\t81\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-89,\n\t\t\t\t\t92\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-80,\n\t\t\t\t\t97\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-65,\n\t\t\t\t\t93\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-31,\n\t\t\t\t\t78\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t61\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26,\n\t\t\t\t\t53\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t43,\n\t\t\t\t\t49\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t42,\n\t\t\t\t\t57\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t32,\n\t\t\t\t\t68\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t7,\n\t\t\t\t\t95\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21,\n\t\t\t\t\t125\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-36,\n\t\t\t\t\t143\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-46,\n\t\t\t\t\t161\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-44,\n\t\t\t\t\t168\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-27,\n\t\t\t\t\t168\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t156\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24,\n\t\t\t\t\t146\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53,\n\t\t\t\t\t139\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t63,\n\t\t\t\t\t141\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t66,\n\t\t\t\t\t152\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t62,\n\t\t\t\t\t169\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t60,\n\t\t\t\t\t180\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t65,\n\t\t\t\t\t189\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t79,\n\t\t\t\t\t188\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t94,\n\t\t\t\t\t180\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t125,\n\t\t\t\t\t160\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t159,\n\t\t\t\t\t134\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t181,\n\t\t\t\t\t115\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t207,\n\t\t\t\t\t90\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t216,\n\t\t\t\t\t78\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t217,\n\t\t\t\t\t65\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t208,\n\t\t\t\t\t62\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t181,\n\t\t\t\t\t67\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t151,\n\t\t\t\t\t76\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t140,\n\t\t\t\t\t80\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t145,\n\t\t\t\t\t78\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t168,\n\t\t\t\t\t66\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t188,\n\t\t\t\t\t55\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t211,\n\t\t\t\t\t36\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t215,\n\t\t\t\t\t32\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t215,\n\t\t\t\t\t32\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.52130126953125,\n\t\t\t\t0.52813720703125,\n\t\t\t\t0.53936767578125,\n\t\t\t\t0.59698486328125,\n\t\t\t\t0.6858673095703125,\n\t\t\t\t0.7141876220703125,\n\t\t\t\t0.7351837158203125,\n\t\t\t\t0.797821044921875,\n\t\t\t\t0.822235107421875,\n\t\t\t\t0.832977294921875,\n\t\t\t\t0.843231201171875,\n\t\t\t\t0.857391357421875,\n\t\t\t\t0.860321044921875,\n\t\t\t\t0.862762451171875,\n\t\t\t\t0.866668701171875,\n\t\t\t\t0.867156982421875,\n\t\t\t\t0.8754730224609375,\n\t\t\t\t0.9145355224609375,\n\t\t\t\t0.9179534912109375,\n\t\t\t\t0.9184417724609375,\n\t\t\t\t0.9267425537109375,\n\t\t\t\t0.9365081787109375,\n\t\t\t\t0.9404144287109375,\n\t\t\t\t0.9404144287109375,\n\t\t\t\t0.9345550537109375,\n\t\t\t\t0.9345550537109375,\n\t\t\t\t0.9365081787109375,\n\t\t\t\t0.9374847412109375,\n\t\t\t\t0.9379730224609375,\n\t\t\t\t0.9413909912109375,\n\t\t\t\t0.9462738037109375,\n\t\t\t\t0.9467620849609375,\n\t\t\t\t0.9482269287109375,\n\t\t\t\t0.9482269287109375,\n\t\t\t\t0.9496917724609375,\n\t\t\t\t0.9496917724609375,\n\t\t\t\t0.9540863037109375,\n\t\t\t\t0.9540863037109375,\n\t\t\t\t0.9540863037109375,\n\t\t\t\t0.9550628662109375,\n\t\t\t\t0.9575042724609375,\n\t\t\t\t0.9579925537109375,\n\t\t\t\t0.9589691162109375,\n\t\t\t\t0.9604339599609375,\n\t\t\t\t0.9589691162109375,\n\t\t\t\t0.9570159912109375,\n\t\t\t\t0.9076995849609375,\n\t\t\t\t0.779754638671875,\n\t\t\t\t0.3761444091796875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t215,\n\t\t\t\t32\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"-y92IAWLLtgBYyiZcGrYm\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -49.5,\n\t\t\t\"y\": -530.5,\n\t\t\t\"width\": 274,\n\t\t\t\"height\": 115,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1357808831,\n\t\t\t\"version\": 41,\n\t\t\t\"versionNonce\": 904974143,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1663731261854,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-2,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t2\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-20,\n\t\t\t\t\t14\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-36,\n\t\t\t\t\t27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-62,\n\t\t\t\t\t50\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-82,\n\t\t\t\t\t70\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-87,\n\t\t\t\t\t77\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-77,\n\t\t\t\t\t77\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-49,\n\t\t\t\t\t65\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-23,\n\t\t\t\t\t52\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t15,\n\t\t\t\t\t34\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t43,\n\t\t\t\t\t23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t51,\n\t\t\t\t\t22\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t46,\n\t\t\t\t\t30\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t32,\n\t\t\t\t\t40\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t5,\n\t\t\t\t\t61\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-22,\n\t\t\t\t\t81\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-32,\n\t\t\t\t\t90\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-32,\n\t\t\t\t\t94\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-20,\n\t\t\t\t\t90\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t10,\n\t\t\t\t\t75\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t43,\n\t\t\t\t\t60\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t59,\n\t\t\t\t\t55\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t66,\n\t\t\t\t\t56\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t53,\n\t\t\t\t\t69\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t39,\n\t\t\t\t\t81\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t23,\n\t\t\t\t\t95\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t20,\n\t\t\t\t\t99\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t30,\n\t\t\t\t\t98\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t55,\n\t\t\t\t\t88\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t76,\n\t\t\t\t\t82\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t100,\n\t\t\t\t\t79\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t107,\n\t\t\t\t\t84\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t107,\n\t\t\t\t\t99\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t104,\n\t\t\t\t\t112\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t110,\n\t\t\t\t\t115\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t140,\n\t\t\t\t\t105\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t187,\n\t\t\t\t\t85\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t187,\n\t\t\t\t\t85\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.51544189453125,\n\t\t\t\t0.60528564453125,\n\t\t\t\t0.6638946533203125,\n\t\t\t\t0.7425079345703125,\n\t\t\t\t0.776336669921875,\n\t\t\t\t0.811981201171875,\n\t\t\t\t0.8759613037109375,\n\t\t\t\t0.8920745849609375,\n\t\t\t\t0.8950042724609375,\n\t\t\t\t0.9037933349609375,\n\t\t\t\t0.9037933349609375,\n\t\t\t\t0.9037933349609375,\n\t\t\t\t0.9062347412109375,\n\t\t\t\t0.9091644287109375,\n\t\t\t\t0.9238128662109375,\n\t\t\t\t0.9301605224609375,\n\t\t\t\t0.9409027099609375,\n\t\t\t\t0.9531097412109375,\n\t\t\t\t0.9653167724609375,\n\t\t\t\t0.9760589599609375,\n\t\t\t\t0.9760589599609375,\n\t\t\t\t0.9760589599609375,\n\t\t\t\t0.9780120849609375,\n\t\t\t\t0.9780120849609375,\n\t\t\t\t0.9780120849609375,\n\t\t\t\t0.9809417724609375,\n\t\t\t\t0.9814300537109375,\n\t\t\t\t0.9814300537109375,\n\t\t\t\t0.9877777099609375,\n\t\t\t\t0.9897308349609375,\n\t\t\t\t0.9897308349609375,\n\t\t\t\t0.9902191162109375,\n\t\t\t\t0.9902191162109375,\n\t\t\t\t0.9902191162109375,\n\t\t\t\t0.9902191162109375,\n\t\t\t\t0.9921722412109375,\n\t\t\t\t0.9701995849609375,\n\t\t\t\t0.8935394287109375,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t187,\n\t\t\t\t85\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"jTjqJuJkOhdiI7mqJOEq6\",\n\t\t\t\"type\": \"rectangle\",\n\t\t\t\"x\": -253.5,\n\t\t\t\"y\": -295.5,\n\t\t\t\"width\": 143,\n\t\t\t\"height\": 150,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 2041972785,\n\t\t\t\"version\": 20,\n\t\t\t\"versionNonce\": 2146737279,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1663731263342,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"AWOEpYk2F2plWYmOY1OYR\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": 179.5,\n\t\t\t\"y\": -485.5,\n\t\t\t\"width\": 119,\n\t\t\t\"height\": 146,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 241691935,\n\t\t\t\"version\": 36,\n\t\t\t\"versionNonce\": 1604060209,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1663731270540,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-1,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-5,\n\t\t\t\t\t3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-12,\n\t\t\t\t\t8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-29,\n\t\t\t\t\t22\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-42,\n\t\t\t\t\t36\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-61,\n\t\t\t\t\t57\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-72,\n\t\t\t\t\t74\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-72,\n\t\t\t\t\t80\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-62,\n\t\t\t\t\t80\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-42,\n\t\t\t\t\t71\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-27,\n\t\t\t\t\t61\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-6,\n\t\t\t\t\t48\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t2,\n\t\t\t\t\t43\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t8,\n\t\t\t\t\t41\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t6,\n\t\t\t\t\t44\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t50\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-10,\n\t\t\t\t\t65\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-21,\n\t\t\t\t\t82\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-28,\n\t\t\t\t\t93\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-34,\n\t\t\t\t\t107\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-35,\n\t\t\t\t\t113\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-33,\n\t\t\t\t\t119\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-29,\n\t\t\t\t\t122\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-25,\n\t\t\t\t\t124\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-19,\n\t\t\t\t\t130\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-14,\n\t\t\t\t\t140\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-11,\n\t\t\t\t\t145\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-3,\n\t\t\t\t\t146\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t138\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t24,\n\t\t\t\t\t129\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t41,\n\t\t\t\t\t111\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t47,\n\t\t\t\t\t99\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44,\n\t\t\t\t\t82\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t44,\n\t\t\t\t\t82\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.6262969970703125,\n\t\t\t\t0.6966094970703125,\n\t\t\t\t0.7346954345703125,\n\t\t\t\t0.773895263671875,\n\t\t\t\t0.831024169921875,\n\t\t\t\t0.856903076171875,\n\t\t\t\t0.873992919921875,\n\t\t\t\t0.8954925537109375,\n\t\t\t\t0.8954925537109375,\n\t\t\t\t0.8945159912109375,\n\t\t\t\t0.8940277099609375,\n\t\t\t\t0.8930511474609375,\n\t\t\t\t0.8915863037109375,\n\t\t\t\t0.8915863037109375,\n\t\t\t\t0.8959808349609375,\n\t\t\t\t0.9028167724609375,\n\t\t\t\t0.9106292724609375,\n\t\t\t\t0.9179534912109375,\n\t\t\t\t0.9223480224609375,\n\t\t\t\t0.9262542724609375,\n\t\t\t\t0.9326019287109375,\n\t\t\t\t0.9326019287109375,\n\t\t\t\t0.9316253662109375,\n\t\t\t\t0.9330902099609375,\n\t\t\t\t0.9335784912109375,\n\t\t\t\t0.9335784912109375,\n\t\t\t\t0.9340667724609375,\n\t\t\t\t0.9340667724609375,\n\t\t\t\t0.9330902099609375,\n\t\t\t\t0.9321136474609375,\n\t\t\t\t0.9321136474609375,\n\t\t\t\t0.9047698974609375,\n\t\t\t\t0.767059326171875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t44,\n\t\t\t\t82\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"TKmz4rPiQ6SJpl_m8M45Q\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -21.5,\n\t\t\t\"y\": -228.5,\n\t\t\t\"width\": 86,\n\t\t\t\"height\": 206,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 2067419999,\n\t\t\t\"version\": 15,\n\t\t\t\"versionNonce\": 125477951,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1663731271453,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t6\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t17\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t44\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t69\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-11,\n\t\t\t\t\t112\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-32,\n\t\t\t\t\t154\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-48,\n\t\t\t\t\t177\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-68,\n\t\t\t\t\t199\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-79,\n\t\t\t\t\t206\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-82,\n\t\t\t\t\t202\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-82,\n\t\t\t\t\t202\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.6311798095703125,\n\t\t\t\t0.6590118408203125,\n\t\t\t\t0.6590118408203125,\n\t\t\t\t0.6990509033203125,\n\t\t\t\t0.7483673095703125,\n\t\t\t\t0.795379638671875,\n\t\t\t\t0.815399169921875,\n\t\t\t\t0.819793701171875,\n\t\t\t\t0.827606201171875,\n\t\t\t\t0.827606201171875,\n\t\t\t\t0.811004638671875,\n\t\t\t\t0.4586639404296875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-82,\n\t\t\t\t202\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"x3uGuQsdLkuMTHsEBo3PG\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -51.5,\n\t\t\t\"y\": -198.5,\n\t\t\t\"width\": 353,\n\t\t\t\"height\": 268,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 1042285361,\n\t\t\t\"version\": 36,\n\t\t\t\"versionNonce\": 63931007,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1663731272203,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t-4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t-8\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35,\n\t\t\t\t\t-16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t68,\n\t\t\t\t\t-23\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t96,\n\t\t\t\t\t-27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t124,\n\t\t\t\t\t-31\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t160,\n\t\t\t\t\t-33\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t180,\n\t\t\t\t\t-31\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t185,\n\t\t\t\t\t-27\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t182,\n\t\t\t\t\t-20\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t172,\n\t\t\t\t\t-11\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t164,\n\t\t\t\t\t-3\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t151,\n\t\t\t\t\t16\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t137,\n\t\t\t\t\t48\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t127,\n\t\t\t\t\t77\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t112,\n\t\t\t\t\t122\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t101,\n\t\t\t\t\t159\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t97,\n\t\t\t\t\t176\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t95,\n\t\t\t\t\t190\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t96,\n\t\t\t\t\t193\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t98,\n\t\t\t\t\t191\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t99,\n\t\t\t\t\t185\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t98,\n\t\t\t\t\t182\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t88,\n\t\t\t\t\t178\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t72,\n\t\t\t\t\t175\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t27,\n\t\t\t\t\t172\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-38,\n\t\t\t\t\t173\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-84,\n\t\t\t\t\t178\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-140,\n\t\t\t\t\t196\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-165,\n\t\t\t\t\t221\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-168,\n\t\t\t\t\t235\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-168,\n\t\t\t\t\t235\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.4801483154296875,\n\t\t\t\t0.50616455078125,\n\t\t\t\t0.50616455078125,\n\t\t\t\t0.6575469970703125,\n\t\t\t\t0.7083282470703125,\n\t\t\t\t0.755340576171875,\n\t\t\t\t0.843719482421875,\n\t\t\t\t0.8808441162109375,\n\t\t\t\t0.9033050537109375,\n\t\t\t\t0.9111175537109375,\n\t\t\t\t0.9160003662109375,\n\t\t\t\t0.9169769287109375,\n\t\t\t\t0.9184417724609375,\n\t\t\t\t0.9355316162109375,\n\t\t\t\t0.9482269287109375,\n\t\t\t\t0.9531097412109375,\n\t\t\t\t0.9589691162109375,\n\t\t\t\t0.9589691162109375,\n\t\t\t\t0.9575042724609375,\n\t\t\t\t0.9501800537109375,\n\t\t\t\t0.9487152099609375,\n\t\t\t\t0.9413909912109375,\n\t\t\t\t0.9311370849609375,\n\t\t\t\t0.9130706787109375,\n\t\t\t\t0.9130706787109375,\n\t\t\t\t0.9140472412109375,\n\t\t\t\t0.9394378662109375,\n\t\t\t\t0.9516448974609375,\n\t\t\t\t0.9584808349609375,\n\t\t\t\t0.9648284912109375,\n\t\t\t\t0.9648284912109375,\n\t\t\t\t0.9531097412109375,\n\t\t\t\t0.62042236328125,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-168,\n\t\t\t\t235\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"x2x4itkx5kLlPbiJTsaLY\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -8.5,\n\t\t\t\"y\": -191.5,\n\t\t\t\"width\": 107,\n\t\t\t\"height\": 191,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 79636721,\n\t\t\t\"version\": 15,\n\t\t\t\"versionNonce\": 363123217,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1663731272950,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t3,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t12,\n\t\t\t\t\t1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t21,\n\t\t\t\t\t4\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t34,\n\t\t\t\t\t18\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t35,\n\t\t\t\t\t50\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t26,\n\t\t\t\t\t78\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t124\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-20,\n\t\t\t\t\t151\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-50,\n\t\t\t\t\t181\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-64,\n\t\t\t\t\t190\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-72,\n\t\t\t\t\t191\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t-72,\n\t\t\t\t\t191\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.58575439453125,\n\t\t\t\t0.60382080078125,\n\t\t\t\t0.60382080078125,\n\t\t\t\t0.7034454345703125,\n\t\t\t\t0.7464141845703125,\n\t\t\t\t0.783172607421875,\n\t\t\t\t0.817840576171875,\n\t\t\t\t0.817840576171875,\n\t\t\t\t0.811981201171875,\n\t\t\t\t0.802703857421875,\n\t\t\t\t0.6975860595703125,\n\t\t\t\t0.4484100341796875,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t-72,\n\t\t\t\t191\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"1Fmtqs0fLAcDQFxU6jbvw\",\n\t\t\t\"type\": \"freedraw\",\n\t\t\t\"x\": -94.5,\n\t\t\t\"y\": -57.5,\n\t\t\t\"width\": 294,\n\t\t\t\"height\": 144,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"round\",\n\t\t\t\"seed\": 559272831,\n\t\t\t\"version\": 13,\n\t\t\t\"versionNonce\": 18278463,\n\t\t\t\"isDeleted\": false,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1663731273384,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"points\": [\n\t\t\t\t[\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t1,\n\t\t\t\t\t-1\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t4,\n\t\t\t\t\t-5\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t22,\n\t\t\t\t\t-22\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t64,\n\t\t\t\t\t-52\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t105,\n\t\t\t\t\t-77\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t178,\n\t\t\t\t\t-113\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t225,\n\t\t\t\t\t-131\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t277,\n\t\t\t\t\t-144\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t294,\n\t\t\t\t\t-143\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t294,\n\t\t\t\t\t-142\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t294,\n\t\t\t\t\t-142\n\t\t\t\t]\n\t\t\t],\n\t\t\t\"pressures\": [\n\t\t\t\t0.55450439453125,\n\t\t\t\t0.56329345703125,\n\t\t\t\t0.60040283203125,\n\t\t\t\t0.6814727783203125,\n\t\t\t\t0.812469482421875,\n\t\t\t\t0.852508544921875,\n\t\t\t\t0.864715576171875,\n\t\t\t\t0.871551513671875,\n\t\t\t\t0.753387451171875,\n\t\t\t\t0.1489410400390625,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"simulatePressure\": false,\n\t\t\t\"lastCommittedPoint\": [\n\t\t\t\t294,\n\t\t\t\t-142\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"y46R0H1b\",\n\t\t\t\"type\": \"text\",\n\t\t\t\"x\": -71.5,\n\t\t\t\"y\": -248.5,\n\t\t\t\"width\": 11,\n\t\t\t\"height\": 25,\n\t\t\t\"angle\": 0,\n\t\t\t\"strokeColor\": \"#000000\",\n\t\t\t\"backgroundColor\": \"transparent\",\n\t\t\t\"fillStyle\": \"hachure\",\n\t\t\t\"strokeWidth\": 1,\n\t\t\t\"strokeStyle\": \"solid\",\n\t\t\t\"roughness\": 1,\n\t\t\t\"opacity\": 100,\n\t\t\t\"groupIds\": [],\n\t\t\t\"strokeSharpness\": \"sharp\",\n\t\t\t\"seed\": 479244017,\n\t\t\t\"version\": 3,\n\t\t\t\"versionNonce\": 559917265,\n\t\t\t\"isDeleted\": true,\n\t\t\t\"boundElements\": null,\n\t\t\t\"updated\": 1663731267657,\n\t\t\t\"link\": null,\n\t\t\t\"locked\": false,\n\t\t\t\"text\": \"\",\n\t\t\t\"rawText\": \"\",\n\t\t\t\"fontSize\": 20,\n\t\t\t\"fontFamily\": 1,\n\t\t\t\"textAlign\": \"left\",\n\t\t\t\"verticalAlign\": \"top\",\n\t\t\t\"baseline\": 18,\n\t\t\t\"containerId\": null,\n\t\t\t\"originalText\": \"\"\n\t\t}\n\t],\n\t\"appState\": {\n\t\t\"theme\": \"light\",\n\t\t\"viewBackgroundColor\": \"#ffffff\",\n\t\t\"currentItemStrokeColor\": \"#000000\",\n\t\t\"currentItemBackgroundColor\": \"transparent\",\n\t\t\"currentItemFillStyle\": \"hachure\",\n\t\t\"currentItemStrokeWidth\": 1,\n\t\t\"currentItemStrokeStyle\": \"solid\",\n\t\t\"currentItemRoughness\": 1,\n\t\t\"currentItemOpacity\": 100,\n\t\t\"currentItemFontFamily\": 1,\n\t\t\"currentItemFontSize\": 20,\n\t\t\"currentItemTextAlign\": \"left\",\n\t\t\"currentItemStrokeSharpness\": \"sharp\",\n\t\t\"currentItemStartArrowhead\": null,\n\t\t\"currentItemEndArrowhead\": \"arrow\",\n\t\t\"currentItemLinearStrokeSharpness\": \"round\",\n\t\t\"gridSize\": null,\n\t\t\"colorPalette\": {}\n\t},\n\t\"files\": {}\n}\n```\n%%","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/CG-Fundimentals/CG-Fundimentals":{"title":"CG Fundimentals","content":"\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Scratchpixel Home|Notes from Scratchpixel]]\n\n[[notes/General/CG-Fundimentals/resources/Topology Resources|Topology Resources]]\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/CG-Fundimentals/Lessons/Applied-Mathematics":{"title":"Applied Mathematics","content":"\n\n\nIn CG, no matter what you're focus is there are mathematics. Depending on your career path you may or may not need to dive deeply into the math used, however even if you think you wont having even just a rudimentary understanding will give you an edge in many ways.\nFor example, without a general understanding of what normals are and even an eagles eye view of linear algebra it may be hard to diagnose and fix problems with the surfaces of 3D model.\nIf you are rigging it might be very difficult to fix and build complex rigs without a good understanding of linear algebra. This is because rigging is all about coordinate spaces and transformations.\n\n---\n\n## Start Here\n\n- [[notes/General/CG-Fundimentals/Lessons/Continuous vs Discrete Mathematics]]\n- Linear algebra\n- geometric algebra\n- calculus\n\n---\n### Resources\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/CG-Fundimentals/Lessons/Continuous-vs-Discrete-Mathematics":{"title":"Continuous vs Discrete Mathematics","content":"\n\n\nOne of the difficult things in programming and cg when dealing with mathematics is translating things from math papers to something useful. Perhaps you want to translate a math paper discussing spirographs into your 3D package as a tool? To do this you must be able to read the paper, understand the math, and translate that into some form of code or process that your 3D package can understand.\n[https://entagma.com/](https://entagma.com/.md) have a useful chat about math papers and CG that I suggest watching.\nOne of the big things I got from their chat is the difference between infinite and discrete mathematics. \n\n\n## Resources\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GfIYC0iAcks\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003e\u003c/iframe\u003e\n\nIf you have always struggled with the *whys* of mathematics and would like a foundational and historical perspective on why math is the way it is today I highly suggest a book called *Infinite Powers* by Steven Strogatz.\n\nhttps://www.stevenstrogatz.com/books/infinite-powers\n\nhttps://scienceblogs.com/goodmath/2007/03/01/basics-discrete-vs-continuous-1#:~:text=The%20distinction%20is%20a%20very,line%2C%20or%20the%20real%20numbers.\u0026text=In%20discrete%20mathematics%2C%20you're,number%20of%20points%20between%20them.\n\n\n```ad-note\n\n\nTest Add note\n\n\n```","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/CG-Fundimentals/Lessons/Coordinates-and-3D-modeling":{"title":"Coordinates and 3D modeling","content":"\n\nYou might be thinking something like \"ok cool, this is all a little advanced for an intro course\". So let me explain. When you are working in CG, whether you like it or not you are working within these coordinate spaces.\n\nYou can try this on your own file or use the file provided to experiment with this.\n\n-github link\n\nIf you haven't yet, learn [[notes/3D-Modeling/blender/Lessons/Blender Navigation]].\n\nSelect the gizmo object press **G** then **Z** then drag the mouse upward and the gizmo will move upward along the z axis.\n\n![[notes/3D-Modeling/blender/3d-modeling-attatchements/gif/movegizmo1.gif]]\n\nIn this case we are moving the gizmos in world space. But lets try something new. Press **R** twice in a row and move to the mouse to rotate the gizmo in a random direction then let go. Next lets press the move key **G** and then press **Z** twice. (This will start the transform in local transform mode). We can also set the transform mode at the top of the view port with the menu.\n\n![[notes/3D-Modeling/blender/3d-modeling-attatchements/images/blendertransformspace.PNG]]\n\n![[notes/3D-Modeling/blender/3d-modeling-attatchements/gif/localspacemove.gif]]\n\nAs you continue in your modeling journey understanding this concept is going to save you a lot of tears and time.","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/CG-Fundimentals/Lessons/Coordniate-Systems":{"title":"Coordinate Systems in CG","content":"\n\nWe won't go into too much detail in this class and there won't be any need to do math problems or coding but understanding coordinate systems at least at a high level will help you master 3D in all it's aspects more than you realize right now.\n\n## what are coordinate systems\n\nThe barebones answer for our purposes is that coordinate systems represent space.\n\nYou've no doubt seen one of these before:\n\n![[notes/3D-Modeling/blender/3d-modeling-attatchements/images/xyplane_blank.png]]\n\nThe graph above is a blank $XY$ plane. The numbers on the graph indicate the values of the space the graph represents. In this case $X$ and $-X$ and $Y$ and $-Y$.\n\nIf you've ever used applications like photoshop or illustrator you've created media in this coordinate space.\n\nBefore we move to 3D space let's use the 2D coordinate plane to illustrate a two important concepts.\n\n1. Global Space\n2. Local Space\n\n## Global Space\n\nIn the context of the 2D plane above you can think of global space as the everything that the image itself represents. In other words that image is actually a representation of a 2D global coordinate space (At least for our purposes).\n*this will make more sense as we talk about local space*\n\n## Local Space\n\nLocal space in the image above isn't actually represented there. So we will need a new image show how it works. But first we need to talk about orientation.\n\nIf we really wanted to we could rotate the global space and everything on it would move with it. That would be sort of like rotating or moving the earth. Your position on the earth doesn't change but the earth itself is changing.\n\n![[notes/3D-Modeling/blender/3d-modeling-attatchements/gif/ROTATE2d.gif]]\n\nWe can change the rotation of the second gizmo while first one is rotating. \n\n![[notes/3D-Modeling/blender/3d-modeling-attatchements/gif/localspace01.gif]]\n\nJust like we move around the earth just fine with out much knowledge or feedback that the earth is rotating and hurtling through space with us on it, the second arrow is just turning on it's own. The space it's parented too seems normal to it.\n\n*we'll cover parenting later*\n\nAll of this is also true in 3D space.\n\n![[notes/3D-Modeling/blender/3d-modeling-attatchements/gif/3Dspace.gif]]\n\n## Tangent Space\n\nWe won't go into too much depth here but it's worth mentioning.\nYou can think of tangent space as the coordinate space of the surface of an object. This can come in handy more than you might think. For example what if you want to align something perpendicular to the surface of another object. Or rotate one object relative to the surface of another object, like a knob for example.\n\nTo understand tangent space we need to touch on what Normals are.\n\n![[notes/3D-Modeling/blender/3d-modeling-attatchements/images/tangentnormal.jpg]]\n\nAs you can see the image above the blue arrow is labeled as the normal. In any good 3D application we visualize data like this, blender is no exception. \n\n![[notes/3D-Modeling/blender/3d-modeling-attatchements/images/blendernormalvis.PNG]]\n\nTo understand how coordinate spaces are important when working in 3D applications well look at [[notes/General/CG-Fundimentals/Lessons/Coordinates and 3D modeling]].\n\n\n---\nFurther Reading\n\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Scratchpixel Home]]\n[[notes/3D-Modeling/blender/Sources/Coordinate Handedness]]\n[[notes/3D-Modeling/blender/Matricies PDF]]","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/CG-Fundimentals/Lessons/Lighting-Lesson":{"title":"","content":"\n# Resources\n\n[Understanding Lighting \u0026 Improving your 3D Renders - YouTube](https://www.youtube.com/watch?v=avhkN0QMRGc)\n\n[Lighting 3D Characters for Storytelling - YouTube](https://www.youtube.com/watch?v=Nn23PAOkldM)\n\n[10 Tips to make Your 3D Render more Cinematic - YouTube](https://www.youtube.com/watch?v=W07u4S8xJXs)\n\n\n\n# Lighting in CG\nThese days there are many accurate physically based renderers which can help us more easily and intuitively set up the lighting and materials for our scenes.\n\nOne of the major benefits to this is that we can now emulate the setups for film and photography and get similar results.\n\nIn order to get better lighting we must understand how light works a bit better.\n\n\u003e [!IMPORTANT] It's important to use real world units if you want things to behave as expected\n\n\n\n# Cameras\n\n\nCameras capture light on different types of photo-receptors through housing that contains all sorts of components to help control the image.\n\nIn order for our camera to get the right *Exposure* we need to adjust two things:\n1. Aperture\n2. Shutter Speed\n\nAperture =\u003e  This is the size of iris in the camera and is adjusted to let in different amounts of light. Very similar to what our own eyes do.\n\n![[notes/attachments/Pasted image 20221116091417.png]]\n\n![[notes/attachments/Pasted image 20221116091448.png]]\n\n![[notes/attachments/Pasted image 20221116091456.png]]\n![[notes/attachments/Pasted image 20221116114001.png]]\n\n\nShutter Speed =\u003e The amount of time the shutter is open and lets in light while taking a photo.\n\n# F-Stop\n\n[A Simple Explanation of F-Stop - YouTube](https://www.youtube.com/watch?v=KmNIouLByJQ)\n\n\nSetting on the camera that control how much light is let into the camera.\n\n\u003eEach f-stop number doubles the amount of light let into the camera\n\n\n\n## Depth of Field (DOF)\nDepth of field (DOF) is when the focus of the camera blurs the rest of the scene.\n\n\n\n\u003eDistance between the nearest object in focus and the furthest object in focus in your frame\n\n![[notes/attachments/Pasted image 20221116105903.png]]\n\n\n\u003e[!NOTE] In CG we can usually turn DOF on or off. Normally you want it on for more realism.\n\n![[notes/attachments/Pasted image 20221116104125.png]]\n\nWhat we are controlling is the *Depth* of the *Field* of focus.\n\nThere are a few ways we can control this.\n1. Aperture\n2. Distance to Subject\n3. Focal Length\n\n### Aperture\nThe opening in your lens.\n\n\u003eThe smaller the number =\u003e The wider the opening =\u003e The shallower the DOF\n\n### Distance to Subject\nThe closer you are to your subject =\u003e The shallower the DOF\n\n### Focal Length\nThe longer the Focal Length =\u003e The shallower the DOF\n\n\u003e100mm will have a much shallower DOF than a 16mm lens\n\n## Use Cases\n\n### Landscape\n- Want everything in focus\n\nTo do this you need to do a few things.\n- Use Smaller Aperture\n- Distance From Subject\n- Use a wide lense\n\n### Portrait\n- Want the subject in focus and the background blurred.\n\nHow to achieve this:\n- Wider Aperture\n- Closer to subject\n- Narrower lense\n\n\n## Resources\n\n[A Simple Guide to Depth of Field - YouTube](https://www.youtube.com/watch?v=34jkJoN8qOI)\n\n[Depth of Field: An Easy Overview (2022) - YouTube](https://www.youtube.com/watch?v=qfkvw-Lrn7Q)\n\n[8 Steps to Cinematic Lighting | Tomorrow's Filmmakers - YouTube](https://www.youtube.com/watch?v=0suVZjz3_Uw)\n\n[CGI \u0026 VFX Showreels: \"Lighting/Shading/Look Dev/CG generalist/Reel\" - by Raju Shanmugam | TheCGBros - YouTube](https://www.youtube.com/watch?v=qoV3nuM5tGg)\n\n\n\n# Lighting\n\nNow that we know we can get similar results with different light intensities if we use our cameras correctly how do we change our lighting in ways we might want?\n\n## Shadows\nThere are two main factors when it comes to affecting types of shadows in our scenes.\n\n1. Size of the light\n2. Distance of the light from the object\n\nSmall Light =\u003e Harder Shadows\nBigger Light =\u003e Softer Shadows\n\n\u003e Photographers and filmmakers use soft-boxes, umbrellas, and diffusers to create *larger* lights and soften shadows\n\n## Light Ratio\n\nThe contrast between the lightest and darkest parts of the scene\n- Low =\u003e There is less difference\n- High =\u003e There is more difference\n\n# HDRI\nHDRI's are textures meant for the world and create reflections and more accurate environment lighting.\n\n# Shadow Play\nUse objects or textures to break up the light and shadows for a more interesting look\n\n# Character Lighting\nSome useful terms\n- Paramount Lighting\n\t- ![[notes/attachments/Pasted image 20221116102339.png]]\n\t- Accentuates Cheek Bones\n\t- Used a lot in older movies\n- Loop lighting\n\t- like paramount lighting but the key light is moved slightly to the side\n\t- ![[notes/attachments/Pasted image 20221116102559.png]]\n\t- More modern way to light characters\n- Hair Light\n\t- ![[notes/attachments/Pasted image 20221116103123.png]]\n\t- Usually the key light is strong and coming from directly above the character\n\t- Good for mostly showing the characters silhouette \n\t- Have it slightly behind the character to avoid ghoul eyes\n- Split Lighting\n\t- ![[notes/attachments/Pasted image 20221116103401.png]]\n\t- Divides face into light and dark sides\n- Rembrandt Lighting\n\t- Named from the paintings by Rembrandt\n\t- ![[notes/attachments/Pasted image 20221116103612.png]]\n\t- Key light is to the side (not too much)\n\t\t- Still shining over the nose and onto the other cheek\n\t- Very popular character lighting in cinema\n\n# Lighting Color\n- Color theory\n- Color Psychology\n- Physical Reference\n\t- time of day\n\t- cloud cover\n\t- etc.\n\n\u003e[!NOTE] It's ok to break physical correctness if it works for the story telling. This is especially true for very stylized projects.\n\n\n# Textures and Lights\nIn CG we can create custom light shaders and use textures and do other fun things.\n\n\n\n\n## Tips\n- try and avoid lighting the object head-on\n- Use different *cameras* and *lenses* in your CG scene for different uses\n\t- landscape vs portrait camera setups\n\n\n# Scene Composition and Lighting\n\n- The eye is drawn to the brightest spot on the image\n\n# Light Types\n- Key Light =\u003e Typically the most prominent light in your scene.\n- Fill Light =\u003e Secondary Light usually on the side\n- Back Light =\u003e Can help give rim-light and halo on objects\n\n\n\n---\n# Blender Lighting and Cameras\n\n## Cycles\n- Some post processing must be done in the compositing phase\n\n\n## Eevee\n\n- Fog\n- Post Processing\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/CG-Fundimentals/Lessons/Types-of-Mathematics-in-CG":{"title":"Types of Mathematics in CG","content":"\n\n\nThere are many types of mathematics in CG. ","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/CG-Fundimentals/Lessons/What-is-Geometry":{"title":"What is geometry","content":"\n# What is geometry\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/Color-Management/Color-Management-Hub":{"title":"Color Management Hub","content":"","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/Hardsurface-Modeling-Resources":{"title":"Hardsurface Modeling Resources","content":"\n\n\n[BOOLEAN workflow - Blender Hard Surface Modeling Tutorial - YouTube](https://www.youtube.com/watch?v=lxtHuz6luJM)\n\n[Blender SciFi Hard Surface Modeling Tutorial - Part 1 - YouTube](https://www.youtube.com/watch?v=6jSK7TQ2s5w)\n\n[Simple \u0026 easy hard surface box practice in Blender! - YouTube](https://www.youtube.com/watch?v=7Z3T0aGWt1g)\n\n[ORGANIC Hard Surface - Blender modeling TUTORIAL - YouTube](https://www.youtube.com/watch?v=2RBVj6swqBU)\n\n[Blender 3d: Mech DM001 - YouTube](https://www.youtube.com/watch?v=eUQ4HSCYJfg\u0026list=PLlpgnnqfmlJ-k7NwT4aLQ4JALkCKFvidH)\n\n[12 Blender Addons for Hard Surface Modeling - YouTube](https://www.youtube.com/watch?v=AT_8DU7DKUE)\n\n[Blender Secrets - Hard Surface Sculpting Tips - YouTube](https://www.youtube.com/watch?v=3Ty0dNNO4bE\u0026t=132s)\n\n[Essential Modifiers for Hard Surface - Blender Tutorial - YouTube](https://www.youtube.com/watch?v=Ul5RfRmLGuQ)\n\n[Blender Boolean Cleanup: Topology Study #1 - YouTube](https://www.youtube.com/watch?v=-CmqP1KPuns)\n\n[Change Your Understanding of Topology In Six Minutes - YouTube](https://www.youtube.com/watch?v=HGL6QpVRyXk)\n\n[Tutorial : Improve Hard Surface Topology \\_ Blender Modeling Tutorial - YouTube](https://www.youtube.com/watch?v=WedeZfxIuV0)\n\n[3 minutes is all you need! (Blender Hard Surface Modeling Exercises) - YouTube](https://www.youtube.com/watch?v=jnmiJBAgBvA)\n\n[Mesh Machine Tutorial for Hard Surface in Blender. - YouTube](https://www.youtube.com/watch?v=dDUwFzvA8eI)\n\n[It's basically CAD?? | Mesh Machine topology HACKS in Blender - YouTube](https://www.youtube.com/watch?v=3brXVB1ewtA)\n\n[All about Mesh Machine addon for hard surface in Blender - YouTube](https://www.youtube.com/watch?v=Lpyy0F5nsWg)\n\n[Blender Secrets - Grease Pencil Strokes to Mesh - YouTube](https://www.youtube.com/watch?v=bhhLpOhRMzU)\n\n[Blender Tutorial - Let's Fix Hard Surface Topology Mess With Mesh Machine and Machine Tools - YouTube](https://www.youtube.com/watch?v=0gh0d0a76b0)\n\n[The FUTURE of SUBD modelling in Blender - Offset Cut with Mesh Machine - YouTube](https://www.youtube.com/watch?v=dhGJB_7JNvg)\n\n[#toposolve - Going Subd w/ Meshmachine - YouTube](https://www.youtube.com/watch?v=97NyB3wDml4)\n\n[Blender Hard Surface Modeling Tutorial - Curvy/Organic Shapes - YouTube](https://www.youtube.com/watch?v=3_RkY_mtlC4)\n\n[MESHmachine - Stashes (and Normal Transfer and Symmetrize) - YouTube](https://www.youtube.com/watch?v=N7o4HsOEeSg)\n\n[How to clean up NASTY shading in Blender (Tutorial) - YouTube](https://www.youtube.com/watch?v=ai_slkxEUfw)\n\n[How GET STARTED with DECAL MACHINE 2.0 for Blender - YouTube](https://www.youtube.com/watch?v=VFyeCUll54E)\n\n[HOW to use TRIM sheets with Decal Machine for Blender - YouTube](https://www.youtube.com/watch?v=LkQ7fmg9tu8)\n\n[Quick guide to MACHINE TOOLS free addon for Blender - YouTube](https://www.youtube.com/watch?v=sGOjH-zqWd0)\n\n[Hard Ops \u0026 Boxcutter - A tutorial for NOOBS (Blender) - YouTube](https://www.youtube.com/watch?v=-sSQeJhUJ_U)\n\n[Easy Guide to HardOPS and Boxcutter for Beginners - Part 1 - Blender Tutorial - YouTube](https://www.youtube.com/watch?v=04TCID4cDBo)\n\n[COMPLETE Hard Ops Tutorial for Blender - YouTube](https://www.youtube.com/watch?v=N6mfFv_7jYo)\n\n[#hardops 987\\_14: WorkTheCorner5 - YouTube](https://www.youtube.com/watch?v=LUQxM06RwhI)\n\n[Simple SciFi Blockout with Hard Ops and Boxcutter - YouTube](https://www.youtube.com/watch?v=5oV0-6-oqnQ)\n\n[Organic/Subd Hard Surface Modeling in Blender (A Brief Overview) - YouTube](https://www.youtube.com/watch?v=zxc8MvKTqus)\n\n[How to Learn Hard Surface Modelling in Blender - YouTube](https://www.youtube.com/watch?v=pSFeDo7aOp4)\n\n[5 Hard Surface Tips in ZBrush You Didn't Know - YouTube](https://www.youtube.com/watch?v=r8u3zQHKuMg)\n\n[Maya Hard Surface Modeling: Spherical Shapes - YouTube](https://www.youtube.com/watch?v=4ioxnMq-9io)\n\n[Topology Flow | Hard Surface Modelling | Blender 2.8 - YouTube](https://www.youtube.com/watch?v=ormlcMpVx7k)\n\n[Maya Hard Surface Modeling Tutorial: Lumpy Surface Fix - YouTube](https://www.youtube.com/watch?v=IdYNs03RF7o)\n\n[Understanding Topology and Edge Flow in 3D Modeling - YouTube](https://www.youtube.com/watch?v=rwW6HpOcAuw\u0026t=1218s)\n\n[Mech Joint TUTORIAL in Blender - YouTube](https://www.youtube.com/watch?v=xDfvu9Ckw1E)\n\n[Hard-surface Modeling in Blender Intro! - YouTube](https://www.youtube.com/watch?v=gtZ_qpmIf84)\n\n[CGMA | Hard Surface Modeling for Films - YouTube](https://www.youtube.com/watch?v=g6PoDQS16WI)\n\n[RETOPOLOGY tutorial for HARD SURFACE in Blender - YouTube](https://www.youtube.com/watch?v=jkIf1nNzDKs)\n\n[Hard Surface TOPOLOGY tutorial: Blender booleans - YouTube](https://www.youtube.com/watch?v=seFDI4pqnOo)\n\n[Topology Hard Surface: Easy Hard Surface Modeling In 3ds Max || N°\\_158 - YouTube](https://www.youtube.com/watch?v=MFibtKcQaAw)\n\n[EVERYTHING You Need to Know About Topology - YouTube](https://www.youtube.com/watch?v=6Kt0gW3_kio\u0026t=1504s)\n\n[Blender Boolean Cleanup: Topology Study #3 - YouTube](https://www.youtube.com/watch?v=UcY1mkdEaHs)\n\n[The RIGHT way to cut holes in surfaces in Blender - YouTube](https://www.youtube.com/watch?v=Ci1jBOm_5NY)\n\n[Hard Surface in Blender - CAD bevels TUTORIAL - YouTube](https://www.youtube.com/watch?v=isT-eHsHQRI)\n\n[SHOULD you SUBDIVIDE the mesh? - HARD SURFACE dilemma in Blender. - YouTube](https://www.youtube.com/watch?v=zYuYu41-YGo)\n\n[Blender Hard Surface Modeling | Create Clean Booleans | Blender 3D - YouTube](https://www.youtube.com/watch?v=V8p8Kw8xljo)\n\n[When and why NGONS can be BETTER than quads - topology with purpose for NEW 3D artist - YouTube](https://www.youtube.com/watch?v=JXqfqHsjgHc)\n\n[Topology Hard Surface: Modular Detail and line of a hard surface Modeling In 3ds Max || N°\\_114 - YouTube](https://www.youtube.com/watch?v=4YOfQMKcuS0)\n\n[Maya Hard Surface Modeling for Beginners - YouTube](https://www.youtube.com/watch?v=HPrj4FbVnRM)\n\n[Modo 16.0 | Quickly Create Complex Hard Surface Shapes - YouTube](https://www.youtube.com/watch?v=HPvUL6MWgpg)\n\n[Modo 11 Hard Surface modeling #1 - YouTube](https://www.youtube.com/watch?v=I3UmlFLc8aM)\n\n[Hard Surface Modeling in Modo | Blocking Out the Model - YouTube](https://www.youtube.com/watch?v=FLZpac-ozO8)\n\n[Modo 15.2 - Hard Surface Modeling Made Easy with the Slice Effector - YouTube](https://www.youtube.com/watch?v=wCMOEWpWk3U)\n\n[Maya Hard Surface Modeling - How to Fix Bad Surfaces - YouTube](https://www.youtube.com/watch?v=bQqr8ImjScU)\n\n[Hard Surface Modeling in Modo | Modeling the Cockpit - YouTube](https://www.youtube.com/watch?v=Ui42IgiDZjA)\n\n[How to 3D Model Anything - YouTube](https://www.youtube.com/watch?v=yPVr4Zb62wk\u0026t=568s)\n\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/Lighting-Hub":{"title":"Lighting Hub","content":"\nLighting in CG could be an entire career. Here are a few places to start.\n\n[[notes/General/CG-Fundimentals/Lessons/Lighting Lesson]]\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/Productivity/Knowledge-Management":{"title":"","content":"\n\u003e[!IMPORTANT] Before you jump into KMS it may be helpful to review [[notes/General/Productivity/Meta Learning|meta learning]].\n\nPersonal knowledge management (PKM) is the process of actively and systematically collecting, organizing, and retrieving information to support personal learning and goal achievement. There are many methods for personal knowledge management, but some common ones include:\n\n1.  The Zettelkasten method, as described above, which uses index cards or digital notes to organize and cross-reference information.\n2.  The Cornell Method, which involves taking notes on a page divided into two columns: one for keywords and phrases, and another for explanations and elaborations.\n3.  Mind Mapping, which uses a visual diagram to organize and connect related ideas and information.\n4.  The GTD (Getting Things Done) method, which emphasizes the importance of capturing tasks, goals, and ideas as soon as they arise, and then organizing and prioritizing them.\n5.  The Eisenhower Matrix, which categorizes tasks into four categories based on their urgency and importance.\n6.  The PARA method, which separates tasks into Projects, Areas, Resources and Archives.\n7.  The Personal Wiki method, which uses a digital personal wiki to collect, organize and cross-reference information, notes and ideas.\n8.  The Memory Palace technique, which uses mental imagery to organize and recall information.\n\nAll of these methods can be adapted and combined depending on individual preference and need. The key is to find a system that works for you and to be consistent in using it.\n\nOne of the most popular is the *Zettelkasten method*:\n\n\u003eThe Zettelkasten method is a system for note-taking and personal knowledge management developed by German sociologist and philosopher Niklas Luhmann. It is a method that helps to organize, cross-reference and retrieve information effectively.\n\u003e\n\u003eThe method is based on the use of index cards, or \"slips,\" on which notes and ideas are written. Each card contains a single thought or piece of information and is assigned a unique identification number. The cards are then stored in a physical container called a \"slip box\" or \"Zettelkasten.\"\n\u003e\n\u003eThe key idea behind the method is to create many small notes, each with a specific and well-defined topic, and link them together using hyperlinks and cross-references. This allows for creating a web of interconnected ideas, where each note is related to many others, and helps to build connections between different thoughts and concepts.\n\u003e\n\u003eThe Zettelkasten method can be adapted to digital form, such as plain text file, note-taking software, etc.\n\u003e\n\u003eThe method is often used by scholars, writers, and researchers as a way to organize and retrieve information quickly, while also encouraging creative thinking and idea generation.\n\n\n\u003e[!NOTE] PKM Resources\n\u003e\n\u003e[What is PKM? What is Personal Knowledge Management? - YouTube](https://www.youtube.com/watch?v=Q2WBHyqRsxA)\n\u003e\n\u003e[Knowledge Management - In 5 minutes or less - YouTube](https://www.youtube.com/watch?v=k3jo7oWzUUc)\n\u003e\n\u003e[Knowledge Management For Software Developers - YouTube](https://www.youtube.com/watch?v=C5ycVOMaiwU)\n\u003e\n\u003e[Workflowy for Zettelkasten Personal Knowledge Management system - YouTube](https://www.youtube.com/watch?v=5ReeIrqvEAo)\n\u003e\n\u003e[Getting Started • Zettelkasten Method](https://zettelkasten.de/posts/overview/)\n\u003e[BUILDING A SECOND BRAIN by Tiago Forte | Core Message - YouTube](https://www.youtube.com/watch?v=aEm72qlAtVc)\n\u003e\n\nThere are many systems out there but you will have to create your own.\n\n## Tools for PKMs\n\nOften people end up creating what they call second brains in conjunction with their knowledge management systems. Below are some popular tools for the task:\n\n- [Obsidian](https://obsidian.md/) -\u003e My personal favorite and recommendation\n- [Notion](https://www.notion.so/)\n- [Evernote](https://evernote.com/)\n- [Coda](https://coda.io/)\n- [Logseq: A privacy-first, open-source knowledge base](https://logseq.com/)\n- [Dendron](https://www.dendron.so/)\n- [Zettlr](https://www.zettlr.com/)\n- [Org-roam](https://www.orgroam.com/)\n\nSome related tools that are often used in conjunction with obsidian and should be noted:\n\n\n\n[[notes/git/Git Hub|Version Control Notes]]\n\n- [Git](https://git-scm.com/)\n- [GitHub](https://github.com/)\n- [GitLab](https://about.gitlab.com/)\n\nA good tool for collecting sources is [Zotero](https://www.zotero.org/)\n\nIn this course I highly suggest you start creating your own personal knowledge managment system.\n\n### Obsidian\n\nMy suggestion is to start with Obsidian and either set it up with *git* or *google drive* or something similar.\n\n\u003e[!NOTE] I may want some homework turned in with github at some point, if so, you could put your vaults in a git repo, don't worry we'll cover that too.\n\n\nObsidian uses [Markdown](https://www.markdownguide.org/) and formats your text accordingly. One you learn it it's much faster than using traditional document editors because you do all the formatting in the same line, no need to click buttons and select text.\n\n\u003e[!NOTE] Obsidian Guides\n\u003e\n\u003e[Obsidian for Beginners: Start HERE — How to Use the Obsidian App for Notes - YouTube](https://www.youtube.com/watch?v=QgbLb6QCK88\u0026t=1s)\n\u003e\n\u003e[How to get started with Obsidian in 2022 - from scratch! - YouTube](https://www.youtube.com/watch?v=OUrOfIqvGS4)\n\u003e\n\u003e[Obsidian for beginners: Building a second brain from scratch (2021) - YouTube](https://www.youtube.com/watch?v=njibNuFQwjw\u0026t=21s)\n\u003e\n\u003e[How To Build Your Second Brain In Obsidian (Updated For 2023) - YouTube](https://www.youtube.com/watch?v=vEw8_9a8cGk)\n\n\u003e[!NOTE] Markdown Resources\n\u003e\n\u003e[Markdown Tutorial](https://www.markdowntutorial.com/)\n\u003e\n\u003e[Markdown Live Preview](https://markdownlivepreview.com/)\n\u003e\n\u003e[Format your notes - Obsidian Help](https://help.obsidian.md/How+to/Format+your+notes)\n\u003e\n\u003e[Obsidian Markdown Reference | Markdown Guide](https://www.markdownguide.org/tools/obsidian/)\n\n---\n\n# Assignment\n\n- download obsidian\n- watch at least one video from each resource section on this page\n- create a blank vault\n- go through the [Markdown Tutorial](https://www.markdowntutorial.com/) \n- turn in screenshot of completed markdown tutorial\n- Write a short paragraph about what you learned and what you might implement for yourself\n\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/Productivity/Learning-Systems":{"title":"","content":"# Learning Systems\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/Productivity/Meta-Learning":{"title":"Meta-Learning","content":"\nMeta learning is the process of learning how to learn, or developing strategies and techniques that can help individuals learn more effectively. This can include understanding how the brain processes information, identifying effective methods for information retention and recall, and developing problem-solving skills.\n\nSome examples of meta learning techniques that can be used by humans include:\n\n1.  Spaced repetition: This is a method of memorization that involves reviewing information at increasing intervals over time.\n2.  Active recall: This is a method of testing oneself on the material being learned to actively retrieve the information from memory.\n3.  Elaborative encoding: This is a method of connecting new information to existing knowledge and making connections between new information.\n4.  Self-explanation: This is a method of explaining to oneself how a new concept or idea fits into what one already knows.\n5.  Interleaving: This is a method of switching between different tasks or topics, which can help build connections between different pieces of information.\n6.  Deliberate practice: This is method of focusing on specific aspects of a task or skill, and breaking it down into smaller parts to make it manageable.\n7.  Chunking: This is method of breaking down information into smaller and more manageable pieces for easier recall.\n8.  Reflection: This is the method of looking back on one's learning experience, evaluating and assessing the effectiveness of one's own learning strategies.\n\n\u003e[!IMPORTANT] It's also important to learn to pick out the most important information. For instance in language learning, you can become conversationally proficient if you focus (at first) on only the grammar and vocab that has the highest frequency of use. You could spend your whole life learning a language. Order of operations is important.\n\nOne effective method I like using is *DISSS* put together by *Tim Ferriss*.\n\nDISSS is an acronym that stands for \"Deconstruction, Iteration, Simplification, Specialization, and Sequencing\"\n\n1.  Deconstruction: Breaking down a dish into its component parts and experimenting with different variations and techniques to find the optimal way to make it.\n2.  Iteration: Repeating the process of making the dish multiple times in order to improve it.\n3.  Simplification: Streamlining the ingredients, techniques and steps involved in the dish to make it more efficient and easier to execute\n4.  Specialization: Focusing on mastering a specific type of dish or ingredient.\n5.  Sequencing: Using timing and organization to plan and execute a large task.\n\n\n\u003e[!NOTE] Learning Resources\n\u003e\n\u003e[How to Learn ANYTHING - YouTube](https://www.youtube.com/watch?v=brffDCE5hXs)\n\u003e\n\u003e[The Art and Science of Learning Anything Faster (#191) - The Blog of Author Tim Ferriss](https://tim.blog/2016/10/06/the-art-and-science-of-learning-anything-faster/)\n\u003e\n\u003e[The Tim Ferriss Show Transcripts: The Art and Science of Learning Anything Faster (#191) - The Blog of Author Tim Ferriss](https://tim.blog/2018/06/05/the-tim-ferriss-show-transcripts-the-art-and-science-of-learning-anything-faster/)\n\n\nImportant points:\n- Be deliberate with your learning\n- Do it in stages\n\t1. First time through just listen or watch\n\t2. Second time through follow along\n\t3. Third time through record what you learned","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/Productivity/Productivity":{"title":"Productivity","content":"\n# How to be more productive\n\n\n[[Self Study]]\n\n[[notes/General/Productivity/Meta Learning|Meta Learning]]\n\n[[notes/General/Productivity/Knowledge Management]]\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/faq/How-to-read-keyboard-shortcuts":{"title":"How to Read Keyboard Shortcuts","content":"\n# Keyboard Shortcuts\nleft to right\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/faq/faq":{"title":"FAQ","content":"\n[[notes/General/faq/How to read keyboard shortcuts|How to read keyboard shortcuts on this site]]\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/post-production/Post-Production-Hub":{"title":"Post Production Hub","content":"\n# Start Here\n\n[[notes/General/post-production/what is post-production]]\n\n\n---\n\n# Color Management\n\n[[notes/General/Color-Management/Color Management Hub]]\n\n\n\n\n\n---\n\n# Software\n\n[[notes/Davinci resolve/Davinci Resolve Hub]]\n\n[[notes/Davinci resolve/Fusion/Fusion 360 Hub]]\n\n[[blender compositing]]\n\n[[houdini compositing]]\n\n[[notes/Deadline/Deadline Hub]]\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/post-production/Post-Production-Lesson-1":{"title":"Post Production Lesson 1","content":"\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/General/post-production/what-is-post-production":{"title":"","content":"Post production is the step in a pipeline after the footage has been rendered or shot. \n\n[[notes/3D-Modeling/assignments/post-production/Post production exercise]]","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Godot/Godot-Hub":{"title":"Untitled Page","content":"---\ntitle: \"Godot Hub\"\ntitle: [godot, hub, index, game-dev]\n---\nThe Godot engine is an open source game engine that is rapidly gaining popularity.\n\nhttps://godotengine.org/\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Linux-in-Studios":{"title":"Linux in Studios","content":"\n[2021 Studio Platform Survey Report.pdf - Google Drive](https://drive.google.com/file/d/15b-4GMTSEE9tyqeQdBfy_LZnxQIdp38Y/view)\n\n\u003e\"All three major operating systems have a substantial presence across the responding\n\u003estudios. Windows tends to have the largest share of workstations in studios with less than\n\u003e200 employees, whereas Linux seems to be the leader in larger studios. Linux has\n\u003earound 60% of the share of all workstations across the studios responding to the survey.\n\u003eLooking at the graph below which indicates forward-looking plans, Linux's share is\n\u003eexpected to increase further over the next 2 to 3 years. A higher proportion of\n\u003e\n\u003eWindows-based studios seem to be looking to migrate workstations to Linux than Linux-\n\u003ebased studios migrating to Windows.\"","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Mathematics/Mathematics-Hub":{"title":"Mathematics Hub","content":"\n\n\n---\n# CG Maths\n\n[[notes/3D-Modeling/blender/Sources/Scratchpixel/Scratchpixel Home]]\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Music-Production/Music-Production-Hub":{"title":"Music Production Hub","content":"\n[[notes/Music Production/Sound Design Hub]]\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Music-Production/Sound-Design-Hub":{"title":"Sound Design Hub","content":"","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Nuke/Nuke-Hub":{"title":"Nuke Hub","content":"\n[Advanced Compositing for VFX | Week 1 Lessons for Nuke Artists - YouTube](https://www.youtube.com/watch?v=zD6ZGhfSFdI)\n\n[NUKE FOR NOOBS | Basics Of CG Compositing (Part 1) - YouTube](https://www.youtube.com/watch?v=fxfuhl8Q7ys)\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Obsidian/Obsidian-Hub":{"title":"Obsidian Hub","content":"\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Obsidian/Obsidian-Notes":{"title":"Obsidian Notes","content":"\n# How to use Obsidian\n\nhttps://nicolevanderhoeven.com/blog/20210518-how-i-use-obsidian-at-work/\n\n## Obsidian graphs\n\nhttps://github.com/HEmile/juggl\n\nhttps://github.com/vasturiano/3d-force-graph\n\nhttps://github.com/HEmile/obsidian-neo4j-graph-view\n\nhttps://js.cytoscape.org/\n\nhttps://web.archive.org/web/20051215062220/http://morcego.arca.ime.usp.br/\n\nnoda\n\nhttps://github.com/rgvr/simply-jekyll supports wikilinks\n\n\nhttps://input.sh/replicating-notions-tables-with-obsidian-plugins/ - notes on graphs and dataview quantified self stuff\n\n\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Other/Firefox-Notes":{"title":"Firefox Notes","content":"\n\n# Firefox customize tabs\n\n---\n\nTo hide the native tabs, you'll have to add a new file called `userChrome.css` and the css property `visibility: collapse`.\n\nTo do this, in Firefox click on Click on `Menu -\u003e Help -\u003e Troubleshooting Information` or navigate to `about:support` in the address bar.\n\nUnder the `Application Basics` section, there will be a section called `Profile Directory` with a button to `Open Directory`.\n\nIn the `Profile Directory` create a new folder called `chrome`. In the `chrome` folder create or edit the file `userChrome.css` if it already exists.\n\nThe contents of `userChrome.css` should be the following.\n\n```css\n/* hides the native tabs */\n#TabsToolbar {\n  visibility: collapse;\n}\n```\n\nSome optional further modifications to put in `userChrome.css` are:\n\n```css\n/* hides the title bar */\n#titlebar {\n  visibility: collapse;\n}\n\n/* hides the sidebar */\n#sidebar-header {\n  visibility: collapse !important;\n} \n```\n\nA configuration that [Xilin Sun](https://medium.com/@Aenon/firefox-hide-native-tabs-and-titlebar-f0b00bdbb88b) uses is:\n\n```css\n/* hides the native tabs */\n#TabsToolbar {\n  visibility: collapse;\n}\n/* leaves space for the window buttons */\n#nav-bar {\n    margin-top: -8px;\n    margin-right: 74px;\n    margin-bottom: -4px;\n}\n```\n\nTry these out and see what you think looks best.\n\nTo answer your question in the comment, you may like this option better. I tried using visibility, but it was extremely flashy and jittery with the hover.\n\n```css\n/* Option 1 */\n#TabsToolbar {\n    opacity: 0.0;\n}\n\n#TabsToolbar:hover {\n    opacity: 1.0;\n}\n\n/* Option 2 */\n#TabsToolbar {\n    visibility: collapse;\n}\n\n#navigator-toolbox:hover #TabsToolbar {\n    visibility: visible;\n}\n```\n\n\n---\nIf you're running Windows 10, I've found the following gives the best integration:\n\n![screenshot of windows 10 tab integration](https://i.stack.imgur.com/ME8Ae.png)\n\n1.  Enable \"Title Bar\" mode by going to the hamburger menu (☰) → Customize → Check the \"Title Bar\" checkbox at the bottom of the screen.\n2.  Apply the following [userChrome.css](https://www.userchrome.org/how-create-userchrome-css.html):\n\n```css\n#main-window[tabsintitlebar=\"true\"]:not([extradragspace=\"true\"]) #TabsToolbar {\n    opacity: 0;\n    pointer-events: none;\n}\n\n#main-window:not([tabsintitlebar=\"true\"]) #TabsToolbar {\n    visibility: collapse !important;\n}\n```\n\n---\n\n## Re-enable Custom CSS\n\n1.  Visit `about:config`\n2.  Search `toolkit.legacyUserProfileCustomizations.stylesheets`\n3.  Toggle it, making the value `true`\n\n## Create userChrome.css\n\n1.  Visit `about:support`\n2.  To the right of \"Profile Directory\", press the button `Open Directory`\n3.  Create a new folder named `chrome`\n4.  Open the `chrome` folder and create a new file named `userChrome.css`\n\n## Set the styling in userChrome.css\n\nDifferent CSS needs to be used depending on whether you have the titlebar enabled.\n\n### With Titlebar\n\nTitlebar visible _(Hamburger menu at top-right -\u003e More Tools -\u003e Customize Toolbar..)_ [![enter image description here](https://i.stack.imgur.com/Vldct.png)](https://i.stack.imgur.com/Vldct.png)\n\nResult _(Ubuntu screenshot)_ [![enter image description here](https://i.stack.imgur.com/9ag6d.png)](https://i.stack.imgur.com/9ag6d.png)\n\n1.  Inside the `userChrome.css` file, insert the code below to hide tabs:\n\n```\n#TabsToolbar {\n  visibility: collapse;\n}\n```\n\n2.  Close and reopen Firefox to see the changes.\n\n### Without Titlebar\n\nTitlebar not visible _(Hamburger menu at top-right -\u003e More Tools -\u003e Customize Toolbar..)_ [![enter image description here](https://i.stack.imgur.com/1bSRm.png)](https://i.stack.imgur.com/1bSRm.png)\n\nResult _(Ubuntu screenshot)_ [![enter image description here](https://i.stack.imgur.com/kEyGF.png)](https://i.stack.imgur.com/kEyGF.png)\n\n1.  Inside the `userChrome.css` file, insert the code below to hide tabs:\n\n```\n#tabbrowser-tabs {\n    visibility: collapse;\n}\n```\n\n2.  Close and reopen Firefox to see the changes.\n\n---\n\n## Alternative Styling\n\n### Without Titlebar: Mini bar\n\n_Result (Ubuntu)_ [![enter image description here](https://i.stack.imgur.com/iNlI5.png)](https://i.stack.imgur.com/iNlI5.png)\n\n_Styling_\n\n```\n#tabbrowser-tabs {\n    visibility: collapse;\n}\n#titlebar {\n    max-height: 16px;\n}\n#TabsToolbar .titlebar-buttonbox-container {\n    transform: scale(.55) translateY(-10px) translateX(38px);\n}\n```\n\n### Without Titlebar: Drag Space Only (No Window Buttons)\n\n_Result (Ubuntu)_ [![enter image description here](https://i.stack.imgur.com/eivaA.png)](https://i.stack.imgur.com/eivaA.png)\n\n_Styling_\n\n```\n#tabbrowser-tabs {\n    visibility: collapse;\n}\n#titlebar {\n    max-height: 5px;\n}\n#TabsToolbar .titlebar-buttonbox-container {\n    display: none;\n}\n```\n\n### Without Titlebar: Inline Window Buttons (With Drag Box)\n\n_Result (Ubuntu)_ [![enter image description here](https://i.stack.imgur.com/y8rmQ.png)](https://i.stack.imgur.com/y8rmQ.png) [![enter image description here](https://i.stack.imgur.com/6CWZ4.png)](https://i.stack.imgur.com/6CWZ4.png)\n\n_Styling_\n\n```\n#tabbrowser-tabs {\n    visibility: collapse;\n}\n#navigator-toolbox {\n    display: flex;\n    flex-flow: row wrap;\n}\n#titlebar {\n    order: 1;\n    max-width: 146px;\n}\n#titlebar #TabsToolbar {\n    background-color: var(--toolbar-bgcolor);\n    background-image: var(--toolbar-bgimage)\n}\n#titlebar #TabsToolbar .titlebar-spacer {\n    background-color: rgba(0,0,0,0.05);\n    margin: 3px;\n    border-radius: 25%;\n    cursor: grab;\n}\n#titlebar #TabsToolbar .titlebar-spacer[type=\"pre-tabs\"] {\n    display: none;\n}\n#nav-bar {\n    order: 0;\n    width: calc(100% - 146px);\n}\n#PersonalToolbar {\n    order: 2;\n}\n```\n\nFor MacOS, you can also set\n\n```css\n#nav-bar {\n    order: 0;\n    width: 100%;\n}\n```\n\nThis will move the window buttons on the bookmarks tab, making the top bar look more complete.\n\n---\nThis css removes tabs, but preserves menu and minimize/maximize/close buttons.\n\n```\n#tabbrowser-tabs {  visibility: collapse;}\n```\n\nWorks in FF version 83\n\n---\n\nHaving gone through most of the solutions in this thread, here is my personal recommendation if you want to achieve following:\n\n-   Use Tree Style Tab and want to hide horizontal tabs\n-   Show a window handler because you need to move a lot\n-   Across macOS and Windows 10\n\n\u003e ![macOS](https://i.stack.imgur.com/XTwtQ.jpg)\n\u003e \n\u003e macOS\n\n\u003e ![Windows 10](https://i.stack.imgur.com/1OPZg.png)\n\u003e \n\u003e Windows 10\n\n---\n\n### Step 1: Enable CSS\n\n1.  Visit `about:config` → Click `Accept the Risk and Continue`\n2.  Search `toolkit.legacyUserProfileCustomizations.stylesheets`\n3.  Toggle it, making the value `true`\n\n### Step 2: Find CSS\n\n1.  Visit `about:support` in the address bar\n2.  Find table `Application Basics` → find row `Profile Folder` → click button `Show in Folder` or `Open Folder`. It usually points to\n    -   `/Users/your-alias/Library/Application Support/Firefox/Profiles/your-id.Default User` for macOS\n    -   _Or_ `C:\\Users\\your-alias\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\your-id.Default User` for Windows\n3.  In this Profile Folder create a new folder called `chrome` or open it if it already exsits.\n4.  In the `chrome` folder create `userChrome.css` or edit it if it already exists.\n\n### Step 3: Edit CSS\n\n1.  Edit `userChrome.css` and please add:\n\n```\n/* To hide horizontal bars */\n#main-window[tabsintitlebar=\"true\"]:not([extradragspace=\"true\"]) #TabsToolbar {\n    opacity: 0;\n    pointer-events: none;\n}\n\n#main-window:not([tabsintitlebar=\"true\"]) #TabsToolbar {\n    visibility: collapse !important;\n}\n```\n\n2.  (_Optional_) If you want to have a smaller header of `Tree Style Tab` on the sidebar, please add:\n\n```\n/* For Tree Style Tab */\n#sidebar-header{\n  font-size: 1em !important;\n  padding: 5px 2px 5px 13px !important;\n}\n```\n\n### Step 4: Enable title Bar and restart\n\n1.  Enable \"Title Bar\" mode\n    \n    -   Right click on Toolbar → select `Customize Toolbar...`\n    -   _Or_ by Click the menu (☰) → `More tools` → `Customize Toolbar...`\n2.  At the left bottom of the screen, check the \"Title Bar\" checkbox → Submit right bottom button `Done`\n    \n3.  Restart.\n\n---\n# Todoist\n\n```todoist\n{\n\"name\": \"My Tasks\",\n\"filter\": \"today | overdue\"\n}\n```\n---\n\n# firefox tabs\n[[firefox tabs]]\n\nhttps://superuser.com/questions/1424478/can-i-hide-native-tabs-at-the-top-of-firefox\n\n```css\n\n```\n\nabout:config\n\nEnsure the config `toolkit.legacyUserProfileCustomizations.stylesheets` is set to `true`\n\nhttps://github.com/piroor/treestyletab/issues/1525#issuecomment-344372874\n\n\nhttps://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data get to directory","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Other/Hugo-Notes":{"title":"Hugo Notes","content":"\n\n# HUGO \n\nhttps://marco.kamner.eu/notes/technology/obsidian/publish-obsidian-to-personal-site/ \n\nhttps://www.youtube.com/watch?v=c7vpcqA6SEQ decent hugo guide\n\nthese need to be in .bashrc\n```\nexport PATH=$PATH:/usr/local/go/bin\nexport GOPATH=/home/ben/go\nexport PATH=$GOPATH/bin:$PATH\n\n```\n- linux \nstatic site generator\nmight need to download the latest deb from the repo for latest version\n\nneeds brew to install\n\nhttps://discourse.gohugo.io/t/quartz-urls-spaces-hyphens-relative-path-problem-replace-not-working-on-index/35268/21\nquarts discussion\n\nuse this \nhttps://stackoverflow.com/questions/33353618/can-i-use-homebrew-on-ubuntu/56982151\n\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)\"\n\nexport brew=/home/linuxbrew/.linuxbrew/bin\n\ntest -d ~/.linuxbrew \u0026\u0026 eval $(~/.linuxbrew/bin/brew shellenv)\n\ntest -d /home/linuxbrew/.linuxbrew \u0026\u0026 eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\n\ntest -r ~/.profile \u0026\u0026 echo \"eval \\$($(brew --prefix)/bin/brew shellenv)\" \u003e\u003e~/.profile     // for ubuntu and debian\n```\n\nhttps://www.howtogeek.com/683199/how-to-use-the-hugo-static-site-generator-on-linux/\n- actually use the above, no need for brew use apt\n\nhttps://github.com/khalednassar/obyde - obsidian to hugo\n\nhttps://www.ernestchiang.com/en/posts/2021/my-hugo-workflow/\n\nhttps://www.youtube.com/watch?v=A6xpOpKBZ2k guide for hugo with markdown\n\n---\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Other/My-Portfolio-Stuff/Portfolio-Hub":{"title":"Portfolio Hub","content":"\n\n\n[Ben's Art and Design - YouTube](https://www.youtube.com/@bensartanddesign2181/featured)\n\n[benshurts - GitHub](https://github.com/benshurts)\n\n[ArtStation - Ben Shurts](https://www.artstation.com/benshurts)\n\ncontact:\nbenjaminshurts@gmail.com\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Other/My-work":{"title":"","content":"https://www.youtube.com/watch?v=IactoPBRTSk\nhttps://www.youtube.com/watch?v=V6l7PxmEbuM\nhttps://www.youtube.com/watch?v=fd7HDUGPcf8\nhttps://www.youtube.com/watch?v=3gDGLcvpMCY\nhttps://www.youtube.com/watch?v=iTcnd4kbw9Y\nhttps://www.youtube.com/watch?v=6fqiSL9ywn8\nhttps://www.youtube.com/watch?v=rXboTVnaipo\nhttps://www.youtube.com/watch?v=cWdnN6VbI10\nhttps://www.youtube.com/watch?v=iXVbq0JBbjM\nhttps://www.youtube.com/watch?v=jf_G3g48HGA\nhttps://www.youtube.com/watch?v=NpNnOG9W6gA\nhttps://www.youtube.com/watch?v=NQV5soXMOJw\nhttps://www.youtube.com/watch?v=lDjLKo46BX8\nhttps://www.youtube.com/watch?v=34bV0pC3Zww\nhttps://www.youtube.com/watch?v=N4Fujm7Gzr4\nhttps://www.youtube.com/watch?v=u6K6PG5trB8\nhttps://www.youtube.com/watch?v=pRdDpmAowWs\nhttps://www.youtube.com/watch?v=jdxPfnmE5Dg\nhttps://www.youtube.com/watch?v=j6_kyGBqx4s","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Pasted-image-20220303193021.png":{"title":"","content":"","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/CSharp/C-Sharp-Async":{"title":"C Sharp Async","content":"\n\nhttps://www.youtube.com/watch?v=WY-mk-ZGAq8\n\n\n\nAsync is better than coroutins for a few reasons.\nChaining coroutines becomes very messy.\n\n- you can just directly call asyncs unlike coroutines where you have to call startcoroutine.\n\n\n#### convert coroutine to async\n\n```c#\npublic IEnumerator RotateForSeconds(float duration)\n{\n\tvar end = Time.time + duration;\n\twhile (Time.time \u003c end)\n\t{\n\t\ttransform.Rotate(new Vector3(1,1)*Time.deltatime * 150);\n\t\tyield return null;\n\t}\n}\n```\n\n\n```c#\npublic async void RotateForSeconds(float duration)\n{\n\tvar end = Time.time + duration;\n\twhile(Time.time \u003c end)\n\t{\n\t\ttransform.Rotate(new Vector3(1,1)*Time.deltatime * 150);\n\t\tawait Task.Yield();\n\t}\n}\n```\n\n\nchaining coroutines suck\n\nachieving sequential actions with async is much easier.\n\n\nwith async we can return a Task (similar to a promise in javascrip)\n\nif its async monitor how long it's elapsed\n\n```c#\npublic async Task RotateForSeconds(float duration)\n{\n\tvar end = Time.time + duration;\n\twhile(Time.time \u003c end)\n\t{\n\t\ttransform.Rotate(new Vector3(1,1)*Time.deltatime * 150);\n\t\tawait Task.Yield();\n\t}\n}\n```\n\nC# knows you want to return a task so there's no need for a return statement\n\n\ncoroutine version\n```c#\npublic class ShapeManager : MonoBehaviour \n{\n\t[SerializedField] private Shape[] _shapes;\n\t\n\tpublic void BeginTest()\n\t{\n\t\tfor(var i = 0;i \u003c _shapes.Length; i++)\n\t\t{\n\t\t\t_shapes[i].RotateForSeconds(1+1*i); //\n\t\t}\n\t}\n}\n```\nasync version\n```c#\npublic class ShapeManager : MonoBehaviour \n{\n\t[SerializedField] private Shape[] _shapes;\n\t\n\tpublic async void BeginTest()\n\t{\n\t\tfor(var i = 0;i \u003c _shapes.Length; i++)\n\t\t{\n\t\t\tawait _shapes[i].RotateForSeconds(1+1*i); //added await\n\t\t}\n\t}\n}\n```\n\nwhat if we want to run it syncronously but we want to make sure they are all done before we continue\n\n```c#\npublic class ShapeManager : MonoBehaviour \n{\n\t[SerializedField] private Shape[] _shapes;\n\t[SerializedField] private GameObject _finishedText;\n\t\n\tpublic async void BeginTest()\n\t{\n\t\t_finishedText.SetActive(false);\n\t\t\n\t\t\n\t\tvar tasks = new Task[_shapes.Length];//task array stores all tasks to wait for\n\t\tfor(var i = 0;i \u003c _shapes.Length; i++)\n\t\t{\n\t\t\tawait _shapes[i].RotateForSeconds(1+1*i); //added await\n\t\t}\n\t\t\n\t\t\n\t\tawait Task.WhenAll(tasks);\n\t\t\n\t\t_finishedText.SetActive(true);\n\t}\n}\n```\n\n\n\nseparate syncronous and asyncronously\n\n```c#\npublic class ShapeManager : MonoBehaviour \n{\n\t[SerializedField] private Shape[] _shapes;\n\t[SerializedField] private GameObject _finishedText;\n\t\n\tpublic async void BeginTest()\n\t{\n\t\t_finishedText.SetActive(false);\n\t\t\n\t\t\n\t\tawait _shapes[0].RotateForSeconds(1+1*0);\n\t\t\n\t\tvar tasks = new Task[_shapes.Length];//task array stores all tasks to wait for\n\t\tfor(var i = 0;i \u003c _shapes.Length; i++)\n\t\t{\n\t\t\tawait _shapes[i].RotateForSeconds(1+1*i); //added await\n\t\t}\n\t\t\n\t\t\n\t\tawait Task.WhenAll(tasks);\n\t\t\n\t\t_finishedText.SetActive(true);\n\t}\n}\n```\n---\n# Async functions can return data\n\n```c#\nasync Task\u003cint\u003e GetRandomNumber()\n{\n\tvar randomNumber = Random.Range(100,100);\n\tawait Task.Delay(randomNumber);\n\treturn randomNumber;\n}\n```\n\n* unity uses float seconds for coroutine\n* in C# time uses milliseconds so async uses miliseconds\n\nso to use unity units in an async do this \n```c#\n(int)(delay*1000)\n```\n\n\n\n```c#\npublic async void BeginTest()\n{\n\tvar randomNumber = GetRandomNumber();\n\t\n\tprint(randomNumber);\n}\n\n\nasync Task\u003cint\u003e GetRandomNumber()\n{\n\tvar randomNumber = Random.Range(100,100);\n\tawait Task.Delay(randomNumber);\n\treturn randomNumber;\n}\n```\n\n### because the above didn't await it return the task function instead of the value\n\nuse the -is- keyword to check on the task\n\n```c#\n\nrandomnumnber.is---\n```\n\n\nfixed version with the await function\n\n```c#\npublic async void BeginTest()\n{\n\tvar randomNumber = await GetRandomNumber(); //await\n\t\n\tprint(randomNumber);\n}\n\n\nasync Task\u003cint\u003e GetRandomNumber()\n{\n\tvar randomNumber = Random.Range(100,100);\n\tawait Task.Delay(randomNumber);\n\treturn randomNumber;\n}\n```\n\nIf you are trying to call an async function not from an async you cant use the -await- keyword, there are alternatives.\n\n```c#\npublic async void BeginTest()\n{\n\tvar randomNumber = await GetRandomNumber().GetAwaiter().GetResult();\n\t\n\tprint(randomNumber);\n}\n\n\n```\n\nanother way that looks clear but there is a catch\n\n\n```c#\npublic async void BeginTest()\n{\n\tvar randomNumber = await GetRandomNumber().Result;\n\t\n\tprint(randomNumber);\n}\n```\n\nthe catch:\n\tif you have a try catch loop in the async function you are trying to call it will just give you a generic error\n\t\n```c#\nasync Task\u003cint\u003e GetRandomNumber()\n{\n\ttry {\n\t\t\n\t}\n\tcatch(Exception e) {\n\t\tconsole.WriteLine(e);\n\t\tthrow;\n\t}\n}\n\n```\n\n\n\u003eThere are certainly other important caveats to mention with async. You were constantly getting NREs in the background. This being caused by the fact that tasks do not respect Unity Object lifetimes. Coroutines will stop when the object that started them is destroyed. Tasks will continue on regardless, and this means that they can continue outside of playmode, and through scene changes. To counter this you need to use cancellation tokens, and they're somewhat difficult to grasp. In reality almost every task you start should really take a cancellation token. Not only this, but there are situations you can get yourself into that completely silence exceptions occurring within a task-returning method. If you do not await a task it will not appropriately throw exceptions created within it. This can make bugs difficult to track down, and if you're not familiar with that fact it's a minefield.","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/CSharp/C-Sharp-Delegates":{"title":"C Sharp Delegates","content":"# Delegates\n---\ndelegates can help you write cleaner more modular and more functional code.\n\n\u003eDelegates are defined as a function signature and return type but without any implementation.\n\n```c#\npublic delegate void TestDelegate();//returns void, takes no params\n\nprivate TestDelegate testDelegateFunction;\n\nprivate void Start() {\n\ttestDelegateFunction = MyTestDelegateFunction;\n\t\n\ttestDelegateFunction();\n}\n\nprivate void MyTestDelegateFunction() {\n\tDebug.Log(\"test\");\n}\n\n```\n\nLike [[C Sharp Events#Subscribers|events]] you need to subscribe delegates to functions. you can do this with *=*.\n\n\u003eMake sure everything matches the right signature.\n\nyou can subscribe different functions to delegate with different behaviors, this can allow for nicely decoupled code. \n\n```c#\npublic delegate void TestDelegate();//returns void, takes no params\n\nprivate TestDelegate testDelegateFunction;\n\nprivate void Start() {\n\ttestDelegateFunction = MyTestDelegateFunction;\n\t\n\ttestDelegateFunction();\n\t\n\ttestDelegateFunction = MySecondTestDelegateFunction;\n\t\n\ttestDelegateFunction();\n}\n\nprivate void MyTestDelegateFunction() {\n\tDebug.Log(\"test\");\n}\nprivate void MySecondTestDelegateFunction()\n{\n\tDebug.Log(\"second test\");\n}\n```\n\nDelegates can also be multicast. Meaning multiple functions can be subscribed to one delegate. in this case us *+=* for the later subscriptions.\n\n```c#\npublic delegate void TestDelegate();//returns void, takes no params\n\nprivate TestDelegate testDelegateFunction;\n\nprivate void Start() {\n\ttestDelegateFunction = MyTestDelegateFunction;\n\t\n\ttestDelegateFunction += MySecondTestDelegateFunction;\n\t\n\ttestDelegateFunction();\n}\n\nprivate void MyTestDelegateFunction() {\n\tDebug.Log(\"test\");\n}\nprivate void MySecondTestDelegateFunction()\n{\n\tDebug.Log(\"second test\");\n}\n```\n\njust like events we can remove subscriptions with *-=*.\n\n\nDelegates can have any return type and parameters.\n\n```c#\npublic delegate bool TestBoolDelegate(int i);\n\nprivate TestBoolDelegate testBoolDelegateFunction;\n\nprivate void Start()\n{\n\ttestBoolDelegateFunction = MyTestBoolDelegateFunction;\n\tDebug.Log(testBoolDelegateFunction(1));\n}\n\nprivate bool MyTestBoolDelegateFunction(int i){\n\treturn i \u003c 5;\n}\n```\n\n\u003e !! when you define a delegate you need to give a name to the parameter, so just putting *int* won't work.\n\u003e However, when you define a delegate function you *don't* actually have to use the same name.\n\n\u003e!! Under the hood: when we assign a delegate it's actually doing this\n\u003e ```c#\n\u003e testDelegateFunction = new testDelegate(MyTestDelegateFunction);\n\u003e ```\n\n---\n\n# Anonymous Methods\n\nAnother way to create and assign delegates is through anonymous methods.\n\n```c#\ntestDelegateFunction = delegate () { Debug.Log(\"Anon Method\") };\n```\n\nthe anon needs to match the signature.\n\nAnother way is to use a *Lambda* expression. \n\n```c#\ntestDelegateFunction = () =\u003e { Debug.Log(\"lambda Method\") };\n```\n\n```c#\n\ntestBoolDelegateFunction = (int i) =\u003e { return i \u003c 5; };\n```\n\nif you have a single statement then you can ","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/CSharp/C-Sharp-Events":{"title":"C Sharp Events","content":"# Events\nused to decouple various systems and clean up your code.\n\n\u003eJust a way to say something happened without caring who listens or responds.\n\nEvents fundamentally are made up of two things...\n\n| Publishers | Subscribers |\n|------------|-------------|\n\n---\n\n## Publishers\n\nPublishers can publish an event that can be subscribed to my zero or multiple things.\n\n\u003eThe publisher does not know or care about the subscribers\n\n---\n\u003e!! This ties into clean coding principles and design patterns like [MVP](https://medium.com/@ankit.sinhal/mvc-mvp-and-mvvm-design-pattern-6e169567bbad). The idea behind these types of things are to separate parts of the code, like the logic from the visuals. Create Reusable code!\n\n---\n\nThere are many ways to do events in c# and a few more in unity.\n\nfirst you need to declare an event type in the code.\n\n```c#\npublic event EventHandler OnSpacePressed; //simple event\n\nprivate void Start(){\n\n}\n\nprivate void Update(){\n\t//how to call an event\n\tif (Input.GetKeyDown(KeyCode.Space)) {\n\t\t//space pressed\n\t\tOnSpacePressed(this,EventArgs.Empty);//this will fire off the event\n\t\t//this will fire off a null exception. we need to first check if it's null\n\t}\n}\n\n\n```\nThe above throws a null error. Remember to check for null beforehand.\nchecked if null - verbose\n```c#\nif(OnSpcaePressed != null) \n{\n\tOnSpacePressed(this,EventArgs.Empty);\n}\n```\nThe syntactical sugar method to shorten the null check is more often used these days.\n```c#\nOnSpacePressed?.Invoke(this,EventArgs.Empty);\n```\n\nEventHandler is a simple [[C Sharp Delegates|Delegate]] with two fields. Is customary to use the work *on* before the event. \n\n\u003e! Remember that the event is a delegate with fields. Easy to forget because the declaration often doesn't show it.\n\n\u003e[EventHandler](https://docs.microsoft.com/en-us/dotnet/api/system.eventhandler?view=net-6.0) is the c# class that handles events. Make sure you use *system*\n\n---\n\n## Subscribers\n\nThe subscriber need to match the *signature* of the event. This means it needs to accept and return the same types of data.\n\n\u003e! The concept of signatures is used in other parts of C# like interfaces.\n\n\n```c#\nprivate void Testing_OnSpacePressed(Object sender, EventArgs e) {\n\tDebug.Log(\"Event Fired\");\n}\n```\n\nThen, in order to access the event, we need to subscribe. Subscribing usually happens when you bring the object into memory and you should unsubscribe when you unload the object. often in the *onenable* and *ondisable* methods.\n\nThe syntax for subscribing uses the following\n```\n+= // subscribe\n-= // unsubscribe\n```\n\n```c#\nprivate void OnEnable(){\n\ttestevent += TesteventFunc;\n}\nprivate void OnDisable(){\n\ttestevent -= TesteventFunc;\n}\n```\n\n```c#\npublic event EventHandler OnSpacePressed; //simple event\n\nprivate void Start(){\n\tOnSpacePressed += Test_OnSpacePressed; // this is how we subscribe the function to the event\n}\n\nprivate void Update(){\n\t//how to call an event\n\tif (Input.GetKeyDown(KeyCode.Space)) {\n\t\t//space pressed\n\t\tOnSpacePressed?.Invoke(this,EventArgs.Empty);\n\t}\n}\n\nprivate void Testing_OnSpacePressed(Object sender, EventArgs e) {\n\tDebug.Log(\"Event Fired\");\n}\n\n```\n\nThe above is still just in one class. The real benefits are when we listen from somewhere else.\n\nIn this case we just need references to the right object.\n\n---\n\n### EventArgs\n\nEventargs is the standard way to pass more information through the event.\n\nThe standard process is a bit verbose.\n\nfirst we need to make a class the derives from eventargs.\n\n```c#\n\npublic event EventHandler OnSpacePressed;\npublic class OnSpacePressedEventArgs : EventArgs {\n\t// here we define whatever fields we want\n\tpublic int spaceCount;\n}\n```\n\nOnce we define the fields in the custom class. We need to add the type to the evenhandler with \u003c\u003e.\n\n```c#\n\npublic event EventHandler\u003cOnSpacePressedEventArgs\u003e OnSpacePressed;\npublic class OnSpacePressedEventArgs : EventArgs {\n\t// here we define whatever fields we want\n\tpublic int spaceCount;\n}\n\nprivate void update() {\n\tif(Input.GetKeyDown(KeyCode.Space)) {\n\t\t//space pressed\n\t\tspaceCount++;\n\t\tOnSpacePressed?.Invoke(this,new OnSpacePressedEventArgs { spaceCount = spaceCount });\n\t}\n}\n```\n\nThen in the event subscriber you need to make sure to match the signature.\n\n```c#\nprivate void Start()\n{\n\tTestingEvents testingEvents = GetComponent\u003cTestingEvents\u003e();\n\ttestingEvents.OnSpacePressed += TestingEvents_OnSpacePressed;\n}\n\n\nprivate void TestingEvent_OnSpace(object sender, TestingEvents.onSpacePressedEventArgs e)\n{\n\tDebug.log(\"Space! \"+ e);\n\tTestingEvents testingEvents = GetComponent\u003cTestingEvents\u003e();\n\ttestingEvents.OnSpacePressed -= TestingEvents_OnSpacePressed;\n}\n```\n\n\u003e You do *not* need to use *eventhandler*, event's work in other ways.\n\nWe can define our own *delegate* to act as our event handler.\n\n```c#\n\npublic delegate void TestEventDelegate(float f);\n\n```\n\n\n\u003e Delegates are essentially function signatures\n\nNow we can make an event of the same type as our delegate.\n\n```c#\npublic event TestEventDelegate OnFloatEvent;\n```\n\nwe can fire off this event in the same way as the other events.\n\n```c#\nOnFloatEvent?.Invoke(5.5f);\n```\n\nAnd we subscribe in same way too.\n\n```c#\ntestingEvents.OnFloatEvent += TestingEvents_OnFloatEvent;\n\nprivate void TestingEvents_OnFloatEvent(float f)//same signature as deligate\n{\n\tDebug.Log(\"float \"+ f);\n}\n```\n\n---\n\n### Actions\n\nwe can also use the *Action* event type. Action is just a *delegate* that returns *void*.\n\n```c#\npublic event Action OnActionEvent;\n\n```\n\nAction also has a generic version.\n\n```c#\npublic event Action\u003cbool,int\u003e OnActionEvent;\n```\n\nwe fire of the event in the same way.\n\n```c#\nOnActionEvent?.Invoke(true,5);\n```\n\nand we subscribe the same way\n\n```c#\ntestingEvents.OnActionEvent += TestingEvents_OnActionEvent;\n\nprivate void TestingEvents_OnActionEvents(bool arg1,int arg2){\n\tDebug.Log(arg1,arg2);\n}\n```\n---\n\n# Unity Events\n\nThese are show in the editor\n\n```c#\npublic UnityEvent OnUnityEvent;\n```\n\nInvoked the same as the others.\n\n```c#\nOnUnityEvent?.Invoke();\n```\n\n\u003eThis will show up in the inspector\n\n\u003e! These can only take one argument in the editor.\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/CSharp/C-Sharp-Generics":{"title":"C Sharp Generics","content":"# Generics\n\n---\n\nThese help you write code that defines type on execution.\n\n```c#\nlist\u003cint\u003e\n```\n\n```c#\nprivate int[] createArray(int firstElement,int secondElement) {\n\treturn new int[] { firstElement, secondElement };\n}\n```\n\nThe above is a simple problem. But what if you wanted to solve the exact same problem but with a different data type of array. The standard way is duplicate the function. \n\n```c#\nprivate int[] CreateArray\u003cT\u003e(T firstElement, T secondElement)\n{\n\treturn new T[] { firstElement, secondElement }\n}\n\nCreateArray\u003cstring\u003e(\"one\",\"two\");\n```\n\n\u003eIn some cases the compiler is smart enough to infer the type. so you can omit the \u003c\u003e on the function call.\n\nYou can also define multiple generic types\n\n```c#\ncustomFunction\u003cT1,T2\u003e()\n```\n\nGenerics are often used in Action and Func deligates. See [[C Sharp Delegates]] and [[C Sharp Events]]\n\n```c#\nprivate Action\u003cint,string\u003e thing;\nprivate Func\u003cbool,string\u003e func;\n\nprivate delegate void MyActionDelegate\u003cT1,T2\u003e(T1 t1,T2 t2);\nprivate delegate TResult MyFuncDeligate\u003cT1,TResult\u003e(T1 t1);\n```\n\n\nGenerics can be used in other places as well. Such as classes.\n\n\n```c#\npublic class main {\n\tMyClass\u003cint\u003e myClass = new MyClass\u003cint\u003e();\n}\n\n\npublic class MyClass\u003cT\u003e {\n\tpublic T value;\n\t\n\tprivate int[] CreateArray(T firstElement, T secondElement)\n\t{\n\t\treturn new T[] { firstElement, secondElement }\n\t}\n}\n```\n\nWe can also use interfaces to constrain types. \n\n```c#\npublic class main {\n\tMyClass\u003cint\u003e myClass = new MyClass\u003cint\u003e();\n}\n\npublic class MyClass\u003cT\u003e where T : IEnemy {\n\tpublic T value;\n\t\n\tpublic MyClass(T value){//constructor\n\t\tvalue.Damage();\n\t}\n\tprivate int[] CreateArray(T firstElement, T secondElement)\n\t{\n\t\treturn new T[] { firstElement, secondElement }\n\t}\n}\n\npublic interface IEnemy {\n\tvoid Damage();\n}\n```\n\nnow we can create classes that are specific from the constructors.\n\n```c#\npublic class EnemyMinion : IEnemy {\n\tpublic void Damage() {\n\t\tDebug.Log(EnemyMinion.Damage);\n\t}\n}\n```\n\nThere are a bunch more constraints. struct, class, new, you can also combine constraints.\n\nYou can also use Generics in [[C Sharp Interfaces|interfaces]]\n\n```c#\npublic interface IEnemy\u003cT\u003e {\n\tvoid Damage(T t);\n}\n```\nthen when the interfaces are implemented you must also define the type.\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/CSharp/C-Sharp-Hub":{"title":"C-Sharp Hub","content":"\n[[notes/Programming/CSharp/C Sharp Async]]\n\n[[notes/Programming/CSharp/C Sharp Events]]\n\n[[notes/Programming/CSharp/C Sharp Generics]]\n\n[[notes/Programming/CSharp/C Sharp Delegates]]\n\n[[notes/Programming/CSharp/C Sharp Interfaces]]\n\n[[notes/Programming/CSharp/C Sharp Nested Classes]]\n\n[[notes/Programming/CSharp/Unity Resources]]\n\n[[notes/Programming/CSharp/Unity SubScenes]]\n\n[[notes/Programming/CSharp/Unity Sciptable Objects]]\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/CSharp/C-Sharp-Interfaces":{"title":"C Sharp Interfaces","content":"# Interfaces\n\nHelps us write cleaner reusable code that lets up define code to be reused and decouple code.\n\nThe interface works as a contract. Which means if a class is subscribed to that interface they must implement those functions. We don't define an accessor or implimentation. Everything is public in an interface by default.\n\n```c#\n\npublic interface IMyInterface {\n\tvoid TestFunction();\n}\n```\n\n\u003e! In C# 8 you can actually define a default implementation for functions in an interface.\n\n```c#\npublic class MyClass : IMyInterface {\n\tpublic void TestFunction() {\n\t\tDebug.Log(\"MyClass.TestFunction()\");\n\t}\n}\n```\n\nwe can also call functions from an interface.\n\n```c#\npublic class Testing : MonoBehaviour {\n\n\tprivate void TestInterface(IMyInterface myInterface) {// expects an IMyInterface object, anything that implements the interface can go here\n\t\tmyInterface.TestFunction();//\n\t}\n\n\tprivate void Start() {\n\t\tMyClass myClass = new MyClass();\n\t\tTestInterface(myClass);// once we've instanciated the class we can use the testinterface function because the class implements the interface\n\t}\n}\npublic class MyClass : IMyInterface {\n\tpublic void TestFunction() {\n\t\tDebug.Log(\"MyClass.TestFunction()\");\n\t}\n}\npublic interface IMyInterface {\n\tvoid TestFunction();\n}\n```\n\n\u003e one of the useful things with interfaces is that you can implement more than one. With inheritance you can only inherit one parent.\n\nStructs cannot inherit from a baseclass but they can implement interfaces.\n\nInterfaces can implement interfaces!\n\n# header\n\n\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/CSharp/C-Sharp-Nested-Classes":{"title":"C Sharp Nested Classes","content":"\n# Nested Classes\n\nThis is an example of a partial command pattern. In C# nested classes can be used as data models.\n\n\n\n```c#\nusing System;\nusing System.Collections;\nusing System.Collections.Genhttps://www.youtube.com/watch?v=5N2tPBTyHO4eric;\nusing UnityEngine;\nusing UnityEngine.Events;\n\npublic class CollectEffects : MonoBehaviour\n{\n    [SerializeField] private GameObject targetObject;\n    \n    [SerializeField] private List\u003cParticleSystem\u003e ParticleSystems;\n    [SerializeField] private List\u003cAnimationData\u003e _animationsList;\n    \n    public enum Animations\n    {\n        BOUNCE,\n        SHRINK,\n        SPIN\n    }\n    //private FXTools fx;\n    private Tweener twn;\n\n    public void StartAnimation(UnityAction action)\n    {\n        StartCoroutine(animation((() =\u003e action?.Invoke())));\n    }\n    \n    \n    private IEnumerator animation(Action action)\n    {\n        \n        foreach (var data in _animationsList)\n        {\n            foreach (var fx in data.FX) \n            {\n                FXTools.RunCommand(fx);\n            }\n            if (!data.skip)\n            {\n                yield return StartCoroutine(Tween(targetObject, data));\n            }\n            \n        }\n        action?.Invoke();\n    }\n    private IEnumerator Tween(GameObject obj,AnimationData data)\n    {\n        //var \n        float elapsedTime = 0f;\n        //Vector3 endScale = new Vector3(data., end, end);\n        Quaternion currentRot = obj.transform.localRotation;\n        Vector3 startScale = obj.transform.localScale;\n        Vector3 startPosition = obj.transform.localPosition;\n        var lerp = 0f;\n        while (elapsedTime \u003c data.Duration)\n        {\n            if (data.spinable)\n            {\n                transform.Rotate(0, data.spinValue * Time.deltaTime, 0);\n            }\n            else\n            {\n                obj.transform.localRotation = Quaternion.Lerp(currentRot,Quaternion.Euler(data.targetRotation), Time.deltaTime/data.Duration );\n                \n            }\n            \n            obj.transform.localPosition = Vector3.Lerp(startPosition, data.targetLocalPosition, (elapsedTime / data.Duration));\n            obj.transform.localScale = Vector3.Lerp(startScale, data.targetScale, (elapsedTime / data.Duration));\n\n\n            \n            \n            elapsedTime += Time.deltaTime;\n\n\n            yield return null; // yield one frame\n        }\n        //action?.Invoke();\n    }\n    [System.Serializable]\n    public class AnimationData\n    {\n        public Vector3 targetScale, targetRotation, targetLocalPosition;\n        public float spinValue;\n        public bool spinable,skip;\n        public float Duration;\n        public List\u003cFXTools.FXCommand\u003e FX;\n    }\n}\n\n```\n\n```c#\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic static class FXTools\n{\n\n    public enum FXCommands\n    {\n        BURST,\n        START,\n        STOP,\n        DESTROY,\n        PAUSE\n    }\n    public static void BURST(ParticleSystem s, int c)\n    {\n        s.Emit(c);\n    }\n\n    public static void START(ParticleSystem s)\n    {\n        s.Play();\n    }\n\n    public static void STOP(ParticleSystem s)\n    {\n        s.Stop();\n    }\n\n    public static void DESTROY(ParticleSystem s)\n    {\n        s.Destroy();\n    }\n\n    public static void PAUSE(ParticleSystem s)\n    {\n        s.Pause();\n    }\n\n    public static void RunCommand(FXCommand command)\n    {\n        switch (command.commands)\n        {\n            case FXCommands.STOP :\n                STOP(command.s);\n                break;\n            case FXCommands.START :\n                START(command.s);\n                break;\n            case FXCommands.BURST :\n                BURST(command.s,command.value);\n                break;\n            case FXCommands.PAUSE :\n                PAUSE(command.s);\n                break;\n            case FXCommands.DESTROY :\n                DESTROY(command.s);\n                break;\n            \n        }\n    }\n\n    [System.Serializable]\n    public class FXCommand\n    {\n        public ParticleSystem s;\n        public FXCommands commands;\n        public int value;\n    }\n\n}\n```\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/CSharp/Unity-Resources":{"title":"Unity Resources","content":"\nhttps://www.youtube.com/watch?v=2sqyd-qtHYg IEnumerables","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/CSharp/Unity-Sciptable-Objects":{"title":"Unity Scriptable Objects","content":"","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/CSharp/Unity-SubScenes":{"title":"Unity SubScenes","content":"# Unity Subscenes\n\n---\n\nUses DOTS, lets you dynamically load and unload parts of the world.\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/Databases/SurrealDB":{"title":"SurrealDB intro","content":"\nSurrealDB is a newer database format that tries to marry the pros from SQL and noSQL databases.\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/Javascript/Javascript-Hub":{"title":"Javascript Hub","content":"\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/Programming-Hub":{"title":"Programming Hub","content":"\n# General Programming\n\n## Python\n\n[[notes/Programming/Python/Python Hub]]\n\n## C Sharp\n\n[[notes/Programming/CSharp/C-Sharp Hub]]\n\n## Rust\n\n[[notes/Programming/RUST/Rust Hub]]\n[[notes/Programming/RUST/Rust-bucket]]\n\n[[notes/Unity/Game-Development]]\n\n---\n# Game Development\n\n[[notes/Unity/Unity Hub]]\n\n\n---\n# Other\n\n## Devops\n\n[[notes/devops/Dev Ops Hub]]\n\n\n\n\n## Houdini Vex\n\n[[notes/3D-Modeling/Houdini/houdini-vex/Houdini Vex Hub]]","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/Python/Python-Hub":{"title":"Python Hub","content":"\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Booleans-in-Rust":{"title":"Booleans in Rust","content":"\n## Boolean\n\ndefined as -\u003e bool\n\nliterals are -\u003e true or false\n\n\u003eBooleans are not integers so don't try and use math on them, it wont work, \n\u003eTo do this you must cast them\n\u003e```rust\n\u003etrue as u8\n\u003e```\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Cargo-Clippy-for-Rust":{"title":"Cargo Clippy for Rust","content":"\n## Cargo Clippy\n\nthis tools helps to check for idiomatic code.\nit also checks for correctness errors, even if code compiles.\nIt also checks for complexity.\n- when it knows for sure that you're code is too complex.\n- clippy can only guess that at a few things.\n\n\u003eif you want to ignore warnings you need to add an allow attributes.\n\n```rust\n#[allow(clippy::too_many_arguments)]\n```\n\n\u003eyou can copy it right out of the clippy output just change from warn to allow.\n\nGoogle clippy lints to learn about good code.","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Character-Types-in-Rust":{"title":"Character Types in Rust","content":"\n## Character type\n\nchar\n\ncould be anything from sound, icon, action, letters.\n\nchar consists of 4 bytes.\ntypically makes characters UCS-4/UTF-32 types\n\ncharacter literals are specified using single quotes\n```rust\nlet letter ='a';\n```\n\n*characters are mostly useless, use strings instead*\n\n\n\u003eStrings DO NOT use chars in them as they are UTF-8\n\n\n## Character type\n\nchar\n\ncould be anything from sound, icon, action, letters.\n\nchar consists of 4 bytes.\ntypically makes characters UCS-4/UTF-32 types\n\ncharacter literals are specified using single quotes\n```rust\nlet letter ='a';\n```\n\n*characters are mostly useless, use strings instead*\n\n\n\u003eStrings DO NOT use chars in them as they are UTF-8\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Closures-in-Rust":{"title":"Closures in Rust","content":"\n\n\n# Closures\n\ninspired by ruby and smalltalk\n\n\n\nclosure is an anonymous function that can borrow or capture data from the scope it is nested in.\n\na parameter list between two pipes without type notions and the function between two curly braces.\n\n```rust\n| x,y | { x + y } \n```\n\nA closure will borrow references to values in the enclosing scope. This creates an anonymous function you can call later.\n\n```rust\nlet add = |x,y|{x+y};\nadd(1,2);\n```\n\nyou don't need parameters.\n```rust\n||{x+2}\n```\n\nclosures can also take references to values in the current scope.\n```rust\nlet s = \"🍓\".to_string();\nket f = || {\n\tprintln!(\"{}\",s);\n};\n\nf(); // prints 🍓\n```\n\nthe compiler won't let us move this to another thread because this might live longer than another thread. But there is move support for closures to remedy this.\n\n```rust\nlet s = \"🍓\".to_string();\nket f = move || {\n\tprintln!(\"{}\",s);\n};\n\nf(); // prints 🍓\n```\n\nthis forces the closure to move any variables into itself and take ownership of them.\n\n\u003efunctional programming, closures will be your friend\n\u003e ```rust\n\u003e let mut v = vec![2,4,6];\n\u003e v.iter()\n\u003e \t.map(|x|x*3)\n\u003e \t.filter(|x|*x\u003e10)\n\u003e \t.fold(0,|acc,x| acc+x);\n\u003e ```","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Collections-in-Rust":{"title":"Collections in Rust","content":"\n# Collections\n\n## Vectors\n\n ```\n Vec\u003cT\u003e -\u003e Vector.\n ```\n \n Vecors are the most commonly used collection.\n \n Define the vector type in the \u003c\u003e\n \n ```rust\nlet mut v: Vec\u003ci32\u003e = Vec::new();\nv.push(2);\nv.push(4);\nv.push(6);\nlet x = v.pop(); // x is 6\nprintln!(\"{}\",v[1]); //prints 4\n```\n\nVectors are used in rust where you would use lists or arrays in other languages.\nvectors act like a stack so push appends item to end, pop removes item from end and returns it.\n\nBecause vectors store items of known size next to each other in memory you can index into one just like an array.\n\nif index is out of bounds rust will panic. \n\nThere is a macro called vec that makes creating vectors from literal values easy.\n\n```rust\nlet mut v = vec![2,4,6];\n```\n\nthere are tons of methods to manipulate vectors in the standard library.\n\n## Hashmaps\n\n```rust\nHashMap\u003cK,V\u003e\n```\n\nIn other languages this might be called a dictionary. Its used to insert remove and look up values by key and value.\n\n```rust\nlet mut h: HashMap\u003cu8,bool\u003e = HashMap::new();\nh.insert(5,true);\nh.insert(6,false);\nlet have_five = h.remove(\u00265).unwrap();\n```\n\nyou can insert entries with insert\nremove entries with the remove method.\n\n\u003eremove returns and enum called option!\n\nthere are other methods to get stuff from these.\n\n## VecDeque\n\nUses ring buffer to implement a double ended queue\ncan efficiently add or remove items from the front and back. everything else is a little less efficient than regular vector.\n\n## LinkedList\n\nquick at adding or removing items at an arbitrary point in the list but slow doing anything else.\n\n## HashSet\n\nA hashing implementation of a set that performs set operations really efficiently.\n\n## BinaryHeap\n\nLike a priority queue that always pops off the max value.\n\n## BTreeMap \u0026 BTreeSet\n\nalternate map and set implementations using a modified binary tree. \nUsually only choose these over the hash variants if you need the map keys or set variants to always be sorted.\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Control-Flow-in-Rust":{"title":"Control Flow in Rust","content":"\n# Control Flow\n\ncontrol flow is great in rust\n\n\u003eRust doesn't like type coersion\n\u003ethe condition must resolve to a boolean\n\nchaining condition \nelse if\nfinish with else\n\n\n\n```rust\nif num == 5 {\n\tmsg = \"five\";\n} else if num == 4 {\n\tmsg = \"four\";\n} else {\n\tmsg = \"other\";\n}\n```\n\nstatements don't return values\nexpressions do. This means we change the above code to this\n\n```rust\nmsg = if num == 5 {\n\t\"five\"\n} else if num == 4 {\n\t\"four\"\n} else {\n\t\"other\"\n};\n```\n\nnote:\n- there are no semicolons after the branch vals, returns vals from blocks\n- can't use return for this purpose, return only applies to function bodies\n- all blocks return the same type\n- semicolon at the end of the if expression, especially when you return things from it.\n\n\u003eNo ternary operators\n\nin rust since if is an expression you can do this\n\n```rust\nnum = if a { b } else { c };\n```\n\nnested version is still readable (unlike ternary operators)\n\n```rust\nnum = if a { \n\tif x { y } else { y } \n} else {\n\tc \n};\n```\n\n## Unconditional Loop\n\nloops with no conditions.\n\n### breaks\n\neven these must end at some point so the *break* statement ends it.\n\n```rust\nloop {\n\tbreak;\n}\n```\n\n! what if you want to break out of a nested loop?\n\n```rust\n'bob: loop {\n\tloop {\n\t\tloop {\n\t\t\tbreak `bob;\n\t\t}\n\t}\n}\n```\n\n\u003eannotate the loop you want to break out of.\n\u003eannotations have use a backtick at the beginning as the identifier. \n\u003e\\`bob\n\u003ethen tell break which code you want to break out of.\n\n### Continue is similar\n\n```rust\n`bob: loop {\n\tloop {\n\t\tcontinue `bob;\n\t}\n}\n```\n\nby itself it continues the innermost loop unless you give it a label.\n\n### while loops\n\n```rust\nwhile dizzy() {\n\t//do stuff\n}\n```\n\n\u003ewhile loops are mostly just syntactic sugar for putting a negated break condition at the top of an unconditional loop.\n\u003e```rust\n\u003eloop{\n\u003e if !dizzy() { break }\n\u003e //do stuff\n\u003e}\n\u003ethere is also no *do while* in rust but can be achieved by moving the break condition to the bottom of the loop.\n\u003e```rust\n\u003eloop {\n\t\u003e//do stuff\n\t\u003eif !dizzy() { break }\n\u003e}\n\n### For loop\n\nrusts for loop iterates over any iterable value\ncompound and collection types will have a few different ways to get the iteration value from.\n\n\u003ethe iterator you use determines which items are returned and the order they are returned in\n\n```rust\nfor num in [1,2,3].iter() {\n\t//do stuff with num\n}\n```\n\niter - iterates over all items in collection in order and randomly if collection is unordered.\n\n\u003efor functional programming you can stack methods like map filter and fold and they will be lazily evaluated.\n\nthe for loop can take a pattern to destructure the items it revieves and bind the inside parts to variables just like the *let* statement, only in this case the variables are local to the body of the for loop.\n\n```rust\nlet array = [(1,2),(3,4)];\nfor (x,y) in array.iter(){\n\t// do stuff with x and y\n}\n```\n\nfunctional for loop\nusing iterators is often faster than for loops.\niterator adapters are available. it can take actions on values as they pass through it.\n\n\n```rust\nlet v = vec![6,7,8];\nv.into_iter().for_each(|num|println!(\"{}\",num));\n\nlet total: i32 = v\n\t.into_iter() // 6 7 8\n\t.map(|x: i32| x * 3) // 18 21 24\n\t.filter(|y: i32| *y % 2 == 0) // 18 24\n\t.sum();\n```\nmap takes ownership, filter takes a reference.\n\n\u003e! Always check the documentation !\n\n\u003e Always end chain of iterator adapter with an iterator consumer! like .for_each\n\n```rust\nlet v = vec![6,7,8];\nv.into_iter().for_each(|num|println!(\"{}\",num));\n\n\nv.into_iter() // 6 7 8\n\t.map(|x: i32| x * 3) // 18 21 24\n\t.filter(|y: i32| *y % 2 == 0) // 18 24\n\t.sum(); // error if cannot infer type use turbofish\n```\n\nTurbofish\n```rust\n::\u003c\u003e\n```\ngoes between the method name and the argument\n\n```rust\n.sum::\u003ci32\u003e()\n```\n\n```rust\nlet v = vec![6,7,8];\nv.into_iter().for_each(|num|println!(\"{}\",num));\n\n\nv.into_iter() // 6 7 8\n\t.map(|x: i32| x * 3) // 18 21 24\n\t.filter(|y: i32| *y % 2 == 0) // 18 24\n\t.sum::\u003ci32\u003e(); // error if cannot infer type use turbofish\n```\n\n## Collect\n\ncollect will gather all the items and put them into a new collection. Collect doesn't know which collection type you would like. you need to tell it with \u003c\u003e after the vec.\n\nyou can also use underscore, because collect only needs to know the type of the container, it already knows the type of item. helpful for large item types.\n```rust\n\u003ci32\u003e -\u003e \u003c_\u003e\n\nlet v2: Vec\u003c_\u003e = v;\n```\nyou can also use a turbo fish at the collect section.\n\n```rust\nlet v = vec![6,7,8];\nlet v2 = v\n\t.into_iter() // 6 7 8\n\t.map(|x: i32| x * 3) // 18 21 24\n\t.filter(|y: i32| *y % 2 == 0) // 18 24\n\t.collect::\u003cVec\u003c_\u003e\u003e(); // vec![18,24]\n\n```","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Documentation-in-Rust":{"title":"Documentation in Rust","content":"\n\n# Documentation\n\nuse the command \ncargo doc --no-deps --open\nthe extra stuff only generates docs for your code.\n\nlinks are wikilinks adding backticks makes it formatted different.\nyou can use standard like formats too \\[\\]()\nwith a relative or absolute path if not in scope\n\nthere are also inner code documentation comments\n\n```\n//! inner\n/*! !*/ inner block\n/// outer\n/** **/ outer block\n```\n\nuser inner for libraries and modules, everything else use outer.","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Enums-in-Rust":{"title":"Enumns in Rust","content":"\n# Enums\n\nEnums in rust are more like algebraic datatypes in haskel than C like enums.\n\n```rust\nenum Color {\n\tRed,\n\tGreen,\n\tBlue,\n}\n```\n\nthe real power of enum comes from associating data and methods with variants.\n\n```rust\nenum DispenserItem {\n\tEmpty, //no data\n\tAmmo(u8),//single type of data\n\tThings(String,i32),//tuple of data\n\tPlace {x:i32,y:i32},//anon struct of data\n}\n```\n\nan enum is sort of like an union in C but so much better. The value can be any number of these variants.\n\n```rust\nuse DispenserItem::*;\nlet item = Things(\"hat\".to_string(),7);\n```\n\n\u003eIt can be any one of these data types, *but* only one at a time\n\nYou can implement functions and methods with enums!\nYou can also use generics with enums!\n\n\u003eOption is a generic enum in the standard lib that you will use all the time.\n\u003e```rust\n\u003eenum Option\\\u003cT\u003e {\n\u003e\t\tsome(T),\n\u003e\t\tNone,\n\u003e\t}\n\u003e```\n\u003eThe T means any type\n\u003eThis means that something is either absent or present\n\nbecause enums can represent all sorts of data you need to use patterns to examine them.\nIf you want to check for a single variant you need to use the *if let* expression.\n\n*if let* takes a pattern that will match one of the variants. If the pattern does match then the condition is true and variables inside the pattern are created for the scope of the if let block. \n\n\n```rust\nif let Some(x) = my_variable {\n\tprintln!(\"Value is {}\",x);\n}\n```\nThis isn't as nice if you need to handle all the variants at once.\nIn that case you need to use the *match* expression.\n\n```rust\nmatch my_variable {\n\tsome(x) =\u003e {\n\t\tprintln!(\"value is {}\",x);\n\t},\n\tNone =\u003e {\n\t\tprintln!(\"no value\");\n\t},\n}\n```\n\nmatch (variable whos type supports matching)\nmatch requires you to write a branch arm for every possible outcome. \n\na single underscore can be a default or any match\n\n```rust\nmatch my_var {\n\t_ =\u003e {\n\t\tprintln!(\"default or any match\");\n\t},\n}\n```\n\nany expression will do for a branch arm. \n\n\u003eAll branch arms must return nothing or the same type\n\n\u003eIf the expression ends in a curly brace then you have to put a semicolon after the closing brace. If you don't use the return value of the braced expression then rust lets you cheat and leave off the semicolon.\n\n```rust\nlet x = match my_variable {\n\tSome(x) =\u003e x.squared() + 1,\n\tNone =\u003e 42,\n}\n```\n\nhere's how you could create a none type of an option.\n\n```rust\nlet mut x: Option\u003ci32\u003e = None;\n```\n\n if you ever use option with a concrete type then the compiler will infer the type, which means you can leave the type annotation off most of the time.\n \n ```rust\nlet mut x: Option\u003ci32\u003e = None;\nx = Some(5);\n```\nno type annotation\n ```rust\nlet mut x = None;\nx = Some(5);\n```\n\nhandy helper methods\n\n ```rust\nlet mut x = None;\nx = Some(5);\nx.is_some();// returns true if x is the sum variant\nx.is_none();// returns opposite of is some\nfor i in x { // for in \n\tprintln!(\"{}\", i);\n}\n```\n\noption implements the in to iterator trait so you can also treat is similar to a vector of 0 or 1 items and put it in a for loop\n\n## Result Enum\n\n```rust\n#[must_use] //compiler warning to silently drop result\nenum Result\u003cT,E\u003e {\n\tok(T),\n\tErr(E),\n}\n```\n\nResult is often use in IO or user interaction because failure is a possibility there.\n\n\u003eRust strongly encourages you to make conscious decisions about warning and errors\n\n```rust\nuse std::fs::File;\n\nfn main(){\n\tFile::open(\"foo\");\n}\n```\n\nthis returns a result because file might not be opened correctly.\n\n\u003eIgnoring errors is not a safe thing to do\n\nthe simplest thing you could choose to do is to unwrap result with unwrap method. if the result is an ok then this gives you the file struct that you wanted. if result is error then program crashes.\n```rust\nuse std::fs::File;\n\nfn main(){\n\tlet res = File::open(\"foo\");\n\tlet f = res.unwrap();\n}\n```\nanother option is the *expect* method. same as unwrap but adds your custom message to the crash output.\n\n```rust\nuse std::fs::File;\n\nfn main(){\n\tlet res = File::open(\"foo\");\n\tlet f = res.expect(\"error message\");\n}\n```\n\njust like option there are helper methods that return booleans depending on things.\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Floats-in-Rust":{"title":"FLoats in Rust","content":"\n## Floats\n\nf32 - f64\n\nf32 has less precision is often faster and not supported by all architectures\n\nf64 has much more precision but is very very slow on 32 bit architectures\n\nFloating point literals follow the standard and look like this \n3.14159\n- no suffix required\n- must have digit before the dot\n\n\u003e you can optionally include the type as a suffix\n\n```rust\nlet x = 5_u16; // underscores here improve readability\nlet y = 3.14_f32;\n\n```\n\u003e! Underscores can improve readability\n\n\n\u003ecan be useful if you want to pass a literal to a generic function that could accept multiple numeric types","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Functions-in-Rust":{"title":"Functions in Rust","content":"\n\n## Functions\n\nmain function is the starting action\n\nfn = pronounced \"fun\"\n\nuse snakecase for functions =\u003e fn do_stuff()\n\n\u003e Functions don't have to appear in file before code that calls them!\n\nparameters are defined as\nname : type =\u003eparm:i32\nseparated by commas\n\nthe return type is declared after wards\n-\u003e i32\n\n```rust\nfn do_stuff(parm:i32) -\u003e i32\n```\n\nyou can return a value using the *return* keyword.\nthere is also a shorthand.\n\nif you leave the semicolon off of the last line in the block it gets returned.\n\n\u003eno support for named arguments at call site - provide all vals in correct order\n\u003eno support for variable numbers as arguments or different types for same arg --- but macros do. \n\u003ename of macros end in !","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Idiomatic-Rust":{"title":"Idiomatic Rust","content":"\n# Idiomatic Rust\n\nUsing rust properly, and with the correct grammer.\n\nRust has built in tools to help with this\n\nrustfmt\n\ncargo rustfmt\n\nthis will help with white space and stuff. This is basically the rust styleguide.\n\nwont check for compiles\n\nconfigure IDE to use rustfmt on save.\n\n\u003e If you want to change how rustfmt works you can put a .rustfmt.toml at the root of your project","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Integer-literals-in-Rust":{"title":"Integer Literals in Rust","content":"\n### Integer literals\n\n| name          | value      |\n| ------------- | ---------- |\n| Decimal       | 10000      |\n| Hex           | 0xdeadbeef |\n| Octal         | 0o77543211 |\n| Binary        | 0b1111011  |\n| Byte(u8 only) | b'A'       |\n\n\u003e Term u8 and byte are used interchangably in rust\n\n\n\n\n| name          | value       |\n| ------------- | ----------- |\n| Decimal       | 1_000_000   |\n| Hex           | 0xdead_beef |\n| Octal         | 0o7754_3211 |\n| Binary        | 0b1111_011  |\n| Byte(u8 only) | b'A'        |\n\n\u003e Underscores are ignored and can be used for readability","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Iterators-in-Rust":{"title":"Iterators in Rust","content":"\n\n## Iterators\n\n```rust\nv.into_iter() // consumers v returns owned items\nv.iter() // returns immutable references (just look at collection)\nv.iter_mut() // returns mutable references (you can modify values in place)\n```\n\nthere are other iterators for other things like hash_maps\n\nthere are syntactic sugar forms for often used iterators.\n\n```rust\nv.into_iter() -\u003e for _ in v\nv.iter() -\u003e for _ in \u0026v\nv.iter_mut() -\u003e for _ in \u0026mut v\n```\n\nhow to empty collection without consuming collection itself\n\n*drain()* method\nit takes different arguments depending on which collection\nit return iterator that takes ownership of some or all items in collection,  removing the items from collection but leaving the collection intact.\n\n```rust\nv.drain(..) // vector drain .. empty out entire collection\nh.drain() // hashmaps drain doesn't take arguments, returns all kv pairs\n\n```\ntakes a range\n\n#### ranges in loops\n\nthe syntax is two dots separating the beginning and end.\n\n```rust\nfor num in 0..50 {\n\t// do stuff with num\n}\n```\nstart is inclusive, end is exclusive.\n\nif ..= is used the end will be inclusive\n\n```rust\nfor num in 0..=50 {\n\t// do stuff with num\n}\n```\n\n\n# IO\n\nstdn -\u003e program -\u003e stdout\n\nread and writing for programs","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Libraries-and-Modules-in-Rust":{"title":"Libraries and Modules in Rust","content":"\n# Libraries and modules\n\nthe main library is lib.rs inside that if you declare a module via pub mod mymodule; (ended in semicolon) then rust will look for rs file in the same directory as the name of the module. Nested modules use directories\n\ncreate executable binary for the library\n place file in bin/ of src/ like bar.rs or something","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Memory-Safety-in-Rust":{"title":"Memory Safety in Rust","content":"\n## Memory Safety\nrust guarantees memory safety at compile time\n\n\u003e**Variables must be initialized**\n\n```rust\nfn main()\n{\n\tlet enigma: i32;\n\tif true {\n\t\tenigma = 42;\n\t} else {\n\t\tenigma = 7;\n\t}\n}\n```\n\nthis works because the compiler can tell what a value would be at runtime.","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Modules-in-Rust":{"title":"Modules in Rust","content":"\n\n## Modules\n\u003esimilar to python modules\n\nAll items in libraries are private by default\n*even* to binaries in same project.\n\n```rust\npub fn greet(){\n\tprintln!(\"hi\");\n}\n\nuse lib\n\nfn main(){\n\thello::greet(); //works\n}\n\n```\n\nadd *use* statement to bring into scope libraries and things. just like python.\n\n\u003estandard library is always available\n\nfind documentation\ngoogle rust standard ---thing---","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Ownership-in-Rust":{"title":"Ownership in Rust","content":"\n# Ownership\n\nthis is what sets rust apart from other systems languages\n\n! Each value has an owner\n\nOnly one owner per value, ( there may be borrowers )\n\nwhen value goes out of scope it gets dropped.\n\n```rust\nlet s1 = String::from(\"abc\");\nlet s2 = s1;\nprintln!(\"{}\",s1);\n```\n\nthis will throw a compiler error\n\n```bash\n5 |     let s1 = String::from(\"abc\");\n  |         -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait\n6 |     let s2 = s1;\n  |              -- value moved here\n7 |     println!(\"{}\",s1);\n  | ^^ value borrowed here after move |\n  | --------------------------------- |\n```\n\nThis is because of memory stuff\n\n| Stack      | Heap          |\n| ---------- | ------------- |\n| In order   | Unordered     |\n| Fixed-size | Variable-size |\n| LIFO       | Unordered     |\n| Fast       | Slow          |\n\nWhat does this have to do with a value being moved?\n\n```rust\nlet s1 = String::from(\"abc\");\n```\n\n| Stack      | Heap |\n| ---------- | ---- |\n| ptr-\u003e      | a    |\n| len=3      | b    |\n| capacity=3 | c    | \n\n\u003ewhen values go out of scope it just considers them uninitialized even though they are technically still on the stack\n\n! More than a shallow copy -\u003e it's a *MOVE* \n\nlets copy a value with *clone* method\n\n\u003eClone copies the stack and heap data and adjusts the copies pointer to point to the correct heap data. in other languages this might be called a deep copy\n\n```rust\nlet s1 = String::from(\"abc\");\n\n```\n\n\u003eRust reserves the *copy* term for when **ONLY** stack data is being copied\n\nWhen a value is dropped\n1. the destructor (if there is one) is immediately run\n2. Free Heap (immediately)\n3. Stack is Immediately popped\n\nthat means **NO** leaks, or dangling pointers\n\nExample of this\n\n```rust\nlet s1 = String::from(\"abc\");\ndo_stuff(s1);\nprintln!(\"{}\",s1); // this would throw error, moved!\n\nfn do_stuff(s: String) {\n\t//do stuff\n}\n```\n\ns1 is moved so it wouldn't be usable outside do_stuff anymore\n\none option is to move it back after we are done.\n```rust\nlet mut s1 = String::from(\"abc\");\ns1 = do_stuff(s1);\nprintln!(\"{}\",s1); // this would throw error, moved!\n\nfn do_stuff(s: String) -\u003e String {\n\t//do stuff\n\ts\n}\n```\n\n! This isn't usually what you want\n\nfor most cases you should use references and borrowing","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/Packages-crates-in-Rust":{"title":"Packages-Crates in Rust","content":"\n\n## Packages - (crates)\n\nonce you have specified the name of package you want to use you need to go the `Cargo.toml` and add the package to the dependencies section.\n\n```toml\n[dependencies]\nrand = \"0.1.2\" //rand package for generating nums\n\n```\n\n## scalar types\n\n| Unsigned | Signed |\n| -------- | ------ |\n| u8       | i8     |\n| u16      | i16    |\n| u32      | i32    |\n| u64      | u64    |\n| u128     | i128   |\n| usize    | isize  |\n\nnumber of bits the int has, consistent accross all platforms\n\nexcept for usize\nsize of platforms pointer type can represent every memory address in the process\n\u003eAlso used to index into array or vector\n\nsigned ints are the same\n\nmax isize is upper bound of object and array size.\n\u003ethis lets it be used to calc differences between pointers\n\u003eand be able to address every byte within a value like a struct\n\n\nthe default is i32 because its generally the fastest\n\n\u003ejust because rust supports all types doesn't mean all types are supported on all architectures!","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/RUST-graphics":{"title":"Rust graphics resources","content":"\n\nVector Graphics\nhttps://www.youtube.com/watch?v=2Ng5kpDirDI\n\nhttps://www.youtube.com/watch?v=AI7SLCubTnk rasterization\n\nhttps://smallcultfollowing.com/babysteps/blog/2015/04/06/modeling-graphs-in-rust-using-vector-indices/ \n\nhttps://github.com/nrc/r4cppp/blob/master/graphs/README.md\n\nhttps://github.com/Lakret/gir/blob/graphs/graphs/src/graph.rs#L47-L145\n\nhttps://www.youtube.com/watch?v=QkuNmL7tz08\n\nhttps://www.youtube.com/watch?v=2q1AzGUwL7M smart pointers\n\n","lastmodified":"2023-01-14T00:13:43.75906102Z","tags":null},"/notes/Programming/RUST/RUST-graphs":{"title":"Graphs in Rust","content":"\n\n# Rust Graphs\n\nhttps://www.youtube.com/watch?v=3DLrUNbKhjQ\n\n```rust\nuse std::collections::HashMap;\n\n  \n\n////\n\n/// VId = vertex ID\n\n/// E = Edge\n\n/// V = Vertex\n\n/// Adjacency = edges\n\npub struct Graph\u003cVId, E = (), V = ()\u003e {\n\nvertices: HashMap\u003cVId, V\u003e,\n\nadjacency: HashMap\u003cVId, Vec\u003c(VId, E)\u003e\u003e,\n\n}\n\n  \n  \n\nimpl\u003cVId, E, V\u003e Graph\u003cVId, E, V\u003e\n\nwhere\n\nVId: Eq + Hash,\n\nV: Hash,\n\n{\n\npub fn new() -\u003e Graph\u003cVId, E, V\u003e {\n\nGraph { vertices: HashMap::new(), adjacency: HashMap::new() }\n\n}\n\npub fn push_vertex(se;f: \u0026mut Graph\u003cVId, E, V\u003e, vid: VId, vertex: V) {\n\nself.vertices.insert(vid,vertex);\n\n}\n\npub fn push_edge(self: \u0026mut Self, from: VId, to: VId, edge: E) {\n\nlet adjacent_to_from = self.adjacency.entry(from).or_default();\n\nadjacent_to_from.push((to, edge));\n\n}\n\n}\n\n  \n\n// pub trait Simple_Graph\u003cVId,E,()\u003e {\n\n// where\n\n// VId: Eq + Hash,\n\n// {\n\n// pub fn push_vid(self: \u0026mut Self, vid: VId) {\n\n// self.vertices.insert(vid, ());\n\n// }\n\n// }\n\n// }\n\n  \n\n/// MAZE\n\n  \n\nGraph\u003cVId = \u0026str, E = Direction\u003e {\n\nvertices: {\n\n\"A\": (),\n\n\"B\": (),\n\n\"C\": (),\n\n\"D\": (),\n\n},\n\nadjacency: {\n\n\"A\": [(\"B\", Right)],\n\n\"B\": [(\"E\", Down)],\n\n},\n\n}\n```\n\nhttps://www.youtube.com/watch?v=UEAg4qCALb8 mazes\n\nhttps://www.youtube.com/watch?v=q6paRBbLgNw\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/RUST-resources":{"title":"Rust Resources","content":"\nhttps://www.youtube.com/watch?v=CSk_QRE7GKg functional programming in rust\n\nhttps://www.youtube.com/watch?v=A3AdN7U24iU\n\nhttps://www.youtube.com/watch?v=2EtqETHofmU MVP\n\nhttps://www.youtube.com/watch?v=MSi3E5Z8oRw lifetimes\n\nhttps://www.youtube.com/watch?v=2mwwYbBRJSo ownership\n\nhttps://www.youtube.com/watch?v=rAl-9HwD858 more lifetimes\n\nhttps://www.youtube.com/watch?v=2mwwYbBRJSo threadpool lifetimes and stuff\n\nhttps://www.youtube.com/watch?v=rAl-9HwD858 annotations\n\nhttps://www.youtube.com/watch?v=q6paRBbLgNw declaritive macros\n\nhttps://www.youtube.com/watch?v=DkMwYxfSYNQ pinning\n\nhttps://www.youtube.com/watch?v=eLNAMEoKAAc generic concurrency primitive\n\nhttps://www.youtube.com/watch?v=iVYWDIW71jk subtyping\n\nhttps://www.unadulterated-faff.com/articles/2020/02/03/fixing-rust-compilation-issues-caused-by-missing-packages.html\n\n\nimportant tools\nhttps://github.com/rust-windowing/winit\nhttps://github.com/rust-windowing/glutin\nhttps://github.com/dylanede/cassowary-rs\nhttps://github.com/servo/webrender\nhttps://github.com/benshurts/limn\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Random-Rust-Notes":{"title":"Random Rust Notes","content":"\nconverting a string to number\n\nvariable are immutable by default, to change them later you have to set it to be mutable\n- this is for safety and concurrency and speed\n\nconstants\n\n`const CAPITAL_CASE: i32 = 9.0;`\n\ndeclare capital type assignment\n\nthese can be global\nthese are even faster than immutable vars","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/References-and-Borrowing-in-Rust":{"title":"References and Borrowing in Rust","content":"\n# References and Borrowing\n\ninstead of moving our variable lets use a reference\n\n```rust\nlet s1 = String::from(\"abc\");\ndo_stuff(\u0026s1);\nprintln!(\"{}\",s1); // this works fine now\n\n\nfn do_stuff(s: \u0026String) {\n\t//do stuff\n}\n```\n\nin this case the reference gets *moved* into the function, and when the function is done and reference moves out of scope it gets dropped instead of the original.\n\n\u003eUnder the hood:\n\u003ewhen we create a reference to s1 rust creates a pointer to s1.\n\n\n\u003eIn Rust pointers are almost never talked about.\n\u003erust automatically handles creation and destruction.\n\u003eand uses a concept called *lifetimes* to ensure that references are always valid. The compiler won't let you create a reference that outlives the data it is referencing, and you can never point to *null*.\n\n## mutable references\n\nreferences default to immutable. *even* if the value being referenced is mutable.\n\n!!! if you make a mutable reference of a mutable value -\u003e **Then** you can change value of the original from the reference.\n\n```rust\nlet mut s1 = String::from(\"abc\");\ndo_stuff(\u0026mut s1);\nprintln!(\"{}\",s1); // this works fine now\n\n\nfn do_stuff(s: \u0026mut String) {\n\t//do stuff\n\ts.intert_str(0,\"Hi, \");//this works because of tht dot\n}\n```\n\nwhy didn't we have to de-reference to mutable reference to alter s in the do_stuff.\n\n\u003eIn Rust the dot operator on method or field auto-dereferences down to the actual value\n\nmanual dereferencing \n\n```rust\nlet mut s1 = String::from(\"abc\");\ndo_stuff(\u0026mut s1);\nprintln!(\"{}\",s1); // this works fine now\n\n\nfn do_stuff(s: \u0026mut String) {\n\t//do stuff\n\t(*s).intert_str(0,\"Hi, \");//this works because of tht dot\n}\n```\n\n(\\*s)\n\nvaribale X\n\n| mutable | Immutable |\n| ------- | --------- |\n| \u0026mut x  | \u0026x        |\n\n\nthis also applies to types\n\nif i32 is the type of value then:\n\n| Immutable | Mutable  |\n| --------- | -------- |\n| \u0026i32      | \u0026mut i32 |\n\nif variable is a mutable ref to val, then dereferenceing x gives you mutable access to value.\nif x immutable reference to val, then dereferencing gives you immutable access to val.\n\n\u003e! Special safety rule\n\u003eAt any given time, you can have either exactly one mutable reference, or any number of immutable reference, this rule applies across all threads.\n\u003eThis creates thread safety.\n\nAll these rules are enforced by the compiler.\n\n\u003econsume value means the value wont be usable after the function call\n\n---","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-Crates-info":{"title":"Rust Crates Info","content":"\n# Crates\nonce published it can't be removed. Don't publish useless packages.\n\nPackage names need to be unique.\n\n1. log into crate.io\n2. go to account settings\n\t1. get the api access token\n3. then run cargo login and use the access token\n\n## how to prepare package for publishing\n\nthe cargo.toml needs to be filled out\n\nthen you run cargo publish\n\ndocs.rs automatically publishes the documentation","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-Data-Structures":{"title":"Data Structures in Rust","content":"\nhttps://www.youtube.com/watch?v=1ZwbHo5HSzg\u0026list=PLTgRMOcmRb3M0h-KpgqJuKl5WG4KgtZio\n\n\ndata structures are critical to good programming\n\nwe can use pathfinding\n\nECS\n\n\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-Hub":{"title":"Rust Hub","content":"\n[[notes/Programming/RUST/Rust-bucket]]\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-Modules":{"title":"Rust Modules","content":"\nmodules can be separate files\n\n```rust\nmod file;\n```\n\nor in curly braces\n\n```rust\nmod test {\n\n}\n```\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-Modules-and-Project-Structure-by-Gian-Lorenzetto-PhD-CodeX-Medium":{"title":"rust modules and project structure","content":"\n\n![](https://miro.medium.com/max/1400/0*canxw_IfsJZStetm)\n\nPhoto by [Alain Pham](https://unsplash.com/@alain_pham?utm_source=medium\u0026utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium\u0026utm_medium=referral)\n\n## Exploring the structure of a Rust project, crates, modules, visibility and what the heck is a prelude!?\n\nIn **th**e [first post](https://gian-lorenzetto.medium.com/rust-a-beginner-cheat-sheet-8fd7b0ce49de) of **th**is **se**ries I **di**scussed **ge**tting **Ru**st **in**stalled **an**d **cr**eating **ne**w **pr**ojects **us**ing **th**e _**ca**rgo_ **cl**i **to**ol. In **th**is **po**st I **wa**nt to **ge**t **in**to a **bi**t **mo**re **de**tail **ab**out **th**e **st**ructure of a **Ru**st **pr**oject, **an**d **di**g **in**to **th**e **co**ncept of **cr**ates, **mo**dules **an**d **pr**eludes.\n\nIf **yo**u **ha**ven’t, [go get Rust installed](https://gian-lorenzetto.medium.com/rust-a-beginner-cheat-sheet-8fd7b0ce49de) **an**d **ma**ke **su**re **yo**u **ca**n **cr**eate a **ne**w **pr**oject —\n\n`$ cargo new hello_rust`\n\nAs a **re**minder, **th**is **wi**ll **cr**eate a **ne**w _**bi**nary **ap**plication_, so **yo**u **ca**n **ru**n **th**is at a **te**rminal **wi**th —\n\n`$ cargo run`\n\n**Yo**u **sh**ould **se**e **ca**rgo **fi**rst **co**mpile **an**d **th**en **ru**n **yo**ur **ap**plication, **wi**th **th**e **fo**llowing **wr**itten to **th**e **co**nsole —\n\n```\n$ cargo run“Hello, World!”\n```\n\n**Gr**eat! In **th**e **re**st of **th**is **ar**ticle, I’m **go**ing to **di**scuss —\n\n-   The default Rust project structure\n-   The _**ma**in.rs_ file\n-   Rust _**mo**dules_ (based on files)\n-   Rust modules and _**vi**sibility_\n-   Rust modules (based on folders)\n-   What’s a _**Pr**elude_?\n\n**Fi**rst up, **le**t’s **un**pack **wh**at **yo**u’ve **go**t in **th**e **de**fault **pr**oject.\n\n## The Default Rust Project\n\n**Th**e **de**fault **Ru**st **co**nsole **ap**plication is **pr**etty **ba**sic, **bu**t **th**e **fo**lder **st**ructure is _**in**tentional_ **an**d **sh**ould **no**t be **ch**anged —\n\n```\nhello_rust  - src    - main.rs  - .gitignore  - Cargo.toml\n```\n\n**No**te **yo**u **ca**n **us**e **th**e `cargo check` **co**mmand to **va**lidate **yo**ur **fo**lder **st**ructure **an**d _**Ca**rgo.**to**ml_ **fi**le at **an**y **ti**me. If **yo**u do **ma**ke a **mi**stake (in **th**is **ca**se I **re**named `src` to `src1`), **Ca**rgo **wi**ll **he**lpfully **te**ll **yo**u **wh**at **yo**u **ne**ed to do —\n\n```\nerror: failed to parse manifest at `/Users/gian/_working/scratch/hello_rust/Cargo.toml`Caused by: no targets specified in the manifest either src/lib.rs, src/main.rs, a [lib] section, or [[bin]] section must be present\n```\n\nIn **ou**r **ca**se we **mu**st **ha**ve a `src/main.rs`, **si**nce we **cr**eated a _**bi**nary_ _**ap**plication_. If we **ha**d **cr**eated a **ne**w **li**brary (**pa**ssing `--lib` to **th**e `cargo new` **co**mmand), **th**en **ca**rgo **wo**uld **ha**ve **cr**eated **th**e `src/lib.rs` **fo**r us **in**stead.\n\n**Th**e _**Ca**rgo.**lo**ck_ **fi**le is an **au**tomatically **ge**nerated **fi**le **an**d **sh**ould **no**t be **ed**ited. **Si**nce **Ca**rgo **in**itialises a **Gi**t **re**po **fo**r **yo**u by **de**fault, it **al**so **in**cludes a ._**gi**tignore_, **wi**th **on**e **en**try —\n\n```\n/target\n```\n\n**Th**e `target` **fo**lder is **au**tomatically **cr**eated on `cargo build` **an**d **co**ntains **th**e **bu**ild _**ar**tefacts_, in a _**de**bug_ or _**re**lease_ **fo**lder (**de**pending on **th**e **bu**ild **co**nfiguration, **re**call **th**at **th**e **de**fault is _**de**bug_).\n\nIf **yo**u’re **cr**oss-**co**mpiling to **an**other **pl**atform, **th**en **yo**u **wi**ll **se**e an **ad**ditional **le**vel **sp**ecifying **th**e **ta**rget **pl**atform, **th**en **th**e **bu**ild **co**nfiguration.\n\n**La**stly, **th**ere is **th**e **ma**in.rs **fi**le, **wh**ich is **th**e **en**try **po**int **fo**r **ou**r **ap**plication. **Le**t’s **ta**ke a **cl**ose **lo**ok at it’s **co**ntents.\n\n## The _**ma**in.rs_ file\n\n**Th**e **de**fault _**ma**in.rs_ **fi**le is **qu**ite **st**raight **fo**rward —\n\n```rust\nfn main() {  println!(\"Hello, world!\");}\n```\n\nWe **ha**ve **th**e `main()` **fu**nction, **th**e **ma**in **en**try **po**int **fo**r **ou**r **ap**plication, **wh**ich **ju**st **pr**ints “**He**lo, **Wo**rld!” to **st**andard **ou**tput.\n\n**Yo**u **ma**y **ha**ve **no**ted **th**e `!` in `println!` — **th**is **in**dicates **th**at **th**e `println` **fu**nction is a **Ru**st **ma**cro (an **ad**vanced **Ru**st **sy**ntax **fe**ature) **th**at **yo**u **ca**n **sa**fely **ig**nore **fo**r **th**e **mo**st **pa**rt, **ot**her **th**an to **re**member **th**at it’s **no**t a **re**gular **fu**nction.\n\n**Wh**ile **yo**u **co**uld **no**w **ha**ppily **wr**ite **al**l **yo**ur **Ru**st **co**de in **th**e _**ma**in.rs_ **fi**le, **th**at’s **ge**nerally **no**t **id**eal ;) **Th**at’s **wh**ere **mo**dules **co**me in!\n\n## Modules\n\n**Le**t’s **st**art **of**f by **ad**ding a **st**ruct to **th**e _**ma**in.rs_. We’ll **pr**ogressively **mo**ve **th**is **co**de **fu**rther **fr**om **th**e **ma**in **fi**le, **bu**t **fo**r **no**w **ju**st **ch**ange **yo**ur _**ma**in.rs_ to **lo**ok **li**ke —\n\n```rust\nstruct MyStruct {}fn main() {  let _ms = MyStruct {};    \u003c-- Note the '_'}\n```\n\n**Th**is is **ab**out as **si**mple a **pr**ogram as **yo**u **co**uld **po**ssible **wr**ite, **bu**t it **wi**ll do **ni**cely to **il**lustrate **Ru**st’s **mo**dules. **No**te **th**e `_` **pr**efixing **th**e **va**riable **na**me — **Ru**st **do**esn't **li**ke **un**used **va**riables (**ri**ghtly so!) **bu**t by **us**ing **th**e `_` **pr**efix we’re **te**lling **th**e **co**mpiler **th**is **wa**s **in**tentional **an**d it **wi**ll **pr**event **th**e **co**mpiler **em**itting a **wa**rning. **Th**is is _**no**t_ a **go**od **ex**ample of **wh**en to **us**e **th**is **fe**ature (“**ig**nored” **pa**ttern **ma**tch), **bu**t it **do**es **ha**ve **le**gitimate **us**es in **ot**her **ca**ses.\n\n**No**w, **le**t’s **sa**y **ou**r **co**de is **ge**tting **ou**t of **ha**nd **an**d we **wa**nt to **mo**ve **ou**r **ve**ry **co**mplex **st**ructure **ou**t **in**to **an**other **fi**le. We **wa**nt **ou**r **co**de to be _**lo**osely **co**upled_ **an**d _**hi**ghly **co**hesive_ of **co**urse! So **le**t’s do **th**at **an**d **cr**eate a **ne**w **fi**le **ca**lled _my\\_**st**ruct.rs_ —\n\n```rust\nhello_rust  - src    - main.rs    - my_struct.rs\n```\n\n**No**te **th**at we _**mu**st_ **ad**d **th**e **fi**le **be**low **th**e `src/` **fo**lder **fo**r **th**e **co**mpiler to **fi**nd it. **Wh**ile **th**e **na**me of **fi**le **do**esn’t **re**ally **ma**tter, it’s **id**iomatic **Ru**st to **us**e _**sn**ake\\_**ca**se_ so **th**at’s **wh**at we’ll do **he**re.\n\n**Mo**ve **th**e **st**ruct **de**claration **fr**om _**ma**in.rs_ **an**d **pl**ace it **in**to _my\\_**st**ruct.rs —_\n\n```\n// Contents of my_struct.rsstruct MyStruct {}\n```\n\n**Tr**y **bu**ilding **th**e **pr**oject —\n\n`$ cargo build`\n\nIf **yo**u **re**moved **th**e **st**ructure **de**claration **fr**om _**ma**in.rs_ **yo**u **wi**ll **se**e an **er**ror **li**ke **th**is —\n\n```\nCompiling hello_rust v0.1.0 (/scratch/hello_rust)error[E0422]: cannot find struct, variant or union type `MyStruct` in this scope → src/main.rs:2:15  |2 | let _ms = MyStruct {};  |           ^^^^^^^^ not found in this scopeerror: aborting due to previous errorFor more information about this error, try `rustc — explain E0422`. error: could not compile `hello_rust`\n```\n\n**Ru**st is **te**lling us **th**at it **ca**n no **lo**nger **fi**nd **th**e **de**finition of **ou**r **st**ruct. **Th**is is **wh**ere _**mo**dules_ **co**me in — **un**like **so**me **ot**her **la**nguages, **yo**u **mu**st _**ex**plicitly **in**clude **co**de_ **in**to **yo**ur **ap**plication. **Ru**st **wi**ll **no**t **si**mply **fi**nd **th**e **fi**le **an**d **co**mpile / **in**clude it **fo**r **yo**u.\n\nIn **or**der to **in**clude **th**e **st**ructure **de**claration we **ne**ed to **up**date **ou**r _**ma**in.rs_ to **ad**d a _**mo**dule_ **re**ference, **li**ke so—\n\n```\nmod my_struct;fn main() {  let _ms = MyStruct {};}\n```\n\nIn **Ru**st, **al**l **fi**les **an**d **fo**lders **ar**e _**mo**dules_. In **or**der to **us**e **th**e **co**de in a **mo**dule, **yo**u **ne**ed to **fi**rst _**im**port_ it **wi**th **th**e `mod` **sy**ntax. **Es**sentially **th**is is **in**serting **th**e **co**de **fr**om **th**e **mo**dule at **th**e **po**int **wh**ere **th**e `mod my_struct;` **st**atement is **fo**und. **Mo**re on **fo**lder **mo**dules in a **bi**t.\n\n**Tr**y **bu**ilding **ag**ain. **Wa**it, **wh**at’s **th**is!? It **st**ill **do**esn’t **wo**rk … **hm**m. **Le**t’s **ta**ke a **lo**ok at **th**e **er**ror **me**ssage —\n\n```\nCompiling hello_rust v0.1.0 (/scratch/hello_rust)error[E0422]: cannot find struct, variant or union type `MyStruct` in this scope → src/main.rs:4:15  |4 | let _ms = MyStruct {};  |           ^^^^^^^^ not found in this scope  |help: consider importing this struct  |1 | use crate::my_struct::MyStruct;  |\n```\n\n**Al**though **th**e **er**ror is **th**e **sa**me, **th**ere is **no**w a **he**lpful **hi**nt **ab**out **ad**ding —\n\n`use crate::my_struct::MyStruct;`\n\n**Le**t’s **gi**ve **th**at a **sh**ot — **ch**ange _**ma**in.rs_ to **lo**ok **li**ke **th**is (**bu**t _**do**n’t_ **bu**ild **ye**t! **Sp**oiler, we **ha**ve **an**other **is**sue I’ll **ge**t to **sh**ortly)—\n\n```\nmod my_struct;use crate::my_struct::MyStruct;fn main() {  let _ms = MyStruct {};}\n```\n\n**Th**ere’s a **li**ttle **bi**t to **un**pack **he**re. **Wh**en **yo**u **im**port a **mo**dule **wi**th **th**e `mod` **st**atement, **Ru**st _**au**tomatically_ **cr**eates a **mo**dule **na**mespace **fo**r it (to **av**oid **co**nflicts) **an**d **th**us we **ca**nnot **ac**cess **ou**r **st**ruct **ty**pe **di**rectly. **Th**e **mo**dule **na**mespace is **au**tomatically **ta**ken **fr**om **th**e **fi**le **na**me (**si**nce **th**e **mo**dule is a **fi**le in **th**is **ca**se), **he**nce **th**e `**my_struct**::MyStruct;` **pa**rt of **th**e `use` **st**atement — it **co**mes **fi**rectly **fr**om **th**e **fi**le **na**me _my\\_**st**ruct.rs_ (**wi**thout **th**e **fi**le **ex**tension).\n\n**Th**e **re**ason **fo**r **th**e `crate::` **pa**rt of **th**e `use` **st**atement is **th**at _**al**l_ **Ru**st **pr**ojects **ar**e **cr**ates. As **yo**u **ha**ve **no**w **se**en, **Ru**st **pr**ojects **ca**n be **co**mposed of **mu**ltiple **fi**les (**wh**ich **ar**e _**mo**dules_), **th**at **ca**n be **ne**sted **wi**thin **fo**lders (**wh**ich **ar**e _**al**so **mo**dules_). In **or**der to **ac**cess **th**e **ro**ot of **th**at **mo**dule **tr**ee, **yo**u **ca**n **al**ways **us**e **th**e `crate::` **pr**efix.\n\nSo **lo**oking at **ou**r _**ma**in.rs_ **ag**ain, we **ha**ve —\n\n```\nmod my_struct;                  \u003c-- Import the module code, placing                                    it into the 'my_struct'                                    namespaceuse crate::my_struct::MyStruct; \u003c-- Map the fully qualified (from                                     the crate root) struct                                     declaration to just 'MyStruct'fn main() {  let _ms = MyStruct {};        \u003c-- Yay, we found it! .. or did we?}\n```\n\nIf it **se**ems **co**nfusing (**an**d I **mu**st **sa**y I **fo**und **th**is a **li**ttle **co**nfusing **co**ming **fr**om C#) **ju**st **re**member **th**is —\n\n-   You _**mu**st_ use `mod` to include a module (file or folder) into your application.\n-   The `use` keyword is a convenience to map a fully qualified type name to just it’s type name (you can even rename types, but that’s for another post).\n\n## Modules — Visibility\n\nIf **yo**u **we**re **im**patient (go on, **ad**mit it!) **th**en **yo**u **wo**uld **ha**ve **tr**ied to **bu**ild **th**e **pr**evious **in**carnation of _**ma**in.rs_ **an**d **go**t **an**other **er**ror —\n\n```\nCompiling hello_rust v0.1.0 (/scratch/hello_rust)error[E0603]: struct `MyStruct` is private → src/main.rs:2:23  |2 | use crate::my_struct::MyStruct;  |                       ^^^^^^^^ private struct  |\n```\n\n**Th**is is **te**lling us **th**at **al**though we’ve **fo**und **th**e **st**ruct **de**claration, **th**e **vi**sibility of **th**e **mo**dule is **pr**ivate **an**d **th**us we **ca**n’t **ac**cess it **he**re.\n\n**Vi**sibility in **Ru**st is a **li**ttle **di**fferent to **la**nguages **li**ke C#, **bu**t it **pa**ys to **re**member a **co**uple of **ru**les —\n\n-   Everything _**in**side_ a module (ie, a file or subfolder within the `/src` folder) can access _**an**ything **el**se_ within that module.\n-   Everything _**ou**tside_ a module can _**on**ly_ access public members of that module.\n\n**Th**is **ma**y **lo**ok **st**range at **fi**rst, **bu**t it **ha**s **so**me **ve**ry **ap**pealing **si**de **ef**fects — **pr**ivate **fu**nctions **wi**thin a **mo**dule **ar**e **st**ill **ac**cessible **fo**r **te**sts **wi**thin **th**at **mo**dule (**id**iomatic **Ru**st **ke**eps **un**it **te**sts **wi**thin **th**e **mo**dule). **Se**cond, **ev**ery **mo**dule is **fo**rced to **de**clare a **pu**blic **in**terface, **de**fining **wh**at **me**mbers **ar**e **ac**cessible **ou**tside **th**e **mo**dule.\n\nTo **ma**ke a **me**mber of a **mo**dule **pu**blic, we **mu**st **ad**d **th**e `pub` **ke**yword. **Le**t’s **re**visit **ou**r _my\\_**st**ruct.rs_ **fi**le **ag**ain **an**d **re**place **th**e **co**ntents **wi**th —\n\n```\npub struct MyStruct {}         \u003c-- Add the 'pub' keyword\n```\n\n**An**d **th**at’s it! **Yo**u **ca**n **no**w **su**ccessfully **bu**ild **ou**r **ma**rvellously **co**mplicated **ap**plication :) **No**te **th**at **yo**u **ca**n **pl**ace `pub` on **mo**st **de**clarations, **in**cluding **st**ructs, **st**ruct **fi**elds, **fu**nctions (**as**sociated **an**d **ot**herwise), **co**nstants **et**c.\n\n## Modules — Folders\n\n**No**w **le**t’s **sa**y **th**at **ou**r `MyStruct` **st**ructure is **ge**tting **ou**t of **ha**nd **an**d we **wa**nt to **sp**lit it **in**to **mu**ltiple **fi**les. We **wa**nt to **co**llect **th**ese up **in**to a **fo**lder to **ke**ep **th**ings **ni**ce **an**d **ti**dy of **co**urse.\n\nAs **al**luded to **ab**ove, **Ru**st **tr**eats **fi**les **an**d **fo**lders in **th**e **sa**me **wa**y (as **mo**dules) **wi**th **on**e **ke**y **di**fference.\n\n**Le**t’s **st**art by **cr**eating a **fo**lder **ca**lled `foo/` **be**cause we’ve **re**alised **ou**r `MyStruct` is **re**ally **pa**rt of **th**e **fo**o **fe**ature of **ou**r **ap**p. **Ne**xt **mo**ve **th**e **fi**le _my\\_**st**ruct.rs_ **in**to `/src/foo`. Ie, **th**e **ne**w **fo**lder **st**ructure **sh**ould **lo**ok **li**ke —\n\n```\n- src/  - main.rs  - foo/    - my_struct.rs\n```\n\n**No**w **ed**it _**ma**in.rs_ to **in**clude **ou**r **ne**w **mo**dule `foo` **re**placing `my_struct` —\n\n```\nmod foo;                   \u003c-- Change the module to match the folderuse crate::foo::MyStruct;  \u003c-- Update the namespace to 'foo'fn main() {  let _ms = MyStruct {};}\n```\n\nWe **ca**n **bu**ild **th**is **no**w (`cargo build`), **bu**t we **wi**ll **ge**t an **er**ror. As **al**ways, **Ru**st’s **er**ror **me**ssages **ar**e **in**structive —\n\n```\nCompiling hello_rust v0.1.0 (/scratch/hello_rust)error[E0583]: file not found for module `foo` → src/main.rs:1:1  |1 | mod foo;  | ^^^^^^^^  |  = help: to create the module `foo`, create file “src/foo.rs” or “src/foo/mod.rs”\n```\n\n**Wh**en **tr**ying to **im**port a **mo**dule **de**fined as a **fo**lder, we **us**e **th**e **fo**lder **na**me (as we **di**d **fo**r **th**e **fi**le **ba**sed **mo**dule **pr**eviously) **bu**t **Ru**st **ex**pects a **fi**le **na**med _**mo**d.rs_ **ex**ists **wi**thin **th**e **fo**lder.\n\nIn **th**is **ca**se we **ca**n **si**mply **re**name **ou**r _my\\_**st**ruct.rs_ to _**mo**d.rs_ **an**d **vo**ila! **Ou**r **ap**plication is **bu**ilding **ag**ain.\n\n**Fo**r **co**mpleteness **le**t’s **ad**d a **fi**le to **th**e `foo/` **fo**lder **wi**th **an**other **st**ruct **de**finition (**im**aginatively **na**med **An**other) —\n\n```\n// Contents of src/foo/another.rspub struct Another {}   \u003c-- We're going to expose this as public                            from the 'foo' module so that we can                            use it in main.rs\n```\n\nWe **im**port **ou**r **ne**w **mo**dule **in**to **th**e _**mo**d.rs_ **fi**le —\n\n```\n// Contents of src/foo/mod.rspub mod another;        \u003c-- Add the module import for 'another'                            Note the use of 'pub' to expose the                             module 'another' as public from the                             module 'foo'pub struct MyStruct {}\n```\n\n**An**d **fi**nally **tr**y **us**ing **ou**r **ne**w **An**other **st**ruct in **ma**in.rs\n\n```\nmod foo;use crate::foo::MyStruct;use crate::foo::another::Another; \u003c-- Note that 'another' is a                                      module within 'foo'fn main() {  let _ms = MyStruct {};  let _a = Another {};            \u003c-- Using prefix '_' as before}\n```\n\nIf **th**is **lo**oks a **li**ttle **cu**mbersome, **th**at’s **be**cause it is. **Th**ere is **ho**wever, a **be**tter **wa**y.\n\n## Preludes\n\n**Le**t’s **re**visit **ou**r _**mo**d.rs_ **fi**le **wi**thin **th**e `foo/` **fo**lder. **Ch**ange **th**e **co**ntents to **th**e **fo**llowing —\n\n```\nmod another;              \u003c-- Remove the 'pub' modifierpub use another::Another; \u003c-- Add a use'ing to map Another directly                              into 'foo' and make it publicpub struct MyStruct {}\n```\n\n**He**re we no **lo**nger **wa**nt **th**e **mo**dule **an**other to be **pu**blic, so we **re**move **th**e `pub` **ke**yword. **Th**en, **th**e `use` **st**atement **wi**ll **ma**p **th**e **fu**lly **qu**alified **ty**pe of `Another` **in**to **th**e _**fo**o_ **na**mespace (**be**cause we **ar**e in **th**e **fo**o **mo**dule).\n\n**La**st, **le**t’s **up**date **ou**r **ma**in.rs —\n\n```\nmod foo;use crate::foo::{MyStruct,Another};fn main() {  let _ms = MyStruct {};  let _a = Another {};}\n```\n\n**Mu**ch **be**tter! **No**te **th**at **si**nce we’ve **ma**pped **th**e **ty**pe **na**me of `Another` **in**to **th**e _**fo**o_ **mo**dule, we **ca**n **ma**ke **us**e of **th**e **ex**tended `use` **sy**ntax to **im**port **mu**ltiple **na**mes at **on**ce.\n\n**Th**e **ke**y **ta**keaway **he**re is **th**at **yo**u **sh**ould **re**ally **th**ink of **th**e _**mo**d.rs_ **fi**le as **de**fining **th**e **in**terface to **yo**ur **mo**dule. **Al**though it **ma**y **se**em a **li**ttle **da**unting at **fi**rst, it **gi**ves **yo**u a **lo**t of **co**ntrol **ov**er **ex**actly **wh**at is **ex**posed **pu**blicly, **wh**ile **st**ill **al**lowing **fu**ll **ac**cess **wi**thin **th**e **mo**dule (**fo**r **th**ings **li**ke **te**sting).\n\nOk, **th**at’s **gr**eat … so **wh**at **th**e **he**ck is a _**pr**elude_ I **he**ar **yo**u **as**k! **We**ll, a **pr**elude is **ju**st a **pa**ttern **fo**r **ma**king **av**ailable **al**l **ty**pes **yo**u **wa**nt to be **pu**blic, in an **id**iomatic **wa**y. **No**t **al**l **cr**ates **de**fine a **pr**elude (**al**though **ma**ny do) **an**d **yo**u **do**n’t **al**ways **ne**ed **on**e, **bu**t **le**t’s go **ah**ead **an**d **de**fine **on**e **fo**r **ou**r **li**ttle _**he**llo\\_**ru**st_ **pr**oject **an**yway.\n\n**Ba**ck to **ou**r _**ma**in.rs_ we go —\n\n```\nmod foo;mod prelude {                             \u003c-- Create module inline  pub use crate::foo::{MyStruct,Another}; \u003c-- Note the 'pub' here!}use crate::prelude::*;                    \u003c-- Make the types exposed                                              in the prelude                                              availablefn main() {  let _ms = MyStruct {};  let _a = Another {};}\n```\n\nWe **de**fine **th**e **pr**elude as **ju**st **an**other **mo**dule (**us**ing `mod`), **on**ly **th**is **ti**me we **ar**e **sp**ecifying **th**e **mo**dule **di**rectly, **in**stead of **le**tting **Ru**st **lo**ok **fo**r **th**e **co**rresponding **fi**le or **fo**lder.\n\n**No**w we **ca**n **al**so **us**e **th**e `prelude` **mo**dule **ju**st **li**ke **an**y **ot**her, **fo**r **ex**ample in **th**e _**mo**d.rs_ **fi**le—\n\n```\nmod another;pub use another::Another;use crate::prelude::*;pub struct MyStruct {}\n```\n\nIn **th**is **co**ntrived **ca**se, **th**e **pr**elude **is**n’t **ne**cessary at **al**l. **Bu**t **yo**u **ca**n **se**e **th**at if **yo**u **ha**d **de**clared **mu**ltiple **cr**ates, **st**andard **li**brary **ty**pes, **co**nstants **an**d **ot**her **mo**dules **wi**thin **th**e **pr**elude, **th**en **yo**u **ca**n **ac**cess **th**em **im**mediately, **wi**th **ju**st **th**e **si**ngle `use` **st**atement.\n\nIt **al**so **hi**ghlights a **co**uple of **ot**her **in**teresting **pa**rts of **mo**dule **us**e —\n\n-   You can import all public names from a module with a wildcard `::*`\n-   You can access the root of the module tree (ie, the main module in this case) using `crate::` and you can do this from anywhere in your application.\n\n## Summary\n\n**Th**e **mo**dule **sy**stem in **Ru**st **wa**s **de**finitely **on**e of **th**e **mo**re **pu**zzling **as**pects of **th**e **la**nguage. **Co**ming **fr**om a C++/C# **ba**ckground, **co**mbined **wi**th **th**e **mo**dule **vi**sibility **ru**les (**an**d **pr**eludes), it **wa**s **do**wnright **co**nfusing! **Bu**t **on**ce **yo**u **wr**ap **yo**ur **he**ad **ar**ound **wh**at a **mo**dule is (**fi**le, **fo**lder) **an**d **ho**w **yo**u **im**port **th**em (`mod`) **an**d **th**en **ma**p **na**mes **in**to **di**fferent **mo**dules (`use`) it **be**gins to **ma**ke **se**nse.\n\nIt’s **al**so **im**portant to **ke**ep in **mi**nd **th**at **Ru**st **pr**oject **st**ructure is **ve**ry **sp**ecific (**ap**plication vs **li**brary = _**ma**in.rs_ vs _**li**b.rs_), **re**quiring **ce**rtain **fi**les to **ex**ist in **di**fferent **co**ntexts (_**mo**d.rs_).\n\n**Ho**pe **th**is **wa**s **he**lpful (it **wa**s **fo**r me **wr**iting it!).\n\n**Ne**xt up, [structs, associated functions and methods](https://gian-lorenzetto.medium.com/rust-structs-functions-and-methods-d60fd597d956).\n\n---\n# Todoist\n\n```todoist\n{\n\"name\": \"My Tasks\",\n\"filter\": \"today | overdue\"\n}\n```\n---\n\n# ADHD\n\nhttps://www.youtube.com/watch?v=rbkCXKGs5Yk\n\nsame guy who did all the obsidian tuts","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-Project-structure-example-step-by-step-DEV-Community":{"title":"Rust project structure step by step","content":"\n## [](https://dev.to/ghost/rust-project-structure-example-step-by-step-3ee#introduction)Introduction\n\n**Th**e **re**cent, **ho**pefully **te**mporal, **de**ath of **Ac**tix-**we**b **fo**rced me to **re**check **so**me **co**de of a **pe**t **pr**oject of **mi**ne **th**at **wa**s **no**t **cl**eanly **de**coupled, **so**me of my **Di**esel **wa**s **mi**xed **wi**th my **Ac**tix, so I **wi**ll **sh**are **th**e **pr**ocess **an**d **st**ages of **de**composition in **Ru**st.\n\n**Th**is is **th**oroughly **ex**plained in **Th**e **Bo**ok, **bu**t I'll **tr**y to **ma**ke it **mo**re **co**ncise **an**d **si**mple, I'll **sk**ip **ma**ny **de**tails in **fa**vor of **cl**arity **an**d of **co**urse **th**e **co**de **it**self is **no**t **us**eful, **it**s **on**ly **pu**rpose is to **sh**ow as **si**mple as I **co**uld, **th**e **pr**ocess **st**ep by **st**ep. I **ho**pe is **he**lpful.\n\n**I also uploaded a repo in github ([https://github.com/robertorojasr/rust-split-example](https://github.com/robertorojasr/rust-split-example)), if you clone it, each commit is another step in the process. And unlike this example, it runs (doesn't do much but runs)**\n\n**Th**is **ev**olution **sh**ould **lo**ok **li**ke **th**is:\n\n1.  Single file with everything on it.\n2.  Move part of your code to a different module. (this step is missing in the repo, I forgot, sue me), please don't sue me.\n3.  Move the module to a different file.\n4.  Turn the module in a single file into a folder acting as a module with multiple files as sub-modules.\n5.  Split your crate in a library and an executable that lives in the same directory tree.\n6.  Move the executable and library to different crates (workspaces) with their own directory tree.\n\n**Wh**en **ou**r **pr**oject **ge**ts **bi**gger **an**d **mo**re **co**mplex **th**is **st**rategies **wi**ll **he**lp to **ke**ep **th**e **ov**erall **st**ructure of **yo**ur **co**de **ma**nageable, **cl**ear **an**d **de**coupled.\n\n## [](https://dev.to/ghost/rust-project-structure-example-step-by-step-3ee#0-starting-point)0\\. Starting point\n\nSo **yo**u **ma**ke **yo**u \"**He**llo **Wo**rld\" **an**d **ev**erything is **co**ol, **yo**u **re**place **th**at **pr**intln **an**d **st**art **co**ding, **so**on **yo**u **no**tice **yo**ur **lo**vely **ma**in.rs is **ge**tting **bi**gger, **fi**lled **wi**th **st**ructs, **fu**nctions **an**d **tr**aits, **so**me of **th**em **ar**e **li**nk to **ea**ch **ot**her **bu**t **so**me **ar**e **no**t, **li**ke **Ne**o **wa**tching **th**e **Ma**trix **yo**u **st**art to **se**e **so**me **ma**cro-**st**ructure **an**d **yo**u **te**ll to **yo**urself, \"**my**self, is **ti**me to **ti**de **th**is **me**ss\", of **co**urse **yo**u **co**uld **de**sign **al**l **be**fore **yo**u **st**art, (**yo**u **sh**ould **ac**tually), **bu**t **yo**u **wa**nt **av**oid **ov**erengineering **an**d as **th**is **po**st **sh**ows (at **le**ast **ho**pes to) is **no**t **ne**cessary to **ta**ke **th**e **bi**g **gu**ns **fr**om **th**e **st**art.\n\n**Le**ts **sa**y **th**is is **yo**ur **cu**rrent **ma**sterpiece, **im**pressive, I **kn**ow, I **di**d it **al**l by **my**self.  \n\n```rust\n// src/main.rs\n\nstruct A {\n    a: i32,\n}\n\nstruct B {\n    b: i32,\n}\n\nfn main() {\n    let first = A { a: 42, };\n}\n\n```\n\n## [](https://dev.to/ghost/rust-project-structure-example-step-by-step-3ee#1-a-module)1\\. A module\n\nSo **ho**w do **yo**u **st**art?, **th**e **fi**rst **th**ing **wo**uld be **ma**ke **mo**dules to **en**capsulate **so**me **co**de  \n\n```rust\n// src/main.rs\n\nmod something {\n    struct A {\n        a: i32,\n    }\n\n    struct B {\n        b: i32,\n    }\n}\n\nfn main() {\n    let first = A { a: 42, };\n}\n\n```\n\n**bu**t **no**w **th**ere is a **pr**oblem, **ev**en **th**o _A_ is **de**fined in **th**e **sa**me **fi**le, is no **lo**nger in **th**e **sa**me **mo**dule, so _**ma**in()_ **ha**ve no **id**ea _**so**mething_ is in **th**ere, so we **ha**ve to **im**port _**so**mething_  \n\n```rust\n// src/main.rs \n\nmod something {\n    struct A {\n        a: i32,\n    }\n\n    struct B {\n        b: i32,\n    }\n}\n\nuse crate::something::*; // \u003c- this is new\n\nfn main() {\n    let first = A { a: 42, };\n}\n\n```\n\n**No**w _**ma**in()_ **kn**ows **th**at _**so**mething_ is **he**re **an**d **th**at it **ca**n **us**e **ev**erything **pu**blic in **th**ere, **bu**t **wa**it, **th**ere is **no**thing **pu**blic in **th**ere, so we **ha**ve to **ma**ke **pu**blic **wh**atever we **wa**nt to **ma**ke **vi**sible to _**ma**in()_.  \n\n```rust\n// src/main.rs \n\nmod something {\n    pub struct A { // \u003c- this is new\n        pub a: i32, // \u003c- this is new\n    }\n\n    pub struct B {\n        pub b: i32, // \u003c- this is new\n    }\n}\n\nuse crate::something::*;\n\nfn main() {\n    let first = A { a: 42, };\n}\n\n```\n\n**No**w _**ma**in()_ **ca**n **se**e **ev**erything **in**side, of **co**urse **yo**u **do**n't **ha**ve to **ma**ke **al**l **pu**blic, **ju**st **wh**at **yo**u **ne**ed, **an**d **sp**are me **th**e **OO**P **ar**gument **th**at **yo**u **sh**ouldn't **ex**pose **da**ta, is **ju**st an **ex**ample **he**re, **an**d **OO**P is **no**t **al**l **th**ere is **BT**W (a **bi**t of **sa**ss **he**re).\n\n## [](https://dev.to/ghost/rust-project-structure-example-step-by-step-3ee#2-a-module-in-other-file)2\\. A module in other file\n\n**Bu**t **th**at **do**esn't **so**lve **th**e **fa**ct **th**at **yo**ur **ID**E **ge**ts **la**ggy **wi**th **yo**ur **st**ill **hu**ge **fi**le, in **fa**ct **yo**u **ju**st **ad**ded **mo**re **st**uff!, to **so**lve **th**is **yo**u **sh**ould **st**art **us**ing **Vi**m... I **jo**king... (Am I?)\n\nSo **no**w **yo**u **wa**nt to **mo**ve **th**at **mo**dule **ou**tside, to **ot**her **fi**le, to **li**ve **fr**ee **an**d **al**one.\n\nSo **yo**u **ke**ep **th**e **de**finition **an**d **th**e **im**port in **main.rs**  \n\n```rust\n// src/main.rs\n\nmod something;\n// the content of the module was here\n\nuse crate::something::*;\n\nfn main() {\n    let first = A { a: 42, };\n}\n\n```\n\n**an**d **pu**t **th**e **mo**dule **co**ntent in **yo**ur **fr**eshly **ma**de **ne**w **fi**le in **th**e **sa**me **fo**lder as **main.rs**  \n\n```rust\n// src/something.rs \n\npub struct A {\n    pub a: i32,\n}\n\npub struct B {\n    pub b: i32,\n}\n\n```\n\n**Wh**en **yo**u **ad**ded **th**e **mo**dule **so**mething in **main.rs**  \n\n```rust\n// src/main.rs\n\nmod something;\n\n// the rest of it\n```\n\n**Ru**st **au**tomagically **lo**oks **fo**r it **in**side **th**e **fi**le, if **do**esn't **fi**nd it, **lo**oks **fo**r a **fi**le **wi**th **th**e **mo**dule **na**me in **th**e **sa**me **fo**lder (in **th**is **ca**se **sr**c/) **an**d if **st**ill **do**esn't **fi**nd it **lo**oks **fo**r a **fo**lder **wi**th **th**e **mo**dule **na**me **an**d a **fi**le **mod.rs** **in**side, **th**ere it **lo**oks **fo**r **th**e **co**de.\n\n## [](https://dev.to/ghost/rust-project-structure-example-step-by-step-3ee#3-a-module-in-a-folder-with-many-submodules)3\\. A module in a folder with many submodules\n\nAs **me**ntioned in **th**e **la**st **pa**ragraph, we **ca**n **sp**lit **ev**en **mo**re **ou**r **mo**dule,  \n**al**l we **ha**ve to do is **ma**ke a **fo**lder **something** so we **ge**t:  \n\n```\nsrc/\n |_ main.rs\n |_ something.rs\n |_ something/\n\n```\n\n**No**w, we **co**uld **ju**st **re**name **something.rs** as **mod.rs** **an**d **mo**ve it **in**side **something/** **bu**t **wh**at's **th**e **po**int in **th**at, we **wa**nt to **sp**lit **th**ings!, so we **ar**e **go**nna **gi**ve _A_ **an**d _B_, (**pl**ease **do**n't **na**me **yo**ur **st**uff **li**ke **th**at **ou**tside **ex**amples **li**ke **th**is) **th**eir **ow**n **mo**dules. So we'll **ha**ve **th**is **tr**ee  \n\n```rust\nsrc/\n |_ main.rs\n |_ something/\n     |_ mod.rs\n     |_ a.rs\n     |_ b.rs\n\n```\n\n**Bu**t **wh**at **ha**ppen **wi**th **something.rs**, **we**ll my **fr**iend, **yo**u **sp**lit it, _A_ **go**es to **a.rs** **an**d **yo**u **ca**n **gu**ess **wh**ere _B_ **we**nt.\n\n**No**w _A_ **an**d _B_ **ar**e in **th**eir **ow**n **mo**dules so we **mo**dify **th**e **im**ports **ac**cordingly  \n\n```rust\n// src/main.rs\n\nuse crate::something::a::*; // \u003c- this is new\nuse crate::something::b::*; // \u003c- this is new\n\nfn main() {\n    let first = A { a: 42, };\n}\n\n```\n\n**Bu**t **mod.rs** **ha**s **no**w **th**e **re**sponsibility to **ca**ll **th**eir **ch**ildren, as I **to**ld **be**fore, **wh**en **Ru**st **ch**eck **fo**r **something.rs** **an**d **do**esn't **fi**nd it **wi**ll **ch**eck **fo**r **th**e **fo**lder **something** **an**d **th**en **in**side **lo**ok **fo**r a **fi**le **na**med **mod.rs**.  \n\n```rust\n// src/something/mod.rs\n\npub mod a;\npub mod b;\n\n```\n\n**Yo**u **ma**y **no**tice **th**at **th**is is **th**e **sa**me **th**ing we **di**d **wi**th **ma**in at **fi**rst. **Yo**u **ca**n **ke**ep **ne**sting **mo**dules as **lo**ng as **yo**u **li**ke, **ju**st **li**ke **th**at.  \n\n```rust\n// src/something/a.rs\n\npub struct A {\n    pub a: i32,\n}\n\n```\n\n```rust\n// src/something/b.rs\n\npub struct B {\n    pub b: i32,\n}\n\n```\n\n**Fi**ne **an**d **da**ndy, **bu**t **no**w **wh**at? **wh**at if my **pr**oject is a **hu**ge **be**ast, **wh**at if I **co**uld **re**use **so**me of **th**e **co**de, **le**t's **sa**y. **Yo**u **ha**d a **ni**ce **we**bapp **wi**th **Di**esel **OR**M **an**d **Ac**tix-**we**b on **to**p, **wh**at is **so**me **da**y, **le**t **sa**y **Ac**tix **cr**eator **le**aves **an**d it's **fu**ture is **un**certain, **wh**at **th**en **hu**h?, **wh**at **th**en?!\n\n...\n\n**We**ll, **yo**u **co**uld **se**e **yo**ur **we**bapp as a **li**brary **th**at **de**als **wi**th **th**e DB, **le**ts **sa**y **wi**th **Di**esel **an**d a **se**parate **co**nsumer in an **ex**ecutable **wi**th **Ac**tix-**we**b or **ot**her **fr**amework **th**at is **no**t **ap**parently **de**ad, **bu**t **ma**ybe **co**mes **ba**ck ...\n\n**Yo**u **co**uld **al**so **ma**ke a **CL**I UI **fo**r **ex**ample **th**at **wi**ll **us**e **th**e **sa**me DB **re**lated **co**debase. **Le**ts do it!\n\n## [](https://dev.to/ghost/rust-project-structure-example-step-by-step-3ee#4-rust-library-with-an-executable-file)4\\. Rust library with an executable file\n\nAs **yo**u **ma**y **ha**ve **re**ad **an**d **sk**ip to **mo**re **fu**n **st**uff, **Ru**st **re**cognize 2 **ki**nds of **cr**ates (**th**e **of**ficial **na**me of **wh**at I've **be**en **ca**lling **pr**oject, **ju**st **be**cause I'm a **re**bel) **li**braries **an**d **ex**ecutables, **yo**u **pr**obably **kn**ow **th**e **di**fference **bu**t **fo**r **co**mpletion **le**t **pu**t it **si**mple, an **ex**ecutable is **so**mething **yo**u **us**e **di**rectly **an**d a **li**brary is **so**mething **th**at is **us**ed by an **ex**ecutable.\n\n**Wh**at we **wa**nt in **th**is **ca**se is to **pu**t **ou**r _**ma**in()_ in **an**other **fi**le as an **ex**ecutable **an**d **le**ave **al**l of **ou**r **st**ructs in a **li**brary **fo**r **fu**ture **re**use in **ot**her **ex**ecutables.\n\n**Ru**st **tr**ies **re**ally **ha**rd to **ma**ke **th**ings **ea**sy (**be**cause it **fe**els **gu**ilty **fo**r **al**l **th**e **su**ffering **wi**th **bu**rrows **an**d **li**fetimes) so to **ma**ke a **cr**ate a **li**b **yo**u **ju**st **re**name **th**e **fi**le **main.rs** to **lib.rs**, **vo**ilá, **no**w is a **li**brary, **bu**t **le**ts **ma**ke **so**mething **us**eful **wi**th it, to do **th**at, we'll **ma**ke a **ne**w **fo**lder **bin/** **an**d we **wi**ll **co**py **ou**r **ex**isting **main.rs**, (**no**w **re**named **lib.rs**) on it **wi**th **so**me **fa**ncy **an**d **de**scriptive **na**me, **le**aving **yo**u **wi**th **th**is **ne**w **tr**ee:  \n\n```rust\nsrc/\n |_ lib.rs // \u003c- just a renamed main.rs\n |_ bin/ // \u003c- this folder is new\n |_  |_ framework_that_broke_my_heart.rs // \u003c- a copy of our ex-main.rs\n |_ something/\n     |_ mod.rs\n     |_ a.rs\n     |_ b.rs   \n\n```\n\nso, **ev**erything **in**side **something/** **wi**ll be **un**touched **no**w, **fi**rst we'll **wo**rk in **framework\\_that\\_broke\\_my\\_heart.rs**. **Th**e **fi**rst **th**ing **wi**ll **no**tice is **th**at **ev**erything **in**side **bin/** is in a **bu**bble **un**iverse, **ev**en **th**o is **in**side **ou**r **cr**ate is **no**t **pa**rt of it **an**ymore, **th**ink it **li**ke us **an**d **so**ciety (**no**t **yo**u, **we**ll **ad**justed **pr**ogrammers..**ug**h), so we **ha**ve to **ca**ll **ou**r **ne**wly **cr**eated **li**brary (**yo**u **kn**ow, **wh**en we **re**named **main.rs** to **lib.rs**) **ju**st as we **wh**ere **ca**lling **an**y **li**brary.  \n\n```rust\n// src/bin/framework_that_broke_my_heart.rs\n\nextern crate this_example; // oh right, I never named\n// this crate, is the name you give in Cargo.toml\n// under [package] in tha *name* field\n// (don't use dashes on it)\n\nuse crate::something::a::*;\nuse crate::something::b::*;\n\nfn main() {\n    let first = A { a: 42, };\n}\n\n```\n\n**an**d in **lib.rs** ex-**ma**in.rs  \n\n```rust\n// src/lib.rs\n\npub mod something; // \u003c- this is all, is like telling Rust\n// copy/paste everything inside `something` inside a `mod` here\n\n```\n\n**Ev**erything **in**side **so**mething is **un**touched.\n\nWe **ar**e **cl**ose to **th**e **fi**nish **li**ne, by **no**w **yo**u **ma**y **ha**ve **wo**ndered **ab**out **th**e **si**tuation of **th**at **po**or **fe**llow **wh**ose **he**art **wa**s **br**oken by **th**e **ea**rly **de**mise of **hi**s **fa**vorite **fr**amework, **an**d **te**lling **yo**urself, **ho**w **th**e F\\* **di**d he **pu**t **al**l **hi**s **Ac**tix-**we**b **co**de **in**side a **ti**ny **li**ttle **fi**le, **th**at **fi**le **mu**st be **hu**ge, a **hu**ge **me**ss, **bu**t **th**e **wh**ole **id**ea **wa**s to **sp**lit **th**ings **an**d he **ju**st **ma**de **ev**erything **wo**rse!, **we**ll my **fe**llow, **th**is is **wh**en **th**e **ne**xt **po**int **co**mes.\n\n## [](https://dev.to/ghost/rust-project-structure-example-step-by-step-3ee#5-workspaces)5\\. Workspaces\n\n**Th**is **tu**rns **yo**u **cr**ate in **sm**aller **cr**ates **in**side a **bi**g **cr**ate-**is**h **um**brella, **yo**u **co**uld **ju**st **sp**lit **yo**ur **co**de in 2 **cr**ates by **no**w, **af**ter **al**l, we **cl**aimed **th**at **th**e **ex**ecutable in **th**e **la**ter **st**ep **wa**s **al**ready **no**t **pa**rt of **th**e **or**iginal **cr**ate **an**d **th**at's **ri**ght. **Sp**liting **en**tirely **th**e **co**de in 2 **se**parate **cr**ates is a **va**lid **ch**oice, **bu**t **ma**ny of **th**e **de**pendencies **ar**e **co**mmon to **bo**th: **th**e **ex**ecutable **an**d **th**e **li**brary; **an**d it **wo**uld be **an**noying to **re**build 2 **ti**mes, **te**st 2 **ti**mes, **et**c. If **bo**th **th**e **li**brary(es) **an**d **ex**ecutable(s) **ar**e **re**lated to **ea**ch **ot**her, **yo**u **ma**y **wa**nt to **tr**eat **th**em as 1 **th**ing **fo**r **bu**ilding/**te**sting/**ru**nning **pu**rposes, **yo**u **ma**y **al**so **ke**ep **th**em **bo**th in **th**e **sa**me **re**po.\n\n**Th**is **on**e is **go**nna **ge**t a **bi**t **mo**re **co**mplicated **bu**t **no**t **mu**ch.\n\nWe **ar**e **go**nna **ma**ke 2 **cr**ates **in**side **ou**r **or**iginal **on**e **an**d **gl**ue **th**em **to**gether.\n\nSo we **ha**d **th**is **be**auty:  \n\n```rust\n./\n |_Cargo.toml\n |_Cargo.lock\n |_target/\n | |_ ... // we don't care about this, is made in the building process\n |\n |_src/\n   |_ lib.rs\n   |_ bin/\n   |_  |_ framework_that_broke_my_heart.rs\n   |_ something/\n       |_ mod.rs\n       |_ a.rs\n       |_ b.rs   \n\n```\n\n**Si**tting in ./ **ju**st **ne**xt to **th**e \"**Ca**rgos\" we **ju**st **ma**ke **tw**o **ne**w **cr**ates.  \n\n```rust\n$ cargo init --lib db_stuff\n$ cargo init ftbmh // framework_that_broke_my_heart, too long,\n// too lazy, again, this is an example, name your thing with\n// common sense, don't be // funny in a real project, the fun\n// will last about 10min, the pain much // more than that.\n\n```\n\n**Th**e **ar**gument --**li**b **th**e **on**ly **th**ink it **do**es, is **in**stead to **ma**ke a **main.rs** **ma**kes a **lib.rs**, by **de**fault **ma**kes a **ex**ecutable.\n\nSo we **wi**ll **ge**t:  \n\n```rust\n./\n |_Cargo.toml\n |_Cargo.lock\n |_target/\n | |_ ...\n |\n |_src/\n |  |_ lib.rs\n |  |_ bin/\n |  |_  |_ framework_that_broke_my_heart.rs\n |  |_ something/\n |      |_ mod.rs\n |      |_ a.rs\n |      |_ b.rs\n |\n | // ^ that's the old part\n |\n |_db_stuff/    // this whole folder is new\n |   |_Cargo.toml\n |   |_src/\n |      |_ lib.rs // \u003c- that's all the --lib does\n |_ftbmh/      // this whole folder is new\n     |_Cargo.toml\n     |_src/\n        |_ main.rs\n\n```\n\n**No**w, **fr**om **th**e **or**iginal **Cargo.toml** we **wi**ll **mo**ve **th**e **pa**rts as **ne**cessary to **th**e **ne**w **Cargo.toml**, **fo**r **ex**ample **th**e **de**pendencies to **wh**oever **ne**eds **th**em.\n\n**Wh**en **yo**u **ar**e **do**ne **wi**th **th**at, **ju**st **cl**ean **yo**u **go**od **ol**d **Cargo.toml** **an**d **ju**st **pu**t **th**is:  \n\n```rust\n[workspace]\nmembers = [\"db_stuff\", \"ftbmh\"]\n```\n\n**Th**at's it, **no**w **th**e **or**iginal **Cargo.toml** **do**esn't **ha**ve a \\[**pa**ckage\\] or \\[**de**pendencies\\] **se**ction; **th**e **or**iginal **cr**ate is **no**w a **sh**ell.\n\n**Wh**en **yo**u **ma**de **th**e 2 **cr**ates **in**side (_dn\\_**st**uff_ **an**d _**ft**bmh_) **ca**rgo **sa**w **th**at **yo**u **wh**ere **in**side an **ex**isting **cr**ate **wi**th **it**s **ow**n **gi**t **re**po so **di**dn't **ma**de **on**e **fo**r **th**em, **yo**ur **ol**d **re**po is **st**ill **go**od **an**d **he**althy.\n\n**No**w **re**member **th**at **yo**u **sp**lited **yo**ur **co**de **an**d **pr**obably **on**e **pa**rt **de**pends on **ot**hers, in **th**is **ca**se _**ft**bmh_ **de**pends on _db\\_**st**uff_ so we **ha**ve to **ad**d **th**at **de**pendency in **th**e _**ft**bmh_ **Cargo.toml** **fi**le  \n\n```rust\n// ftbmh/Cargo.tom\n\n[package]\n// your stuff\n\n[dependencies]\n// your dependencies\ndb_stuff = { path = \"../db_stuff\" } // as you may know the `..`\n// in the path refers to the mother folder of the current one\n\n```\n\n**ftbmh/main.rs** **al**ready **wa**s **ou**tside **th**e **or**iginal **cr**ate as **yo**u **ma**y **re**member **fr**om **th**e **la**st **st**ep, so it's **al**l **do**ne **th**ere **an**d **th**e **cr**ate db\\_**st**uff **wa**s **us**ed as an **ex**ternal **cr**ate **al**ready so **ev**erything is **th**e **sa**me **th**ere **to**o.\n\n## [](https://dev.to/ghost/rust-project-structure-example-step-by-step-3ee#conclusion)Conclusion\n\nWe **ar**e **do**ne. **Wh**at **st**arted as a **si**mple **si**ngle **fi**le **pr**oject is **no**w a **co**mplex **cr**ate **wi**th 2 **wo**rkspaces, of **co**urse **th**ose **co**uld be 3 or 100, **ju**st **ri**nse **an**d **re**peat **an**d **th**e **sa**me **fo**r **mo**dules **th**at **ar**e **th**e **na**mespaces of **Ru**st.\n\nAs **yo**u **ca**n **se**e, if **yo**ur **co**de is **pr**operly **de**coupled, **th**e **wh**ole **pr**ocess is **ve**ry **un**obtrusive, of **co**urse is **go**od to **ha**ve **th**e **de**sign **pl**anned **fr**om **th**e **st**art, **bu**t **so**metimes **pr**ojects **gr**ow **mo**re **th**an we **th**ought, **th**ey **ge**t **mo**re **co**mplex **an**d is **go**od to **ha**ve **wa**ys to **ea**sily **ad**apt it **wi**thout **ma**king a **me**ss, is **al**so **go**od **be**cause **yo**u **do**n't **ne**ed to **ov**er **en**gineer **yo**ur **so**lution **af**raid of a **fu**ture **op**erations **li**ke **th**e **on**e **ex**posed **he**re. **Yo**u **ca**n **gr**ow **yo**ur **co**de **or**ganically.\n\nI **ho**pe **th**is **he**lp **so**meone, **th**ere is **no**thing **ne**w **he**re, **bu**t I **fo**und **th**at it **wa**s **to**o **di**sperse in **th**e **do**cumentation **an**d **bo**oks. **Th**ere is a **lo**t **mo**re of it, I **di**dn't **ta**lk **mu**ch **ab**out **th**e **pu**blic/**pr**ivate **an**d **wh**at is **vi**sible **fo**r **wh**om by **de**fault, **th**at is **ve**ry **we**ll **ex**plained in **bo**th **The Book** **an**d **th**e **am**azing **O'Reilly \"Programming Rust\"**, I **ju**st **tr**ied to **ma**ke a **sc**affold to **ma**ke **ea**sy **ha**nging **th**e **de**tails **la**ter.\n\n**An**y **co**rrections **an**d **su**ggestion, **fe**el **fr**ee to **le**t me **kn**ow **sp**ecially if **so**mething is **we**irdly **wr**itten, **En**glish is **no**t my **na**tive **la**nguage, **th**is is my **be**st **fo**r **no**w.","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-Smart-Pointers":{"title":"Smart Pointers in Rust","content":"\n# Smart Pointers\n\n\u003e Pointers -\u003e an arrow to a value that's somewhere else\n\n\u003e Smart pointer -\u003e pointers with additional features and metadata\n\n---\n\n```rust\nBox\u003cT\u003e\n```\n\n\nBox is a smart pointer.\n\n\n```rust\nfn main() {\n\tlet b = Box::new(5);\n}\n```\n\nnow 5 is stored on the head instead of the stack\n\nwhat remains on the stack is a pointer to the heap data\n\n*b* is still on the stack and it -\u003e to the 5 on the heap\n\n\u003eImpliments deref (dereference)\n\n```rust\nenum List {\n\tCons(i32, Box\u003cList\u003e),\n\tNil,\n}\n```\n\nthe reason this works is because pointers stay the same, so it's a fixed size. This allows for dynamic sizes of things.\n\nOption type tells rust a value can either be something or nothing\n\n```rust\nstruct Node\u003cT\u003e {\n\tdata: T,\n\tnext: Option\u003cBox\u003cNode\u003cT\u003e\u003e\u003e,\t\n}\n```\n\nthis implements null\n\n\nsingly linked list implimentation\n\n```rust\nstruct Node\u003cT\u003e {\n\tdata: T,\n\tnext: Option\u003cBox\u003cNode\u003cT\u003e\u003e\u003e,\t\n}\n\nimpl\u003cT\u003e Node\u003cT\u003e {\n\tfn set_next(\u0026mut self, next: Node\u003cT\u003e) {\n\tself.next = some(Box::new(next));\n\t}\n}\n\nfn main() {\n\tlet mut head = Node {\n\t\tnext: None,\n\t\tvalue: 1,\n\t};\n\n\tlet next = Node {\n\t\tnext: None,\n\t\tvalue: 2,\n\t};\n\n\thead.set_next(next);\n\n\tprintln!(\"{:?}\", head);\n}\n\n```\n\n---\n\n## Doubly Linked List\n\nSame of singly, but they also have a previous pointer\n\nThis doesn't work!!!\n\n```rust\nstruct Node\u003cT\u003e {\n\tdata: T,\n\tprev: Option\u003cBox\u003cNode\u003cT\u003e\u003e\u003e,\t\n\tnext: Option\u003cBox\u003cNode\u003cT\u003e\u003e\u003e,\n}\n```\n\nthis doesn't work because of the rules of ownership.\nEach value has an owner and can only have one owner at a time.\n\n### Shared Ownership\n\nmultiple owners??\n\nanother smart pointer\n\n\u003e `Rc\u003cT\u003e`  short for reference counting. adds an additional feature of reference counting.\n\n\u003eImagine `Rc\u003cT\u003e` as a TV in a family room. When one person enters to watch TV, they turn it on. Others can come into the room and watch the TV. When the last person leaves the room, they turn off the TV because it’s no longer being used. If someone turns off the TV while others are still watching it, there would be uproar from the remaining TV watchers!\n\n```rust\nfn main() {\n    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));\n    println!(\"count after creating a = {}\", Rc::strong_count(\u0026a));\n    let b = Cons(3, Rc::clone(\u0026a));\n    println!(\"count after creating b = {}\", Rc::strong_count(\u0026a));\n    {\n        let c = Cons(4, Rc::clone(\u0026a));\n        println!(\"count after creating c = {}\", Rc::strong_count(\u0026a));\n    }\n    println!(\"count after c goes out of scope = {}\", Rc::strong_count(\u0026a));\n}\n```\n\nhow it works\n\n\n```console\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.45s\n     Running `target/debug/cons-list`\ncount after creating a = 1\ncount after creating b = 2\ncount after creating c = 3\ncount after c goes out of scope = 2\n```\n\ninstead of box we will now use Rc\n\n```rust\nstruct Node\u003cT\u003e {\n\tdata: T,\n\tprev: Option\u003cRc\u003cNode\u003cT\u003e\u003e\u003e,\t\n\tnext: Option\u003cRc\u003cNode\u003cT\u003e\u003e\u003e,\n}\n```\n\n\u003e You don't need to manually clear memory when any pointer goes out of scope\n\nthe above works except for one problem.\n\n\u003eAt any given time you can have either one mutable reference *or* any number of immutable reference, *but* not at the same time!\n\n```rust\nfn main() {\n\tlet mut s = String::from(\"jello\");\n\n\tlet r1 = \u0026s; //no prob\n\tlet r2 = \u0026s; //no prob\n\tlet r3 = \u0026mut s; //!!! BIG PROBLEM\n\n}\n```\n\n### Another Smart pointer!\n\n`RefCell\u003cT\u003e` \n\n\u003e Just like the compile-time borrowing rules, `RefCell\u003cT\u003e` lets us have many immutable borrows or one mutable borrow at any point in time.\n\nWhat's the difference with other borrows?\n\n`RefCell\u003cT\u003e` keeps track of how many immutable and mutable borrows we have!\n\n\u003e If we are caught trying to break the rules it will instead panic at runtime instead of not compile. \n\nwith doubly linked list we need mutable pointers.\n\n\n```rust\nstruct Node\u003cT\u003e {\n\tdata: T,\n\tprev: Option\u003cRc\u003c\u003cRefCell\u003cNode\u003cT\u003e\u003e\u003e\u003e,\t\n\tnext: Option\u003cRc\u003c\u003cRefCell\u003cNode\u003cT\u003e\u003e\u003e\u003e,\n}\n```\n\nnow this works!\n\n\n\u003e This can be better though!\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-Tests":{"title":"Unit Testing in Rust","content":"\n# Testing In Rust\n\nunit test are really important especially when creating libraries\n\n\u003eWhen you set up a project if you start a library project it sets up a unit test\n\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-Variables":{"title":"Variable in Rust","content":"\n# Shadowing\n\ndata can be handled in a few different ways\n- borrowed\n- transferred\n- shadowed\n- sharing\n- \n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-bucket":{"title":"RUST Bucket","content":"\n# RUST info bucket\n\nsetting up rust env is fairly easy. Cargo builds the rust project. dependencies are also easy to set up.\n\n\nCLion works\nVSCode works\n\nrust needs to know the size of the thing on compile time, so recursion is a problem.\n\n\n---\n\n[[notes/Programming/RUST/Random Rust Notes]]\n\n[[notes/Programming/RUST/Scope in Rust|Scope]]\n\n[[notes/Programming/RUST/Memory Safety in Rust]]\n\n[[notes/Programming/RUST/Functions in Rust]]\n\n[[notes/Programming/RUST/Modules in Rust]]\n\n[[notes/Programming/RUST/Packages - (crates) in Rust]]\n\n[[notes/Programming/RUST/Integer literals in Rust]]\n\n[[notes/Programming/RUST/Floats in Rust]]\n\n[[notes/Programming/RUST/Booleans in Rust]]\n\n[[notes/Programming/RUST/Character Types in Rust]]\n\n[[notes/Programming/RUST/Strings in Rust]]\n\n[[notes/Programming/RUST/Control Flow in Rust]]\n\n[[notes/Programming/RUST/Iterators in Rust]]\n\n[[notes/Programming/RUST/Strings in Rust]]\n\n[[notes/Programming/RUST/Ownership in Rust]]\n\n[[notes/Programming/RUST/References and Borrowing in Rust]]\n\n[[notes/Programming/RUST/Structs in Rust]]\n\n[[notes/Programming/RUST/Traits in Rust]]\n\n[[notes/Programming/RUST/Collections in Rust]]\n\n[[notes/Programming/RUST/Enums in Rust]]\n\n[[notes/Programming/RUST/Closures in Rust]]\n\n[[notes/Programming/RUST/Threads in Rust]]\n\n[[notes/Programming/RUST/Idiomatic Rust]]\n\n[[notes/Programming/RUST/Cargo Clippy for Rust]]\n\n[[notes/Programming/RUST/Documentation in Rust]]\n\n[[notes/Programming/RUST/Rust Crates info]]\n\n[[notes/Programming/RUST/Rust gitignore]]\n\n[[notes/Programming/RUST/Iterators in Rust]]\n\n[[notes/Programming/RUST/Libraries and Modules in Rust]]\n\n[[notes/Programming/RUST/Semantic Versioning in Rust]]\n\n[[notes/Programming/RUST/Unsafe RUST]]\n\n[[notes/Programming/RUST/Modules in Rust]]\n\n[[notes/Programming/Databases/SurrealDB]]\n\n[[notes/Programming/RUST/Rust Tests]]\n\n[[notes/Programming/RUST/RUST resources]]\n\n[[notes/Programming/RUST/Rust Modules]]\n\n[[notes/Programming/RUST/RUST graphs]]\n\n[[notes/Programming/RUST/Rust Data Structures]]\n\n[[notes/Programming/RUST/RUST graphics]]\n\n[[notes/Programming/RUST/Rust terminal]]\n\n[[notes/Programming/RUST/Rust Variables]]\n\n[[notes/Programming/RUST/Rust Smart Pointers]]\n\n[[notes/Programming/RUST/Rust Project structure example step by step - DEV Community]]\n\n[[notes/Programming/RUST/Rust Modules and Project Structure  by Gian Lorenzetto, PhD  CodeX  Medium]]\n\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-gitignore":{"title":"Rust gitignore","content":"\n# rust gitignore\n\n```gitignore\n/target/ # build\n**/*.rs.bk #backup files\n#Cargo.lock #only if making a library\n```","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Rust-terminal":{"title":"Rust Terminal Apps","content":"\n# Rust Terminal Apps\n\nhttps://github.com/fdehau/tui-rs\nhttps://github.com/crossterm-rs/crossterm\n\nhttps://www.joshmcguigan.com/blog/build-your-own-shell-rust/\n\nhttps://www.reddit.com/r/rust/comments/7hog3u/how_do_i_tell_cargo_to_run_some_other_file_not/\n\nhttps://www.reddit.com/r/rust/comments/4nrldm/opengl_in_rust/\n\nsdl2 = { git = \"https://github.com/Rust-SDL2/rust-sdl2.git\" }\n\nhttps://nercury.github.io/rust/opengl/tutorial/2018/02/08/opengl-in-rust-from-scratch-01-window.html\n\n```\n  run pkg_config fail: \"`\\\"pkg-config\\\" \\\"--libs\\\" \\\"--cflags\\\" \\\"openssl\\\"` did not exit successfully: exit status: 1\\nerror: could not find system library 'openssl' required by the 'openssl-sys' crate\\n\\n--- stderr\\nPackage openssl was not found in the pkg-config search path.\\nPerhaps you should add the directory containing `openssl.pc'\\nto the PKG_CONFIG_PATH environment variable\\nNo package 'openssl' found\\n\"\n\n  --- stderr\n  thread 'main' panicked at '\n\n  Could not find directory of OpenSSL installation, and this `-sys` crate cannot\n  proceed without this knowledge. If OpenSSL is installed and this crate had\n  trouble finding it,  you can set the `OPENSSL_DIR` environment variable for the\n  compilation process.\n\n  Make sure you also have the development packages of openssl installed.\n  For example, `libssl-dev` on Ubuntu or `openssl-devel` on Fedora.\n\n  If you're in a situation where you think the directory *should* be found\n  automatically, please open a bug at https://github.com/sfackler/rust-openssl\n  and include information about your system as well as this message.\n\n  $HOST = x86_64-unknown-linux-gnu\n  $TARGET = x86_64-unknown-linux-gnu\n  openssl-sys = 0.9.72\n\n  ', /home/ben/.cargo/registry/src/github.com-1ecc6299db9ec823/openssl-sys-0.9.72/build/find_normal.rs:180:5\n  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nwarning: build failed, waiting for other jobs to finish...\nerror: failed to compile `cargo-edit v0.8.0`, intermediate artifacts can be found at `/tmp/cargo-install0ToPw4`\n\nCaused by:\n  build failed\n\n```\n\n\n---\n\n# Errors\n\nhttps://dev.to/amberisvibin/solving-rustc-cannot-find-lxcb-shape-oe9\n lxbc error\n\n libxcb-shape0-dev  libxcb-xfixes0-dev\n\n cmake latest version needs to be installed\n\n lib","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Scope-in-Rust":{"title":"Scope in Rust","content":"\n# Scope in Rust\nscope begins where it's created and ends at the end of the block, and through nested blocks.\n\n```rust\nfn main(){\n\tlet x = 5;\n\t\n}\n```\n\nx is available through the entire block\n\nvariables can be *shadowed*\nvars are always local to their scope\n\n```rust\nfn main(){\n\tlet x = 5;\n\t{\n\t\tlet x = 99;\n\t\tprintln!(\"{}\",x); // prints 99\n\t}\n\tprintln!(\"{}\",x); // prints 5\n}\n```\n\nyou can also shadow vars in the same scope\n\n```rust\nfn main()\n{\n\tlet mut x = 5; // is mutable\n\tlet x = x; // x is now immutable\n}\n```\n \u003ecompiler will often discard earlier changes for optimization","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Semantic-Versioning-in-Rust":{"title":"Semantic Versioning in Rust","content":"\n# semantic versioning\n\nx.y.z\nx -\u003e major version\ny -\u003e minor version\nz -\u003e patch version\n\nrust rules\n\nwhen the version is less than 1.0 =\u003e changing minor means breaking change, patch version means whatever you want\n\ngreater than 1.0 \nmajor changes are breaking\nminor =\u003e adding functionality\npatch =\u003e fixing bugs\n\nput versions in cargo.toml\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Strings-in-Rust":{"title":"Strings in Rust","content":"\n\n# Strings\n## Compound Types\n\nstore multiple values of other types into one type.\n\n---\n# Tuple\nstore multiple values of any type.\n```rust\nlet info: (u8,f64,i32) = (1,3.3,999);\nlet jets = info.0;\nlet fuel = info.1;\nlet ammo = info.2;\n```\nrust uses the dot syntax to emphasize the members of tuples are not always the same type.\n\nthe second way to access a tuple is all at once\n\n```rust\nlet info = (1,3.3,999);\nlet (jets,fuel,ammo) = info;\n\n```\n\n\u003etuples currently have a max airedy of 12, or the amount of items in a tuple, (you can't have more than 12 at least with full functionality)\n\n## Array\nstore multiple vals of same type\n\nspecify them literally \n```rust\nlet buf = [1,2,3];\n```\n\nor with a value in how many should be in the array with a semicolon\n\n```rust\nlet buf:[u8;3] = [1,2,3];\n```\n\nyou index vals in array as usual with square brackets.\n\n\u003e!! Arrays are limited to a size of 32, above witch they loose most of their functionality.\n\u003eArrays live on the stack by default. so you will usually use vectors of slices of vectors instead of arrays\n\n# Strings\nthese get crazy, there are 6 types\n\nbut only 2 get used for most things.\n\n1. string slice -\u003e str, will almost always be seen as a borrowed string slice -\u003e \u0026str\n\n\u003e Borrowed string slice is often refereed to as a string which is confusing because the other type is also called String with a capital S.\n\n1. String\n\n\n\u003e! Data in string slice **CANNOT** be modified. Data in a *String* **CAN** be modified\n\n\nYou will often create a string by calling the `to_string()` method.\n\n```rust\nlet msg = \"abc\".to_string();\n```\n\nor by using *from*\n\n```rust\nlet msg = String::from(\"abc\");\n```\n\nA borrowed string slice is internally made up of a pointer to some bytes\n\n\u003e\u0026str\n\u003e\n\u003eptr-\u003e| a | b | c | d |\n\u003e\n\u003elen = 4.\n\u003e\n\u003ecapacity = 8\n\nstring slices are a subset of String in more ways than one. so they share other characteristics too.\n\nboth string types are valic UTF-8\n\n\u003eStrings **CANNOT** be indexed by character position.\n\u003eenglish is NOT the only language in the world\n\nStrings are Unicode -\u003e gets complicated\n\nUnicode scalars in UTF-8 can be represented by 1,2,3, or 4 bytes. and you have to traverse the bytes in order. \n\n\ngraphemes -\u003e scalars -\u003e bytes\n\nSo there are some options for string stuff\n\nusing bytes.\n\n```rust\nword.bytes(); // works well for english ASCII\nword.chars(); // retrieve iterator to go through scalars\n\n```\n\nthere is a package called unicode_segmentation()\nthat can handle graphemes of many types\n\n```rust\ngraphemes(my_string,true)\n```\n\n\u003eThere are many helper methods for strings to use but if you end up having to manually iterate through a string there is a handy function called .nth(3)","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Structs-in-Rust":{"title":"Structs in Rust","content":"\n\n# Structs\n\nin other languages there are classes, in Rust there are Structs\n\nstructs can have\n- data fields\n- methods\n- associated functions\n\nstructs should be in capital cammelcase\n\n```rust\nstruct RedFox {\n\tenemy: bool,\n\tlife: u8,\n}\n```\n\nyou can end last field with a comma too.\n\n\nInstantiating a struct is straight forward but verbose. you need to call it and set a value for each field.\n\nto make this easier you can use a constructor, these are defined in an implementation\n\n```rust\nimpl RedFox {\n\tfn new() -\u003e self {\n\t\tself {\n\t\t\tenemy: true,\n\t\t\tlife: 70,\n\t\t}\n\t}\n}\n```\n\nfn new =\u003e is an associate function. Because it doesn't have a form of self as first parameter. In other languages you might call this a class method. with new being the conventional name used to instantiate.\n\n```rust\nlet fox = RedFox::new();\n```\n\nhere the scope operators :: are used to access the method inside the struct.\n\nno struct inheritance. = fixes OOP stuff","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Threads-in-Rust":{"title":"Threads in Rust","content":"\n# Threads\n\n\u003eIn rust threading is cross platform, mac win linux and more.\n\n```rust\nuse std::thread;\n\nfn main() {\n\tlet handle = thread::spawn(move || {\n\t\t// do stuff in a child thread\n\t});\n\t// do stuff simultaneously in the main thead\n\t\n\t// wait until thread has exited\n\thandle.join().unwrap();\n}\n```\n\nthread spawn takes a closure with no arguments.\nspawn returns a join handle.\n\n\u003edon't use threads for waiting for stuff use async stuff instead","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Traits-in-Rust":{"title":"Traits in Rust","content":"\n# Traits\n\nrust takes the composition over inheritance route.\n\ntraits are somewhat like interfaces in other languages\n\n```rust\nstruct RedFox {\n\tenemy:bool,\n\tlife:u32,\n}\n\ntrait Noisy {\n\tfn get_noise(\u0026self) -\u003e \u0026str;\n}\n\nimpl Noisy for RedFox {\n\tfn get_noise(\u0026self) -\u003e \u0026str { \"Meow?\" }\n}\n```\n\nimplementing noisy trait on redfox\n\nthe reason to do this is because once traits are involved we can implement generic functions that accept any value that implements a trait.\n\n```rust\nfn print_noise\u003cT:Noisy\u003e(item:T) {\n\tprintln!(\"{}\", item.get_noise());\n}\n```\n\n\u003eas long as one of either the trait or struct you can implement traits or structs from anywhere.\n\n\u003e There is a special trait called *copy*\n\u003e if your type implements copy then it will be copied instead of moved in move situations.\n\u003e This is ideal for small values that live entirely on the stack.\n\u003e If a type uses the heap at all then it cannot implement copy\n\u003e you can opt in to implement copy if your type only uses other copy types.\n\n\u003e!! Traits do implement inheritance, unlike structs. movement -\u003e run -\u003e fly\n\u003eThis really just means that anyone that implements a child trait must implement the parent traits as well.\n\nTraits can have default behaviors\n\nTraits can also define default trait behavior\n\n```rust\ntrait Run {\n\tfn run(\u0026self) {\n\t\tprintln!(\"default behavior\");\n\t}\n}\n\ntruct Robot {}\nimpl Run for Robot {}\n```\n\nthe presence of an implementation will override the default\n\n```rust\ntrait Run {\n\tfn run(\u0026self) {\n\t\tprintln!(\"default behavior\");\n\t}\n}\n\ntruct Robot {}\nimpl Run for Robot {}\n\nfn main() {\n\tlet robot = Robot {};\n\trobot.run();\n}\n```\n\n\u003e !!! Fields cannot be inside traits","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Programming/RUST/Unsafe-RUST":{"title":"Unsafe Rust","content":"","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Self-Study":{"title":"","content":"\nSelf Study is a critical skill, especially in computer science, technical art, and artistic fields.\n\nIn fact I would go so far as to say if you have a hard time learning on your own you either need to get to a point where it's natural or you may want to consider perusing a different field.\n\nOn a lighter note, it is possible to learn. The difficulty comes because most of us are trained to follow instructions and do what we are told. When you are suddenly expected to be self-motivated and do projects on your own it's going to be hard and you may feel discouraged and give up. Don't give up yet.\n\nOne of the best short explanations that I've found recently is a video from *Corridor* on how to self-study. Watch that first before moving forward.\n\n[I Taught Myself How to Learn ANYTHING (and you can too)! - YouTube](https://www.youtube.com/watch?v=brffDCE5hXs)\n\n---\n\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unity/1610-Notes":{"title":"DGM1610 Notes","content":"\n\nplease change file extension to all your scripts to be .cs. Also please make sure you are checking the Teams channel. If you don't get the teams application on your phone and computer. I'll give you full credit once you change the file extensions and resubmit\n\n---\nRepo file layouts\n\n- each lab should be in a folder\n- each file should be apply named so I can find it\n\nfor example\nLab-1b/\nvariables.cs\nlab-1b-challenge.cs\n\n---\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unity/Game-Development":{"title":"Unity for Game dev","content":"\n\n# DGM 1610 - Game Development\n\n---\n\n[[notes/Unity/1610 Notes]]\n\n[[notes/Programming/RUST/Rust Hub]]\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unity/Unity-Hub":{"title":"Unity Hub","content":"\n\n[[notes/Unity/Game-Development]]\n\n\n# C Sharp Stuff\n[[notes/Programming/CSharp/C-Sharp Hub]]\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/BSD/BSD-Hub":{"title":"BSD Hub","content":"","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Add-entry-for-Default-Terminals":{"title":"Add Entry for Default Terminals","content":"\n\nhttps://askubuntu.com/questions/1245337/how-to-change-the-terminal-to-alacritty-in-open-in-terminal-context-mneu\n\nhttps://itsfoss.com/change-default-terminal-ubuntu/\n\nadd entry\n```bash\nsudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/local/bin/alacritty 50\n```\n\nview entries\n```bash\nsudo update-alternatives --config x-terminal-emulator\n```\n\nremove entry\n```bash\nsudo update-alternatives --remove \"x-terminal-emulator\" \"/usr/local/bin/alacritty\"\n```\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Add-to-PATH-linux":{"title":"Add to PATH linux","content":"\n\n```bash\nexport PATH=\"/some/path/something:$PATH\"\n# or\n\nPATH=\"/path/to/dir:$PATH\"\n\n\n```","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Bash-Move-All-Items-Up-One":{"title":"Bash Move All Items","content":"\n```bash\nfind . -name \"*HEAVY*\" -exec grep -H 'XYZ' {} +\n```\n\nmove all things in nested dir up one","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Bash-Rename-Files":{"title":"Bash Rename Files","content":"\n# bash rename\n \n ```bash\n rename s/(^0\\d)/Something$1/ *.txt\n ```\n\n[10:07 PM]\nthe parentheses mean 'find this pattern and store it' (edited)\n[10:08 PM]\nthen, replace it with 'Something', and retrieve the stored value again with $1\nNEW\n[10:09 PM]\nfor adding something to the beginning of files, it's obviously overkill. but over time the usefulness becomes more apparent. find files based on a really complex regular expression and then rename them in some very specific way, etc...\n[10:10 PM]\ni'm still a RegEx novice, but i use them quite a bit for odd things here and there, and they're great. they're the foundation of pattern matching in Linux and knowing them means being able to do tons of things with a terminal that other people would need a messy GUI app for\n[10:11 PM]\noh and for rename you can pass the -n flag i believe to see what it will do without doing it. a dry run\n\nsmall correction to the above - to be parsed correctly, the perl expression should be in quotes\n[10:17 PM]\n\n```\nrename  's/(^0\\d)/Something$1/' *.txt \n```\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Change-Symlink-Bash":{"title":"Change Symlink Bash","content":"\n\nto update link, either delete the link and redo it. \nif you are linking to a folder use -n tag aswell\n\n```bash\nln -sfn /a/new/path files\n```\n\n`-n` this option is necessary when linking to a different target to avoid a sub-folder inside that sym link and instead replaced the link.","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Check-Current-Terminal":{"title":"Check Current Terminal","content":"\n\n```bash\n\nbasename \"/\"$(ps -f -p $(cat /proc/$(echo $)/stat | cut -d \\  -f 4) | tail -1 | sed 's/^.* //')\n\n```","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Check-if-Env-Var-Exists":{"title":"Check if Env Var Exists","content":"\n\n```bash\nif [[ -z \"${DEPLOY_ENV}\" ]]; then\n  MY_SCRIPT_VARIABLE=\"Some default value because DEPLOY_ENV is undefined\"\nelse\n  MY_SCRIPT_VARIABLE=\"${DEPLOY_ENV}\"\nfi\n\n# or using a short-hand version\n\n[[ -z \"${DEPLOY_ENV}\" ]] \u0026\u0026 MyVar='default' || MyVar=\"${DEPLOY_ENV}\"\n\n# or even shorter use\n\nMyVar=\"${DEPLOY_ENV:-default_value}\"\n```","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Customizing-Bash":{"title":"Customizing Bash","content":"\ninstall this https://ohmybash.nntoan.com/\nthere is one for z shell too.\n\nif you want the fancy arrow things make sure and install powerline fonts\n\nhttps://microhobby.com.br/blog/2020/05/23/how-to-install-powerline-for-bash-wsl-and-native-linux/\n\nhere's the list of themes\n\nhttps://github.com/ohmybash/oh-my-bash/wiki/Themes#agnoster\n\nhttps://github.com/microsoft/cascadia-code/releases this is neat font too\n\nhttps://github.com/powerline/fonts powerline fonts\n\n\nhttps://github.com/ryanoasis/nerd-fonts nerd fonts\n\nfor vscode you need to set the terminal font in settings to powerline and mono compatible font\n\n## bash config\nhttps://github.com/mccyclone/scripts/blob/master/fancy-bash-promt.sh\n\nyou can also add this too `/root/.bashrc`","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Drop-Down-Terminals":{"title":"Drop Down Terminals","content":"\n\nkauke\n\n```bash\n[![IntelliJ IDEA](moz-extension://296a2c11-aed0-47f9-845d-6b0d8208628a/intellij-idea.svg)](https://github.com/gotbletu/shownotes/blob/master/any_term_dropdown.sh#)\n\n#!/usr/bin/env bash\n\n# AUTHOR: gotbletu (@gmail|twitter|youtube|github|lbry)\n\n# https://www.youtube.com/user/gotbletu\n\n# DESC: turn any terminal into a dropdown terminal\n\n# DEMO: https://www.youtube.com/watch?v=mVw2gD9iiOg\n\n# DEPEND: coreutils xdotool wmutils (https://github.com/wmutils/core | https://aur.archlinux.org/packages/wmutils-git/)\n\n# CLOG: 2021-02-10 use comm to match window name and class, this avoids terminal windows with different names\n\n# 2015-02-15 0.1\n\n# get screen resolution width and height\n\nROOT=$(lsw -r)\n\nwidth=$(wattr w \"$ROOT\")\n\nheight=$(wattr h \"$ROOT\")\n\n# option 1: set terminal emulator manually\n\n# my_term=urxvt\n\n# my_term=sakura\n\nmy_term=\"xterm\"\n\n# my_term=\"alacritty\"\n\n# my_term=terminator\n\n# my_term=gnome-terminal\n\n# option 2: auto detect terminal emulator (note: make sure to only open one)\n\n# my_term=\"urxvt|xterm|uxterm|termite|sakura|lxterminal|terminator|mate-terminal|pantheon-terminal|konsole|gnome-terminal|xfce4-terminal\"\n\n# get terminal emulator pid ex: 44040485\n\n# pid=$(xdotool search --class \"$my_term\" | tail -n1)\n\n# get terminal emulator and matching name pid ex: 44040485\n\npid=$(comm -12 \u003c(xdotool search --name \"$my_term\" | sort) \u003c(xdotool search --class \"$my_term\" | sort))\n\n# get windows id from pid ex: 0x2a00125%\n\nwid=$(printf 0x%x \"$pid\")\n\n# maximize terminal emulator\n\nwrs \"$width\" \"$height\" \"$wid\"\n\n# toggle show/hide terminal emulator\n\nmapw -t \"$wid\"\n\n```","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Emacs-Notes":{"title":"Emacs Notes","content":"\nhttps://www.youtube.com/watch?v=PorMlQgbrCs\nhttps://www.youtube.com/watch?v=hHdM2wVM1PI -\u003e multiple emacs configs\n\nhttps://systemcrafters.cc/emacs-tips/multiple-configurations-with-chemacs2 \n\nhttps://www.mattduck.com/2021-05-upgrading-to-emacs-28.html\n\n```\n--with-native-compilation\n```\n\nhttps://www.reddit.com/r/emacs/comments/qf9jjx/what_compilation_flags_do_you_use_for_your_emacs/\n\nhttps://emacs.stackexchange.com/questions/59538/compile-emacs-from-feature-native-comp-gccemacs-branch-on-ubuntu\nhttps://www.reddit.com/r/emacs/comments/rojo7y/emacs_native_compilation_cannot_find_libgccjit/\nhttps://www.reddit.com/r/emacs/comments/jyowe0/introducing_emacswebkit_a_successor_to/\nhttps://github.com/akirakyle/emacs-webkit\nhttps://emacs.stackexchange.com/questions/36694/compile-emacs-with-xwidgets-in-ubuntu-14-04","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Find-Out-Where-App-is-Installed-Linux":{"title":"Find out where app is installed linux","content":"\n\nhttps://unix.stackexchange.com/questions/19369/how-to-find-the-installation-path-for-a-software-under-linux\n\n`which`\n\n```bash\nfind / -name fluidpoint 2\u003e /dev/null\n```","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Fixing-Redshift-Linux":{"title":"Fixing Redshift Linux","content":"\n# Fixing Redshift\n\ngot an email about dependencies\n\nHi benjamin​   \n  \nYou do not need to use the maxon App at all.  \nThat is only for newer redshift licenses.  \n  \nCan you Try:  \nsudo apt update  \nsudo apt install libpng12-0  \nsudo apt install libqtcore4  \nsudo apt install libqtgui4  \nthen run the redshiftLicensingTool\n\nhttps://ubuntuhandbook.org/index.php/2020/07/install-qt4-ubuntu-20-04/\n\nhttps://knowledge.autodesk.com/support/maya/learn-explore/caas/simplecontent/content/installing-maya-2020-ubuntu.html\n\nCan you try the following?  \nI think you'll indeed also need libpng15 for the new redshiftLicensingTool.  \nThis isn't supplied in a package anywhere so you have to build it yourself.  \nThese instructions might help. [https://knowledge.autodesk.com/support/maya/learn-explore/caas/simplecontent/content/installing-maya-2020-ubuntu.html](https://knowledge.autodesk.com/support/maya/learn-explore/caas/simplecontent/content/installing-maya-2020-ubuntu.html)  \nYou have to move the files \"libpng15.a\" \"libpng15.so\" \"libpng15.so.15\" and \"libpng15.so.15.15.0\" into /usr/lib/x86-64-gnu after building.\n\n\u003e! On POPOS the folder is x86-64-linux-gnu\n\nhttp://pano.sentiovr.com/ - spaceengine cubemaps to sphere\nhttps://paulbourke.net/panorama/cubemaps/\nhttps://legacy.imagemagick.org/Usage/montage/","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Frame-Buffer-Capture-Linux":{"title":"Frame Bugger Capture Linux","content":"\n\nhttps://www.youtube.com/watch?v=_Ua-d9OeUOg\n\nframe buffer capture for fast screen recording","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Linux/Linux-Hub":{"title":"Linux Hub","content":"\n[[notes/Unix/Linux/Emacs Notes]]\n\n[[notes/git/Git Hub]]\n\n[[notes/Unix/Linux/Check Current Terminal]]\n\n[[notes/Unix/Linux/Check if Env Var Exists]]\n\n[[notes/Unix/Linux/Drop Down Terminals]]\n\n[[notes/3D-Modeling/Houdini/Redshift3d Linux]]\n\n[[notes/Unix/Linux/Add to PATH linux]]\n\n[[notes/Unix/Linux/Frame Buffer Capture Linux]]\n\n[[notes/Unix/Linux/Find Out Where App is Installed Linux]]\n\n[[notes/Unix/Linux/Customizing Bash]]\n\n[[notes/Unix/Linux/Change Symlink Bash]]\n\n[[notes/Unix/Linux/Bash Move All Items Up One]]\n\n[[notes/Unix/Linux/Add entry for Default Terminals]]\n\n[[notes/3D-Modeling/Maya/Maya on Fedora]]\n\n\n[[notes/3D-Modeling/Houdini/Houdini Bash]]\n\n[[notes/Unix/Linux/Bash Rename Files]]\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/Unix/Unix-Hub":{"title":"Unix Hub","content":"\n# What is Unix?\n\n\n[The UNIX® Standard | The Open Group Website](https://www.opengroup.org/membership/forums/platform/unix)\n\n[Unix - Wikipedia](https://en.wikipedia.org/wiki/Unix)\n\n[The UNIX® Standard | The Open Group Website](https://www.opengroup.org/membership/forums/platform/unix)\n\n\n# Linux\n\n[[notes/Unix/Linux/Linux Hub]]\n\n\n# BSD\n\n[[notes/Unix/BSD/BSD Hub]]\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/VFX/Animating-Still-Images":{"title":"Animating Still Images","content":"\nThis page has resources for matte paintings in film and VFX. I'll update this as I find more resources.\n\n# Resources\n\n[Matte Painting Camera Animation || Nuke || Animatie Flix - YouTube](https://www.youtube.com/watch?v=5Jgk2SUxlSE)\n\n[Using CopyCat to Animate from a Series of Still Frames | Nuke 13.2 Machine Learning Tutorial - YouTube](https://www.youtube.com/watch?v=zZNp1vetJOY)\n\n[Nuke Matte Painting Tutorial| Matte Painting with Nuke \u0026 Photoshop | 3D Matte Painting - YouTube](https://www.youtube.com/watch?v=rtIKgfRcWWE)\n\n[Nuke Matte Painting Tutorial| Matte Painting with Nuke \u0026 Photoshop | 3D Matte Painting - YouTube](https://www.youtube.com/watch?v=rtIKgfRcWWE)\n\n[3D Animated Matte Painting - Post Apocalyptic - YouTube](https://www.youtube.com/watch?v=fmv-lPSsWa4)\n\n[Advanced Compositing for VFX | Week 1 Lessons for Nuke Artists - YouTube](https://www.youtube.com/watch?v=zD6ZGhfSFdI)\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/VFX/VFX-Hub":{"title":"VFX Hub","content":"\n[[notes/VFX/Animating Still Images]]\n\n[[notes/Nuke/Nuke Hub]]\n\n","lastmodified":"2023-01-14T00:13:43.763061092Z","tags":null},"/notes/bitwig-hub":{"title":"","content":"Bitwig is a digital audio workstation (DAW).\n\nDeveloped my a company in Germany with a focus on workflow and creativity.\n\n","lastmodified":"2023-01-14T00:13:43.963064674Z","tags":null},"/notes/blender-compositing":{"title":"","content":"","lastmodified":"2023-01-14T00:13:43.963064674Z","tags":null},"/notes/course-specific-stuff/2D-for-3D/2D-for-3D-Hub":{"title":"2D for 3D Hub","content":"\n[[notes/3D-Modeling/blender/Blender Hub]]\n","lastmodified":"2023-01-14T00:13:43.963064674Z","tags":null},"/notes/course-specific-stuff/Courses-Hub":{"title":"Courses Hub","content":"\n[[notes/course specific stuff/Intro to Csharp and Unity/Intro to Unity and Csharp Hub]]\n\n[[notes/3D-Modeling/DGM 2210 - 3D for 2D Pipelines]]\n\n[[notes/course specific stuff/javascript for toonboom/Javscript For ToonBoom Hub]]\n\n","lastmodified":"2023-01-14T00:13:43.963064674Z","tags":null},"/notes/course-specific-stuff/Intro-to-Csharp-and-Unity/Intro-to-Unity-and-Csharp-Hub":{"title":"Intro to Unity and CSharp Hub","content":"","lastmodified":"2023-01-14T00:13:43.963064674Z","tags":null},"/notes/course-specific-stuff/javascript-for-toonboom/Javscript-For-ToonBoom-Hub":{"title":"Javascript for ToonBoom Hub","content":"\n\n\n[[notes/Programming/Javascript/Javascript Hub]]","lastmodified":"2023-01-14T00:13:43.967064745Z","tags":null},"/notes/courses/Scripting-for-Animation-2":{"title":"Scripting for Animation 2","content":"\nThis course is a little different because it's for 2D animation students. However there is still a need to know or be somewhat familiar with technical aspects that are often involved in 2D animation. This is the aim of this course.\n\n\n---\n\n# Lessons\n\n## Knowledge Management\n\n[[notes/General/Productivity/Meta Learning|Meta Learning]]\n\n[[notes/General/Productivity/Knowledge Management|Knowledge Management]]\n\n\n---\n\n## Programming Fundamentals\n\nWe are going to learn some of the fundamentals of programming. My goal is to teach you the fundamentals so you can understand the basics of any programming language you encounter.\n\n\n\nTo do so, I will cover the following things. \n\n- History of computing\n- How computers work\n- What are programming languages\n- How do programming languages work\n- What is javascript\n\n\n\n","lastmodified":"2023-01-14T00:13:43.967064745Z","tags":null},"/notes/devops/Dev-Ops-Hub":{"title":"Dev Ops Hub","content":"","lastmodified":"2023-01-14T00:13:43.967064745Z","tags":null},"/notes/git/Git-Hub":{"title":"Git Hub","content":"\nGit is the standard *version control* solution for a majority of digital projects.\n\nGit is first and foremost a *command-line tool* or *CLI*. This means that it runs in whatever text-based interface your OS uses. Typically:\n\n\n\n| OS      | Terminal                      |\n| ------- | ----------------------------- |\n| Linux   | bash                          |\n| Mac     | ZSH                           |\n| Windows | command prompt and powershell | \n\n![[notes/attachments/Peek 2023-01-11 08-25.gif]]\n\nThere is a lot to know about terminals and shells. More info [[notes/Unix/Linux/Linux Hub|here]].\n\n\n\n\n---\n\n# Other notes\n\n\n[[notes/git/remove git submodule]]\n","lastmodified":"2023-01-14T00:13:43.967064745Z","tags":null},"/notes/git/remove-git-submodule":{"title":"Remove git submodule","content":"\n# remove git submodule\nSummary\n\nThe 3-steps removal process would then be:\n\n0. mv a/submodule a/submodule_tmp\n\n1. git submodule deinit -f -- a/submodule    \n2. rm -rf .git/modules/a/submodule\n3. git rm -f a/submodule\n\n\u003e[!Note]  a/submodule (no trailing slash)\n\n# or, if you want to leave it in your working tree and have done step 0\n3.   git rm --cached a/submodule\n3bis mv a/submodule_tmp a/submodule\n\n\n---\ntitle: {title}\n---\n\n\n\n# Git Submodule\n\npull all git submodules in repo\n\n```bash\ngit submodule update --recursive --remote\n```\n","lastmodified":"2023-01-14T00:13:43.967064745Z","tags":null},"/notes/godot-hub/Godot-4-Notes":{"title":"Godot 4 Notes","content":"\n","lastmodified":"2023-01-14T00:13:43.967064745Z","tags":null},"/notes/godot-hub/Godot-Hub":{"title":"Godot Hub","content":"\n","lastmodified":"2023-01-14T00:13:43.967064745Z","tags":null},"/notes/houdini-compositing":{"title":"","content":"","lastmodified":"2023-01-14T00:13:43.967064745Z","tags":null},"/notes/test":{"title":"","content":"# H1 header\n\nasdkfjasldjkagdsa\n\n\u003ecallout\n\n```python\nproc this_is_a_function:\n\tpass\n\n```\n\n[[notes/Other/My Portfolio Stuff/Portfolio Hub|portfolio]]\n\n\n\n![[notes/attachments/Pasted image 20221231140610.png]]\n\n# second thing\n\nThis is about the second thing\n\n1. sdf\n2. sdf\n3. asdf\n4. adf\n\n\n- asdf\n- asdf\n- asdf\n\t- asdf\n\t\t- asdf\n\n\n---\n\n# section 3\n\n#frogs\n\n\n\n\n","lastmodified":"2023-01-14T00:13:43.967064745Z","tags":null},"/notes/toonboom/ToonBoom-Hub":{"title":"ToonBoom Hub","content":"","lastmodified":"2023-01-14T00:13:43.967064745Z","tags":null}}